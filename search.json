[{"path":"https://pharmaverse.github.io/sdtmchecks/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"Apache License","title":"Apache License","text":"Version 2.0, January 2004 <http://www.apache.org/licenses/>","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/sdtmchecks/LICENSE.html","id":"id_1-definitions","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"1. Definitions","title":"Apache License","text":"“License” shall mean terms conditions use, reproduction, distribution defined Sections 1 9 document. “Licensor” shall mean copyright owner entity authorized copyright owner granting License. “Legal Entity” shall mean union acting entity entities control, controlled , common control entity. purposes definition, “control” means () power, direct indirect, cause direction management entity, whether contract otherwise, (ii) ownership fifty percent (50%) outstanding shares, (iii) beneficial ownership entity. “” (“”) shall mean individual Legal Entity exercising permissions granted License. “Source” form shall mean preferred form making modifications, including limited software source code, documentation source, configuration files. “Object” form shall mean form resulting mechanical transformation translation Source form, including limited compiled object code, generated documentation, conversions media types. “Work” shall mean work authorship, whether Source Object form, made available License, indicated copyright notice included attached work (example provided Appendix ). “Derivative Works” shall mean work, whether Source Object form, based (derived ) Work editorial revisions, annotations, elaborations, modifications represent, whole, original work authorship. purposes License, Derivative Works shall include works remain separable , merely link (bind name) interfaces , Work Derivative Works thereof. “Contribution” shall mean work authorship, including original version Work modifications additions Work Derivative Works thereof, intentionally submitted Licensor inclusion Work copyright owner individual Legal Entity authorized submit behalf copyright owner. purposes definition, “submitted” means form electronic, verbal, written communication sent Licensor representatives, including limited communication electronic mailing lists, source code control systems, issue tracking systems managed , behalf , Licensor purpose discussing improving Work, excluding communication conspicuously marked otherwise designated writing copyright owner “Contribution.” “Contributor” shall mean Licensor individual Legal Entity behalf Contribution received Licensor subsequently incorporated within Work.","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/LICENSE.html","id":"id_2-grant-of-copyright-license","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"2. Grant of Copyright License","title":"Apache License","text":"Subject terms conditions License, Contributor hereby grants perpetual, worldwide, non-exclusive, -charge, royalty-free, irrevocable copyright license reproduce, prepare Derivative Works , publicly display, publicly perform, sublicense, distribute Work Derivative Works Source Object form.","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/LICENSE.html","id":"id_3-grant-of-patent-license","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"3. Grant of Patent License","title":"Apache License","text":"Subject terms conditions License, Contributor hereby grants perpetual, worldwide, non-exclusive, -charge, royalty-free, irrevocable (except stated section) patent license make, made, use, offer sell, sell, import, otherwise transfer Work, license applies patent claims licensable Contributor necessarily infringed Contribution(s) alone combination Contribution(s) Work Contribution(s) submitted. institute patent litigation entity (including cross-claim counterclaim lawsuit) alleging Work Contribution incorporated within Work constitutes direct contributory patent infringement, patent licenses granted License Work shall terminate date litigation filed.","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/LICENSE.html","id":"id_4-redistribution","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"4. Redistribution","title":"Apache License","text":"may reproduce distribute copies Work Derivative Works thereof medium, without modifications, Source Object form, provided meet following conditions: () must give recipients Work Derivative Works copy License; (b) must cause modified files carry prominent notices stating changed files; (c) must retain, Source form Derivative Works distribute, copyright, patent, trademark, attribution notices Source form Work, excluding notices pertain part Derivative Works; (d) Work includes “NOTICE” text file part distribution, Derivative Works distribute must include readable copy attribution notices contained within NOTICE file, excluding notices pertain part Derivative Works, least one following places: within NOTICE text file distributed part Derivative Works; within Source form documentation, provided along Derivative Works; , within display generated Derivative Works, wherever third-party notices normally appear. contents NOTICE file informational purposes modify License. may add attribution notices within Derivative Works distribute, alongside addendum NOTICE text Work, provided additional attribution notices construed modifying License. may add copyright statement modifications may provide additional different license terms conditions use, reproduction, distribution modifications, Derivative Works whole, provided use, reproduction, distribution Work otherwise complies conditions stated License.","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/LICENSE.html","id":"id_5-submission-of-contributions","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"5. Submission of Contributions","title":"Apache License","text":"Unless explicitly state otherwise, Contribution intentionally submitted inclusion Work Licensor shall terms conditions License, without additional terms conditions. Notwithstanding , nothing herein shall supersede modify terms separate license agreement may executed Licensor regarding Contributions.","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/LICENSE.html","id":"id_6-trademarks","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"6. Trademarks","title":"Apache License","text":"License grant permission use trade names, trademarks, service marks, product names Licensor, except required reasonable customary use describing origin Work reproducing content NOTICE file.","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/LICENSE.html","id":"id_7-disclaimer-of-warranty","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"7. Disclaimer of Warranty","title":"Apache License","text":"Unless required applicable law agreed writing, Licensor provides Work (Contributor provides Contributions) “” BASIS, WITHOUT WARRANTIES CONDITIONS KIND, either express implied, including, without limitation, warranties conditions TITLE, NON-INFRINGEMENT, MERCHANTABILITY, FITNESS PARTICULAR PURPOSE. solely responsible determining appropriateness using redistributing Work assume risks associated exercise permissions License.","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/LICENSE.html","id":"id_8-limitation-of-liability","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"8. Limitation of Liability","title":"Apache License","text":"event legal theory, whether tort (including negligence), contract, otherwise, unless required applicable law (deliberate grossly negligent acts) agreed writing, shall Contributor liable damages, including direct, indirect, special, incidental, consequential damages character arising result License use inability use Work (including limited damages loss goodwill, work stoppage, computer failure malfunction, commercial damages losses), even Contributor advised possibility damages.","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/LICENSE.html","id":"id_9-accepting-warranty-or-additional-liability","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"9. Accepting Warranty or Additional Liability","title":"Apache License","text":"redistributing Work Derivative Works thereof, may choose offer, charge fee , acceptance support, warranty, indemnity, liability obligations /rights consistent License. However, accepting obligations, may act behalf sole responsibility, behalf Contributor, agree indemnify, defend, hold Contributor harmless liability incurred , claims asserted , Contributor reason accepting warranty additional liability. END TERMS CONDITIONS","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/LICENSE.html","id":"appendix-how-to-apply-the-apache-license-to-your-work","dir":"","previous_headings":"","what":"APPENDIX: How to apply the Apache License to your work","title":"Apache License","text":"apply Apache License work, attach following boilerplate notice, fields enclosed brackets [] replaced identifying information. (Don’t include brackets!) text enclosed appropriate comment syntax file format. also recommend file class name description purpose included “printed page” copyright notice easier identification within third-party archives.","code":"Copyright 2022 F. Hoffmann-La Roche AG  Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at    http://www.apache.org/licenses/LICENSE-2.0  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License."},{"path":"https://pharmaverse.github.io/sdtmchecks/articles/sdtmchecks.html","id":"to-start-using-sdtmchecks-first-install-the-latest-version-from-github","dir":"Articles","previous_headings":"","what":"To start using sdtmchecks first install the latest version from GitHub","title":"Introduction to sdtmchecks","text":"","code":"devtools::install_github(\"pharmaverse/sdtmchecks\")"},{"path":"https://pharmaverse.github.io/sdtmchecks/articles/sdtmchecks.html","id":"then-just-load-the-package","dir":"Articles","previous_headings":"","what":"Then just load the package","title":"Introduction to sdtmchecks","text":"","code":"library(sdtmchecks)"},{"path":"https://pharmaverse.github.io/sdtmchecks/articles/sdtmchecks.html","id":"heres-how-to-access-the-help-page-for-the-package","dir":"Articles","previous_headings":"","what":"Here’s how to access the help page for the package","title":"Introduction to sdtmchecks","text":"","code":"# type ??sdtmchecks into the console ??sdtmchecks"},{"path":"https://pharmaverse.github.io/sdtmchecks/articles/sdtmchecks.html","id":"the-package-comes-with-the-sdtmchecksmeta-dataset-which-contains-metadata-on-each-check-function","dir":"Articles","previous_headings":"","what":"The package comes with the sdtmchecksmeta dataset which contains metadata on each check function","title":"Introduction to sdtmchecks","text":"contains details like function name, category, priority, descriptions function given Category (Cross Therapeutic Area, Oncology, Covid-19, Patient Reported Outcomes, Ophthalmology) Priority (High, Medium, Low).","code":"#Just type this in sdtmchecksmeta ## # A tibble: 10 × 5 ##    check                              title            category priority domains ##    <chr>                              <chr>            <chr>    <chr>    <chr>   ##  1 check_ae_aeacn_ds_disctx_covid     COVID AE trt di… COVID    Low      ae, ds  ##  2 check_ae_aeacnoth                  AE AEACNOTH mul… ALL      Low      ae      ##  3 check_ae_aeacnoth_ds_disctx        AE AEACNOTx Dis… ALL      Low      ae, ds  ##  4 check_ae_aeacnoth_ds_stddisc_covid COVID AE study … COVID    Low      ae, ds  ##  5 check_ae_aedecod                   AE Missing PT    ALL      High     ae      ##  6 check_ae_aedthdtc_aesdth           AE Death Date v… ALL      High     ae      ##  7 check_ae_aedthdtc_ds_death         DS Death Dates … ALL      High     ae, ds  ##  8 check_ae_aelat                     AE AELAT Missing OPHTH    High     ae      ##  9 check_ae_aeout                     AE Death Outcome ALL      High     ae      ## 10 check_ae_aeout_aeendtc_aedthdtc    Fatal AE Resolu… ALL      High     ae"},{"path":"https://pharmaverse.github.io/sdtmchecks/articles/sdtmchecks.html","id":"lets-do-an-example-using-check_ae_ds_partial_death_datesaeds","dir":"Articles","previous_headings":"","what":"Let’s do an example using check_ae_ds_partial_death_dates(AE,DS)","title":"Introduction to sdtmchecks","text":"check flags records partial death dates (.e. length <10) AE DS. found, data check returns FALSE attributes containing list flagged records well brief message explaining result. issues detected check returns TRUE.","code":"# Use sample data frames. AE ##   USUBJID AEDECOD   AEDTHDTC ## 1       1     AE1 2017-01-01 ## 2       2     AE2       2017 ## 3       3     AE3       <NA> DS ##   USUBJID       DSSCAT DSDECOD    DSSTDTC ## 1       4 STUDY DISCON   DEATH 2018-01-01 ## 2       5 STUDY DISCON   DEATH 2017-03-03 ## 3       6 STUDY DISCON   DEATH 2018-01-02 ## 4       7 STUDY DISCON   DEATH    2016-10 # Run the data check. check_ae_ds_partial_death_dates(AE,DS) ## [1] FALSE ## attr(,\"msg\") ## [1] \"There are 2 patients with partial death dates. \" ## attr(,\"data\") ##   USUBJID       DSSCAT DSDECOD DSSTDTC AEDECOD AEDTHDTC ## 1       2         <NA>    <NA>    <NA>     AE2     2017 ## 2       7 STUDY DISCON   DEATH 2016-10    <NA>     <NA>"},{"path":"https://pharmaverse.github.io/sdtmchecks/articles/sdtmchecks.html","id":"running-all-the-checks-on-your-data-is-super-easy","dir":"Articles","previous_headings":"","what":"Running all the checks on your data is super easy","title":"Introduction to sdtmchecks","text":"Just use run_all_checks function. function assumes sdtm datasets objects global environment, e.g. ae,dm,ex,etc run_all_checks function lets easily subset category priority","code":"# Read data to your global environment ae = haven::read_sas(\"path/to/ae.sas7bdat\") ds = haven::read_sas(\"path/to/ds.sas7bdat\")  # Run the checks and save as an object called \"myreport\" myreport=run_all_checks(metads = sdtmchecksmeta,                priority = c(\"High\", \"Medium\", \"Low\"), #subset checks based on priority                type = c(\"ALL\", \"ONC\", \"COVID\", \"PRO\", \"OPHTH\"), #subset checks based category                verbose = TRUE)  class(myreport) #results in a list object names(myreport) #each check result is saved in a slot of the list myreport[[\"check_ae_aedecod\"]] #investigate the results of a check myreport=run_all_checks(metads = sdtmchecksmeta,                priority = c(\"High\"),                type = c(\"ONC\"),                verbose = TRUE)"},{"path":"https://pharmaverse.github.io/sdtmchecks/articles/sdtmchecks.html","id":"heres-a-way-to-get-started-with-some-checks-that-should-work-fairly-well-for-most-datasets","dir":"Articles","previous_headings":"","what":"Here’s a way to get started with some checks that should work fairly well for most datasets","title":"Introduction to sdtmchecks","text":"","code":"# Read data to your global environment ae = haven::read_sas(\"path/to/ae.sas7bdat\") cm = haven::read_sas(\"path/to/cm.sas7bdat\") dm = haven::read_sas(\"path/to/dm.sas7bdat\")  # Subset to checks that should work OK for most datasets metads = sdtmchecksmeta %>%   filter(check %in% c(\"check_ae_aedecod\",                       \"check_ae_aetoxgr\",                       \"check_ae_dup\",                       \"check_cm_cmdecod\",                       \"check_cm_missing_month\",                       \"check_dm_age_missing\",                       \"check_dm_usubjid_dup\",                       \"check_dm_armcd\"                       ))  myreport=run_all_checks(metads = metads,                verbose = TRUE)"},{"path":"https://pharmaverse.github.io/sdtmchecks/articles/sdtmchecks.html","id":"you-can-then-write-results-out-to-an-xlsx-for-easy-sharing","dir":"Articles","previous_headings":"","what":"You can then write results out to an xlsx for easy sharing","title":"Introduction to sdtmchecks","text":"","code":"report_to_xlsx(res=myreport,outfile=\"check_report.xlsx\")"},{"path":"https://pharmaverse.github.io/sdtmchecks/articles/sdtmchecks.html","id":"theres-also-a-convenient-helper-function-to-write-out-a-user-friendly-r-script-with-all-the-check-function-calls","dir":"Articles","previous_headings":"","what":"There’s also a convenient helper function to write out a user friendly R script with all the check function calls","title":"Introduction to sdtmchecks","text":"","code":"create_R_script(file = \"run_the_checks.R\")"},{"path":"https://pharmaverse.github.io/sdtmchecks/articles/write_a_check.html","id":"background","dir":"Articles","previous_headings":"","what":"Background","title":"Writing a New Check","text":"Clinical trial datasets can contain million different types incorrect data. package intend comprehensively cover scenarios data may wrong. Instead data checks package intended generalizable, actionable, meaningful analysis. example many clinical trials contain CO domain, however sdtmchecks package functionality around domain usually meaningful analysis.","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/articles/write_a_check.html","id":"working-in-github","dir":"Articles","previous_headings":"","what":"Working in GitHub","title":"Writing a New Check","text":"main branch contains latest released version used development. devel branch default branch contains latest development version package. start contributing, please make feature branch devel. code ready incorporated please open pull request another person review prior merging update devel. write access repository, please work forked repo open pull request fork.","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/articles/write_a_check.html","id":"existing-checks","dir":"Articles","previous_headings":"","what":"Existing Checks","title":"Writing a New Check","text":"sdtmchecksmeta dataset lists existing checks contains helpful additional information","code":"#Just type this in sdtmchecksmeta ## # A tibble: 10 × 4 ##    check                              domains title                  description ##    <chr>                              <chr>   <chr>                  <chr>       ##  1 check_ae_aeacn_ds_disctx_covid     ae, ds  COVID AE trt discon    Check pati… ##  2 check_ae_aeacnoth                  ae      AE AEACNOTH multiple   Check for … ##  3 check_ae_aeacnoth_ds_disctx        ae, ds  AE AEACNOTx Discon     Check for … ##  4 check_ae_aeacnoth_ds_stddisc_covid ae, ds  COVID AE study discon  Check pati… ##  5 check_ae_aedecod                   ae      AE Missing PT          Check for … ##  6 check_ae_aedthdtc_aesdth           ae      AE Death Date vs Indi… Check for … ##  7 check_ae_aedthdtc_ds_death         ae, ds  DS Death Dates in AE   Check that… ##  8 check_ae_aelat                     ae      AE AELAT Missing       OPHTHALMOL… ##  9 check_ae_aeout                     ae      AE Death Outcome       Check for … ## 10 check_ae_aeout_aeendtc_aedthdtc    ae      Fatal AE Resolution D… Check for …"},{"path":"https://pharmaverse.github.io/sdtmchecks/articles/write_a_check.html","id":"good-practices","dir":"Articles","previous_headings":"","what":"Good Practices","title":"Writing a New Check","text":"writing new check, function name start word ‘check’ contain key dataset information plus 1-2 word description, .e. check_[dataset1]_..._[datasetN]_[brief description]. example: check_dm_race <- function(DM){...} check_dv_ae_covid <- function(DV, AE){...} function minimum take datasets investigated parameters, e.g. check_ae_aedecod <- function(AE){...} function start check required variables. following internal functions may helpful : %lacks_all%,%lacks_any%,%has_all%, %has_any%. checks use internal pass() fail() functions return either TRUE FALSE depending check results. functions enable attributes attached boolean result, e.g. message listing flagged records. sdtmchecks intentionally attempts minimize external dependencies. something keep mind developing new check. Currently dependencies dplyr tidyselect.","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/articles/write_a_check.html","id":"example-check","dir":"Articles","previous_headings":"","what":"Example Check","title":"Writing a New Check","text":"writing first check might helpful start editing existing one, example one :","code":"#' Example check #' #' @param DM  #' #' @return boolean #' @export #' #' @examples #' #' \\dontrun{ #'    check_dm_age_missing(DM) #'   } #'  check_dm_age_missing <- function(DM){   ###First check that required variables exist and return a message if they don't   if(DM %lacks_any% c(\"USUBJID\",\"AGE\")){       fail(lacks_msg(DM, c(\"USUBJID\",\"AGE\")))   }else{     ### Subset DM to only records with missing AGE     mydf_0 = subset(DM, is_sas_na(DM$AGE), c(\"USUBJID\",\"AGE\"))     ### Subset DM to only records with AGE<18     mydf_1 = subset(DM, !is_sas_na(DM$AGE) & DM$AGE<18, c(\"USUBJID\",\"AGE\"))     ### Subset DM to only records with AGE>90     mydf_2 = subset(DM, !is_sas_na(DM$AGE) & DM$AGE>=90, c(\"USUBJID\",\"AGE\"))     ### Combine records with abnormal AGE     mydf3 = rbind(mydf_0, mydf_1, mydf_2)     mydf = mydf3[order(mydf3$USUBJID),]     rownames(mydf)=NULL     ###Print to report     ### Return message if no records with missing AGE, AGE<18 or AGE>90     if(nrow(mydf)==0){       pass()       ### Return subset dataframe if there are records with missing AGE, AGE<18 or AGE>90     }else if(nrow(mydf)>0){         fail(paste(\"There are \",length(unique(mydf$USUBJID)),                    \" patients with suspicious age values. \",sep=\"\"),              mydf)         }   } }"},{"path":"https://pharmaverse.github.io/sdtmchecks/articles/write_a_check.html","id":"additional-considerations","dir":"Articles","previous_headings":"","what":"Additional Considerations","title":"Writing a New Check","text":"check impactful analysis? Checking little used aspects SDTM data can cause unnecessary work. check meaningful across many trials specific just small number trials? false positives minimized? check useful end users need sift large number incorrectly flagged records find one two correctly flagged records. SDTM IG MedDRA versions need considered?","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Harris. Author, maintainer.","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Harris W (2023). sdtmchecks: Data Quality Checks SDTM Datasets. https://pharmaverse.github.io/sdtmchecks/, https://github.com/pharmaverse/sdtmchecks.","code":"@Manual{,   title = {sdtmchecks: Data Quality Checks for SDTM Datasets},   author = {Will Harris},   year = {2023},   note = {https://pharmaverse.github.io/sdtmchecks/, https://github.com/pharmaverse/sdtmchecks}, }"},{"path":"https://pharmaverse.github.io/sdtmchecks/index.html","id":"sdtmchecks","dir":"","previous_headings":"","what":"Data Quality Checks for SDTM Datasets","title":"Data Quality Checks for SDTM Datasets","text":"package contains functions identify common data issues SDTM data. checks intended generalizable, actionable, meaningful analysis.","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/index.html","id":"contributing","dir":"","previous_headings":"","what":"Contributing","title":"Data Quality Checks for SDTM Datasets","text":"package developed internally Roche since 2014. may areas checks expect Roche-specific SDTM implementation choices. Proposed additions modifications attempt maintain generalizeability slightly different data standards across companies. examples learn contributing general, please click . idea new check time development, please open issue.","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Data Quality Checks for SDTM Datasets","text":"can install sdtmchecks github :","code":"devtools::install_github(\"pharmaverse/sdtmchecks\")"},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ae_aeacn_ds_disctx_covid.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if COVID-19 AE indicated DRUG WITHDRAWN then Treatment Discon\nindicates ADVERSE EVENT — check_ae_aeacn_ds_disctx_covid","title":"Check if COVID-19 AE indicated DRUG WITHDRAWN then Treatment Discon\nindicates ADVERSE EVENT — check_ae_aeacn_ds_disctx_covid","text":"code checks patient COVID-19 AE AEACN=DRUG WITHDRAWN also corresponding DS.DSDECOD ADVERSE EVENT.","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ae_aeacn_ds_disctx_covid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if COVID-19 AE indicated DRUG WITHDRAWN then Treatment Discon\nindicates ADVERSE EVENT — check_ae_aeacn_ds_disctx_covid","text":"","code":"check_ae_aeacn_ds_disctx_covid(AE, DS, covid_df = NULL)"},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ae_aeacn_ds_disctx_covid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if COVID-19 AE indicated DRUG WITHDRAWN then Treatment Discon\nindicates ADVERSE EVENT — check_ae_aeacn_ds_disctx_covid","text":"AE Adverse Events SDTM dataset variables USUBJID,AETERM,AEDECOD,AESTDTC,AEACNx DS Disposition SDTM dataset variables USUBJID,DSSPID,DSCAT,DSDECOD covid_df Dataframe AE terms identify covid, contains variable REFTERM","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ae_aeacn_ds_disctx_covid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if COVID-19 AE indicated DRUG WITHDRAWN then Treatment Discon\nindicates ADVERSE EVENT — check_ae_aeacn_ds_disctx_covid","text":"boolean value check returns 0 obs, otherwise return subset dataframe.","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ae_aeacn_ds_disctx_covid.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Check if COVID-19 AE indicated DRUG WITHDRAWN then Treatment Discon\nindicates ADVERSE EVENT — check_ae_aeacn_ds_disctx_covid","text":"Sarwan Singh","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ae_aeacn_ds_disctx_covid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if COVID-19 AE indicated DRUG WITHDRAWN then Treatment Discon\nindicates ADVERSE EVENT — check_ae_aeacn_ds_disctx_covid","text":"","code":"covid_df = data.frame(REFTERM = c(\"COVID-19\",                                   \"CORONAVIRUS POSITIVE\"                                   )                      ) AE <- data.frame(     STUDYID = 1,     USUBJID = c(1,2,3,1,2,3),     AESTDTC = '2020-05-05',     AETERM  = c(\"abc Covid-19\", \"covid TEST POSITIVE\",rep(\"other AE\",4)),     AEDECOD = c(\"COVID-19\", \"CORONAVIRUS POSITIVE\", rep(\"OTHER AE\",4)),     AEACN = c(\"DRUG WITHDRAWN\", rep(\"DOSE NOT CHANGED\",5)),     stringsAsFactors = FALSE )  DS <- data.frame(  USUBJID = c(1,1,2,3,4),  DSSPID  = 'XXX-DISCTX-XXX',  DSCAT   = \"DISPOSITION EVENT\",  DSDECOD = \"REASON\",  stringsAsFactors = FALSE )  check_ae_aeacn_ds_disctx_covid(AE, DS, covid_df) #> [1] FALSE #> attr(,\"msg\") #> [1] \"1 patient(s) with COVID-19 AE indicating drug withdrawn but no Treatment Discon form indicating AE. \" #> attr(,\"data\") #>   USUBJID  AEDECOD    AESTDTC          AEACN #> 1       1 COVID-19 2020-05-05 DRUG WITHDRAWN  DS[1, \"DSDECOD\"] <- 'ADVERSE EVENT' check_ae_aeacn_ds_disctx_covid(AE, DS, covid_df) #> [1] TRUE"},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ae_aeacnoth.html","id":null,"dir":"Reference","previous_headings":"","what":"Check for null AEACNOT1/2 when AEACNOTH = 'MULTIPLE' — check_ae_aeacnoth","title":"Check for null AEACNOT1/2 when AEACNOTH = 'MULTIPLE' — check_ae_aeacnoth","text":"Flag patient record null values AEACNOT1 AEACNOT2 AEACNOTH = 'MULTIPLE', likely mapping issue","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ae_aeacnoth.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check for null AEACNOT1/2 when AEACNOTH = 'MULTIPLE' — check_ae_aeacnoth","text":"","code":"check_ae_aeacnoth(AE, preproc = identity, ...)"},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ae_aeacnoth.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check for null AEACNOT1/2 when AEACNOTH = 'MULTIPLE' — check_ae_aeacnoth","text":"AE Adverse Events SDTM dataset variables USUBJID, AETERM, AESTDTC, AEACNOTH, AEACNOT1/2, AESPID (optional) preproc optional company specific preprocessing script ... arguments passed methods","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ae_aeacnoth.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check for null AEACNOT1/2 when AEACNOTH = 'MULTIPLE' — check_ae_aeacnoth","text":"boolean value check failed passed 'msg' attribute test failed","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ae_aeacnoth.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Check for null AEACNOT1/2 when AEACNOTH = 'MULTIPLE' — check_ae_aeacnoth","text":"Ross Farrugia","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ae_aeacnoth.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check for null AEACNOT1/2 when AEACNOTH = 'MULTIPLE' — check_ae_aeacnoth","text":"","code":"AE <- data.frame(  USUBJID = 1:7,  AETERM = 1:7,  AESTDTC = 1:7,  AEACNOTH = 1:7,  AEACNOT1 = 1:7,  AEACNOT2 = 1:7,  AESPID = \"FORMNAME-R:13/L:13XXXX\" )  check_ae_aeacnoth(AE) #> [1] TRUE  AE$AEACNOTH[1] = \"\" AE$AEACNOT1[1] = \"\" AE$AEACNOT2[1] = \"\" AE$AEACNOTH[2] = \"MULTIPLE\" AE$AEACNOT1[2] = \"DOSE REDUCED\" AE$AEACNOT2[2] = \"DRUG WITHDRAWN\" AE$AEACNOTH[3] = \"MULTIPLE\" AE$AEACNOT1[3] = \"DOSE REDUCED\" AE$AEACNOT2[3] = \"\" AE$AEACNOTH[4] = \"MULTIPLE\" AE$AEACNOT1[4] = \"\" AE$AEACNOT2[4] = \"DRUG WITHDRAWN\" AE$AEACNOTH[5] = \"MULTIPLE\" AE$AEACNOT1[5] = \"\" AE$AEACNOT2[5] = \"\" check_ae_aeacnoth(AE) #> [1] FALSE #> attr(,\"msg\") #> [1] \"AE has 3 records with null AEACNOT[1/2] when AEACNOTH = 'MULTIPLE'. \" #> attr(,\"data\") #>   USUBJID AETERM AESTDTC AEACNOTH     AEACNOT1       AEACNOT2 #> 1       3      3       3 MULTIPLE DOSE REDUCED                #> 2       4      4       4 MULTIPLE              DRUG WITHDRAWN #> 3       5      5       5 MULTIPLE                             check_ae_aeacnoth(AE,preproc=roche_derive_rave_row) #> [1] FALSE #> attr(,\"msg\") #> [1] \"AE has 3 records with null AEACNOT[1/2] when AEACNOTH = 'MULTIPLE'. \" #> attr(,\"data\") #>   USUBJID AETERM AESTDTC AEACNOTH     AEACNOT1       AEACNOT2          RAVE #> 1       3      3       3 MULTIPLE DOSE REDUCED                FORMNAME-R:13 #> 2       4      4       4 MULTIPLE              DRUG WITHDRAWN FORMNAME-R:13 #> 3       5      5       5 MULTIPLE                             FORMNAME-R:13  AE$AEACNOTH <- NULL AE$AEACNOT1 <- NULL AE$AEACNOT2 <- NULL AE$AESPID <- NULL check_ae_aeacnoth(AE) #> [1] FALSE #> attr(,\"msg\") #> [1] \"AE is missing the variables: AEACNOTH, AEACNOT1, AEACNOT2\""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ae_aeacnoth_ds_disctx.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if, whenever a patient experiences an AE leading to study discontinuation,\nthey also have a DS record indicating this. — check_ae_aeacnoth_ds_disctx","title":"Check if, whenever a patient experiences an AE leading to study discontinuation,\nthey also have a DS record indicating this. — check_ae_aeacnoth_ds_disctx","text":"code checks patient AE AEACNOTx = \"SUBJECT DISCONTINUED STUDY\" (x = \"H\", \"1\", \"2\", ...) also record DS DS.DSSCAT = \"STUDY COMPLETION/EARLY DISCONTINUATION\" DS.DSDECOD != \"COMPLETED\".","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ae_aeacnoth_ds_disctx.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if, whenever a patient experiences an AE leading to study discontinuation,\nthey also have a DS record indicating this. — check_ae_aeacnoth_ds_disctx","text":"","code":"check_ae_aeacnoth_ds_disctx(AE, DS, preproc = identity, ...)"},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ae_aeacnoth_ds_disctx.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if, whenever a patient experiences an AE leading to study discontinuation,\nthey also have a DS record indicating this. — check_ae_aeacnoth_ds_disctx","text":"AE Adverse Events SDTM dataset variables USUBJID, AEDECOD, AEACNOTx DS Disposition SDTM dataset variables USUBJID, DSCAT, DSSCAT, DSDECOD preproc optional company specific preprocessing script ... arguments passed methods","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ae_aeacnoth_ds_disctx.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if, whenever a patient experiences an AE leading to study discontinuation,\nthey also have a DS record indicating this. — check_ae_aeacnoth_ds_disctx","text":"boolean value check returns 0 obs, otherwise return subset dataframe.","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ae_aeacnoth_ds_disctx.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Check if, whenever a patient experiences an AE leading to study discontinuation,\nthey also have a DS record indicating this. — check_ae_aeacnoth_ds_disctx","text":"Edoardo Mancini","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ae_aeacnoth_ds_disctx.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if, whenever a patient experiences an AE leading to study discontinuation,\nthey also have a DS record indicating this. — check_ae_aeacnoth_ds_disctx","text":"","code":"AE <- data.frame(     STUDYID  = \"1001\",     USUBJID  = c(\"1\",\"2\",\"3\",\"4\",\"5\",\"1\"),     AESTDTC  = rep('2020-05-05', 6),     AEDECOD  = c(\"HEADACHE\", \"HEART ATTACK\",\"CHILLS\", \"PNEUMONIA\", \"ARTHRITIS\", \"FATIGUE\"),     AEACNOTH = c(\"NONE\", \"SUBJECT DISCONTINUED FROM STUDY\", \"MULTIPLE\", \"NONE\",                  \"SUBJECT DISCONTINUED FROM STUDY\", \"SUBJECT DISCONTINUED FROM STUDY\"),     AEACNOT1 = c(\"\", \"\", \"PROCEDURE/SURGERY\", \"\", \"\", \"\"),     AEACNOT2 = c(\"\", \"\", \"SUBJECT DISCONTINUED FROM STUDY\", \"\", \"\", \"\"),     AESPID = \"FORMNAME-R:13/L:13XXXX\",     stringsAsFactors = FALSE )  DS <- data.frame(     USUBJID = c(\"1\",\"5\"),     DSCAT   = c(\"DISPOSITION EVENT\", \"DISPOSITION EVENT\"),     DSSCAT  = c(\"STUDY COMPLETION/EARLY DISCONTINUATION\", \"STUDY COMPLETION/EARLY DISCONTINUATION\"),     DSDECOD = c(\"ADVERSE EVENT\", \"ADVERSE EVENT\" ),     stringsAsFactors = FALSE )  check_ae_aeacnoth_ds_disctx(AE, DS) #> [1] FALSE #> attr(,\"msg\") #> [1] \"2 patient(s) with AEs leading to Study Discontinuation but no corresponding record in DS. \" #> attr(,\"data\") #>   USUBJID      AEDECOD    AESTDTC                        AEACNOTH #> 1       2 HEART ATTACK 2020-05-05 SUBJECT DISCONTINUED FROM STUDY #> 2       3       CHILLS 2020-05-05                        MULTIPLE #>            AEACNOT1                        AEACNOT2 DSCAT DSSCAT DSDECOD #> 1                                                    <NA>   <NA>    <NA> #> 2 PROCEDURE/SURGERY SUBJECT DISCONTINUED FROM STUDY  <NA>   <NA>    <NA> check_ae_aeacnoth_ds_disctx(AE, DS, preproc=roche_derive_rave_row) #> [1] FALSE #> attr(,\"msg\") #> [1] \"2 patient(s) with AEs leading to Study Discontinuation but no corresponding record in DS. \" #> attr(,\"data\") #>   USUBJID      AEDECOD    AESTDTC                        AEACNOTH #> 1       2 HEART ATTACK 2020-05-05 SUBJECT DISCONTINUED FROM STUDY #> 2       3       CHILLS 2020-05-05                        MULTIPLE #>            AEACNOT1                        AEACNOT2          RAVE DSCAT DSSCAT #> 1                                                   FORMNAME-R:13  <NA>   <NA> #> 2 PROCEDURE/SURGERY SUBJECT DISCONTINUED FROM STUDY FORMNAME-R:13  <NA>   <NA> #>   DSDECOD #> 1    <NA> #> 2    <NA>"},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ae_aeacnoth_ds_stddisc_covid.html","id":null,"dir":"Reference","previous_headings":"","what":"Check for COVID-related AE leading to Study Discon without DS Study Discon — check_ae_aeacnoth_ds_stddisc_covid","title":"Check for COVID-related AE leading to Study Discon without DS Study Discon — check_ae_aeacnoth_ds_stddisc_covid","text":"Flag patient record COVID-related AE AE.AEDECOD matches covid.REFTERM leads STUDY discon (AE.AEACNOT*=SUBJECT DISCONTINUED STUDY) STUDY Discon record DS (DS.DSSCAT=STUDY DISCONTINUATION)","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ae_aeacnoth_ds_stddisc_covid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check for COVID-related AE leading to Study Discon without DS Study Discon — check_ae_aeacnoth_ds_stddisc_covid","text":"","code":"check_ae_aeacnoth_ds_stddisc_covid(AE, DS, covid_df = NULL)"},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ae_aeacnoth_ds_stddisc_covid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check for COVID-related AE leading to Study Discon without DS Study Discon — check_ae_aeacnoth_ds_stddisc_covid","text":"AE Adverse Events SDTM dataset variables USUBJID,AEDECOD,AEACNOT* (can multiple vars) DS Discon SDTM dataset variables USUBJID,DSSCAT,DSDECOD covid_df Dataframe AE terms identify covid, contains variable REFTERM","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ae_aeacnoth_ds_stddisc_covid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check for COVID-related AE leading to Study Discon without DS Study Discon — check_ae_aeacnoth_ds_stddisc_covid","text":"boolean value check failed passed 'msg' attribute test failed","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ae_aeacnoth_ds_stddisc_covid.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Check for COVID-related AE leading to Study Discon without DS Study Discon — check_ae_aeacnoth_ds_stddisc_covid","text":"Natalie Springfield","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ae_aeacnoth_ds_stddisc_covid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check for COVID-related AE leading to Study Discon without DS Study Discon — check_ae_aeacnoth_ds_stddisc_covid","text":"","code":"covid_df = data.frame(REFTERM = c(\"COVID-19\",                                   \"CORONAVIRUS POSITIVE\"                                   )                      )  AE <- data.frame(  USUBJID = 1:5,  AEDECOD = c(\"covid-19\", \"covid-19\", \"covid-19\",\"Some AE\", \"CORONAVIRUS POSITIVE\" ),  AEACNOTH=c(\"SUBJECT DISCONTINUED FROM STUDY\",             \"NONE\",             \"NONE\",              \"SUBJECT DISCONTINUED FROM STUDY\",             \"NONE\"),  AEACNOTH1=c(\"SUBJECT DISCONTINUED FROM STUDY\",               \"NONE\",              \"SUBJECT DISCONTINUED FROM STUDY\",              \"NONE\",               \"SUBJECT DISCONTINUED FROM STUDY\"),  AEACNOTH2=c(\"SUBJECT DISCONTINUED FROM STUDY\",               \"NONE\",              \"NONE\",              \"SUBJECT DISCONTINUED FROM STUDY\",              \"NONE\") )  DS <- data.frame(  USUBJID = 1:3,  DSSCAT=c(\"TREATMENT DISCONTINUATION\",\"STUDY DISCONTINUATION\",\"STUDY DISCONTINUATION\"),  DSDECOD=\"DISCON REASON\" )  check_ae_aeacnoth_ds_stddisc_covid(AE,DS,covid_df = covid_df) #> [1] FALSE #> attr(,\"msg\") #> [1] \"Found 2 patient(s) with COVID-related AE(s) leading to Study Discon, but no corresponding Study Discon in DS. \" #> attr(,\"data\") #>   USUBJID              AEDECOD DSDECOD DSSCAT                        AEACNOTH #> 1       1             COVID-19    <NA>   <NA> SUBJECT DISCONTINUED FROM STUDY #> 3       5 CORONAVIRUS POSITIVE    <NA>   <NA>                            NONE #>                         AEACNOTH1                       AEACNOTH2 #> 1 SUBJECT DISCONTINUED FROM STUDY SUBJECT DISCONTINUED FROM STUDY #> 3 SUBJECT DISCONTINUED FROM STUDY                            NONE"},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ae_aedecod.html","id":null,"dir":"Reference","previous_headings":"","what":"Check for missing AEDECOD values — check_ae_aedecod","title":"Check for missing AEDECOD values — check_ae_aedecod","text":"check looks missing AEDECOD values","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ae_aedecod.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check for missing AEDECOD values — check_ae_aedecod","text":"","code":"check_ae_aedecod(AE, preproc = identity, ...)"},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ae_aedecod.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check for missing AEDECOD values — check_ae_aedecod","text":"AE Adverse Events SDTM dataset variables USUBJID, AETERM, AEDECOD preproc optional company specific preprocessing script ... arguments passed methods","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ae_aedecod.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check for missing AEDECOD values — check_ae_aedecod","text":"boolean value check failed passed 'msg' attribute test failed","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ae_aedecod.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Check for missing AEDECOD values — check_ae_aedecod","text":"Yinghui Miao, Stella Banjo(HackR 2021)","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ae_aedecod.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check for missing AEDECOD values — check_ae_aedecod","text":"","code":"AE <- data.frame(  USUBJID = 1:5,  DOMAIN = c(rep(\"AE\", 5)),  AESEQ = 1:5,  AESTDTC = 1:5,  AETERM = 1:5,  AEDECOD = 1:5,   AESPID = c(\"FORMNAME-R:13/L:13XXXX\",              \"FORMNAME-R:16/L:16XXXX\",              \"FORMNAME-R:2/L:2XXXX\",              \"FORMNAME-R:19/L:19XXXX\",              \"FORMNAME-R:5/L:5XXXX\"),  stringsAsFactors = FALSE )  check_ae_aedecod(AE) #> [1] TRUE  AE$AEDECOD[1] = NA AE$AEDECOD[2] = \"NA\" AE$AEDECOD[3:5] = \"\" check_ae_aedecod(AE) #> [1] FALSE #> attr(,\"msg\") #> [1] \"AE has 5 record(s) with missing AEDECOD. \" #> attr(,\"data\") #>   USUBJID AESEQ AESTDTC AETERM AEDECOD #> 1       1     1       1      1    <NA> #> 2       2     2       2      2      NA #> 3       3     3       3      3         #> 4       4     4       4      4         #> 5       5     5       5      5         check_ae_aedecod(AE,preproc=roche_derive_rave_row) #> [1] FALSE #> attr(,\"msg\") #> [1] \"AE has 5 record(s) with missing AEDECOD. \" #> attr(,\"data\") #>   USUBJID          RAVE AESEQ AESTDTC AETERM AEDECOD #> 1       1 FORMNAME-R:13     1       1      1    <NA> #> 2       2 FORMNAME-R:16     2       2      2      NA #> 3       3  FORMNAME-R:2     3       3      3         #> 4       4 FORMNAME-R:19     4       4      4         #> 5       5  FORMNAME-R:5     5       5      5          AE$AEDECOD <- NULL check_ae_aedecod(AE) #> [1] FALSE #> attr(,\"msg\") #> [1] \"AE is missing the variable: AEDECOD\""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ae_aedthdtc_aesdth.html","id":null,"dir":"Reference","previous_headings":"","what":"Check AEs with AEDTHDTC value but AESDTH not ","title":"Check AEs with AEDTHDTC value but AESDTH not ","text":"check looks AE entries AEDTHDTC (death date) value AESDTH equal \"Y\"","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ae_aedthdtc_aesdth.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check AEs with AEDTHDTC value but AESDTH not ","text":"","code":"check_ae_aedthdtc_aesdth(AE, preproc = identity, ...)"},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ae_aedthdtc_aesdth.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check AEs with AEDTHDTC value but AESDTH not ","text":"AE Adverse Event SDTM dataset variables USUBJID, AEDTHDTC, AESDTH, AEDECOD, AESTDTC preproc optional company specific preprocessing script ... arguments passed methods","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ae_aedthdtc_aesdth.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check AEs with AEDTHDTC value but AESDTH not ","text":"Boolean value whether check passed failed, 'msg' attribute check failed","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ae_aedthdtc_aesdth.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Check AEs with AEDTHDTC value but AESDTH not ","text":"Shumei Chi","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ae_aedthdtc_aesdth.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check AEs with AEDTHDTC value but AESDTH not ","text":"","code":"AE <- data.frame(USUBJID = c(1:5),                  AEDTHDTC = c(rep(\"2020-01-01\",3), \"NA\", NA),                  AESDTH = c(rep(\"\", 2), \"Y\", rep(\"\", 2)),                  AEDECOD = letters[1:5],                  AESTDTC = \"2020-01-01\",                  AESPID = \"FORMNAME-R:13/L:13XXXX\",                  stringsAsFactors=FALSE)  check_ae_aedthdtc_aesdth(AE) #> [1] FALSE #> attr(,\"msg\") #> [1] \"AE has AESDTH not equal to 'Y' where AEDTHDTC has a value. \" #> attr(,\"data\") #>   USUBJID AEDECOD    AESTDTC   AEDTHDTC AESDTH #> 1       1       a 2020-01-01 2020-01-01        #> 2       2       b 2020-01-01 2020-01-01        check_ae_aedthdtc_aesdth(AE,preproc=roche_derive_rave_row) #> [1] FALSE #> attr(,\"msg\") #> [1] \"AE has AESDTH not equal to 'Y' where AEDTHDTC has a value. \" #> attr(,\"data\") #>   USUBJID AEDECOD    AESTDTC   AEDTHDTC AESDTH          RAVE #> 1       1       a 2020-01-01 2020-01-01        FORMNAME-R:13 #> 2       2       b 2020-01-01 2020-01-01        FORMNAME-R:13"},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ae_aedthdtc_ds_death.html","id":null,"dir":"Reference","previous_headings":"","what":"Check for missing AEDTHDTC where DS indicates death due to AE — check_ae_aedthdtc_ds_death","title":"Check for missing AEDTHDTC where DS indicates death due to AE — check_ae_aedthdtc_ds_death","text":"check looks missing AEDTHDTC values patients DS record DSDECOD=DEATH DSTERM contains ADVERSE EVENT","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ae_aedthdtc_ds_death.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check for missing AEDTHDTC where DS indicates death due to AE — check_ae_aedthdtc_ds_death","text":"","code":"check_ae_aedthdtc_ds_death(AE, DS)"},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ae_aedthdtc_ds_death.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check for missing AEDTHDTC where DS indicates death due to AE — check_ae_aedthdtc_ds_death","text":"AE Adverse Events SDTM dataset variables USUBJID, AEDTHDTC DS Disposition SDTM dataset variables USUBJID, DSDECOD, DSTERM, DSSTDTC","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ae_aedthdtc_ds_death.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check for missing AEDTHDTC where DS indicates death due to AE — check_ae_aedthdtc_ds_death","text":"boolean value check failed passed 'msg' attribute test failed","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ae_aedthdtc_ds_death.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Check for missing AEDTHDTC where DS indicates death due to AE — check_ae_aedthdtc_ds_death","text":"Aldrich Salva","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ae_aedthdtc_ds_death.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check for missing AEDTHDTC where DS indicates death due to AE — check_ae_aedthdtc_ds_death","text":"","code":"AE <- data.frame(  USUBJID = 1:3,  AEDTHDTC = c(NA,NA,1) )  DS <- data.frame(  USUBJID = 1:4,  DSTERM = c(\"DEATH DUE TO ADVERSE EVENT\",\"DEATH DUE TO PROGRESSIVE DISEASE\",             \"DEATH DUE TO ADVERSE EVENT\",\"DEATH DUE TO ADVERSE EVENT\")             ,  DSDECOD = rep(\"DEATH\",4),  DSSTDTC = \"2020-01-01\" )  check_ae_aedthdtc_ds_death(AE,DS) #> [1] FALSE #> attr(,\"msg\") #> [1] \"There are 2 patients where DS.DSDECOD contains 'DEATH' AND DS.DSTERM contains 'ADVERSE EVENT' but with no death date in AE.AEDTHDTC. \" #> attr(,\"data\") #>   USUBJID                     DSTERM    DSSTDTC #> 1       1 DEATH DUE TO ADVERSE EVENT 2020-01-01 #> 2       4 DEATH DUE TO ADVERSE EVENT 2020-01-01  DS$DSSTDTC = NULL  check_ae_aedthdtc_ds_death(AE,DS) #> [1] FALSE #> attr(,\"msg\") #> [1] \"DS is missing the variable: DSSTDTC\""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ae_aelat.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if AESOC has Eye, and Affected Eye is missing — check_ae_aelat","title":"Check if AESOC has Eye, and Affected Eye is missing — check_ae_aelat","text":"check looks AESOC Eye, AELAT missing.","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ae_aelat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if AESOC has Eye, and Affected Eye is missing — check_ae_aelat","text":"","code":"check_ae_aelat(AE, preproc = identity, ...)"},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ae_aelat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if AESOC has Eye, and Affected Eye is missing — check_ae_aelat","text":"AE Adverse Event Dataset Ophtho Study variables USUBJID, AELAT, AESOC, AEDECOD, AETERM, AESTDTC (present), AESPID (present) preproc optional company specific preprocessing script ... arguments passed methods","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ae_aelat.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Check if AESOC has Eye, and Affected Eye is missing — check_ae_aelat","text":"Monarch Shah (HackR 2021 Team Eye)","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ae_aelat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if AESOC has Eye, and Affected Eye is missing — check_ae_aelat","text":"","code":"AE <- data.frame(    USUBJID = 1:5,    AESTDTC = 1:5,    AELOC   = c(\"\", \"EYE\", \"eye\", \"\", \"EYE\"),    AELAT   = c(\"Left\", \"\",\"left\", \"RIGHT\", \"\"),    AETERM  = c(\"A\", \"B\", \"A\", \"B\", \"A\"),    AEDECOD = c(\"A\", \"B\", \"A\", \"B\", \"A\"),    AESOC   = c(\"Eye\", \"Eye\",\"Eye Disorder\",\"Eye Disorder\", \"Eye\"),    AESPID  = \"FORMNAME-R:19/L:19XXXX\",    stringsAsFactors = FALSE)  check_ae_aelat(AE) #> [1] FALSE #> attr(,\"msg\") #> [1] \"2 record(s) with AELAT Missing, when AE is Eye related. \" #> attr(,\"data\") #>   USUBJID AESTDTC AELAT AESOC AEDECOD AETERM #> 1       2       2         Eye       B      B #> 2       5       5         Eye       A      A check_ae_aelat(AE,preproc=roche_derive_rave_row) #> [1] FALSE #> attr(,\"msg\") #> [1] \"2 record(s) with AELAT Missing, when AE is Eye related. \" #> attr(,\"data\") #>   USUBJID AESTDTC          RAVE AELAT AESOC AEDECOD AETERM #> 1       2       2 FORMNAME-R:19         Eye       B      B #> 2       5       5 FORMNAME-R:19         Eye       A      A  AE <- data.frame(    USUBJID = 1:5,    AESTDTC = 1:5,    AELAT   = c(\"Left\", \"\",\"Bilateral\", \"\", \"\"),    AETERM  = c(\"A\", \"B\", \"A\", \"B\", \"A\"),    AEDECOD = c(\"A\", \"B\", \"A\", \"B\", \"A\"),    AESOC   = c(\"Eye\", \"Eye\",\"Eye Disorder\",\"Eye Disorder\", \"Eye\"),    stringsAsFactors = FALSE)  check_ae_aelat(AE) #> [1] FALSE #> attr(,\"msg\") #> [1] \"3 record(s) with AELAT Missing, when AE is Eye related. \" #> attr(,\"data\") #>   USUBJID AESTDTC AELAT        AESOC AEDECOD AETERM #> 1       2       2                Eye       B      B #> 2       4       4       Eye Disorder       B      B #> 3       5       5                Eye       A      A check_ae_aelat(AE,preproc=roche_derive_rave_row) #> [1] FALSE #> attr(,\"msg\") #> [1] \"3 record(s) with AELAT Missing, when AE is Eye related. \" #> attr(,\"data\") #>   USUBJID AESTDTC AELAT        AESOC AEDECOD AETERM #> 1       2       2                Eye       B      B #> 2       4       4       Eye Disorder       B      B #> 3       5       5                Eye       A      A"},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ae_aeout.html","id":null,"dir":"Reference","previous_headings":"","what":"Check for inconsistency between AE outcome (AEOUT) and death date (AEDTHDTC) — check_ae_aeout","title":"Check for inconsistency between AE outcome (AEOUT) and death date (AEDTHDTC) — check_ae_aeout","text":"check looks AEs Death date(AEDTHDTC) outcome (AEOUT) FATAL conversely AEs death date (AEDTHDTC) outcome (AEOUT) fatal","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ae_aeout.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check for inconsistency between AE outcome (AEOUT) and death date (AEDTHDTC) — check_ae_aeout","text":"","code":"check_ae_aeout(AE, preproc = identity, ...)"},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ae_aeout.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check for inconsistency between AE outcome (AEOUT) and death date (AEDTHDTC) — check_ae_aeout","text":"AE Adverse Events SDTM dataset variables USUBJID, AEDTHDTC, AEOUT preproc optional company specific preprocessing script ... arguments passed methods","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ae_aeout.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check for inconsistency between AE outcome (AEOUT) and death date (AEDTHDTC) — check_ae_aeout","text":"boolean value check failed passed 'msg' attribute test failed","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ae_aeout.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Check for inconsistency between AE outcome (AEOUT) and death date (AEDTHDTC) — check_ae_aeout","text":"Shumei Chi","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ae_aeout.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check for inconsistency between AE outcome (AEOUT) and death date (AEDTHDTC) — check_ae_aeout","text":"","code":"AE <- data.frame(     USUBJID = 1:7,     AEDTHDTC = c(NA, \"NA\", \"2015-03-12\", \"2017-01-22\", \"1999-11-07\",\"\",NA),     AEOUT = c(\"\", \"\", \"\",\"FATAL\",\"RECOVERED/RESOLVED\",\"FATAL\",\"FATAL\"),     AESPID = \"FORMNAME-R:13/L:13XXXX\",     stringsAsFactors = FALSE )  check_ae_aeout(AE) #> [1] FALSE #> attr(,\"msg\") #> [1] \"AEs with inconsistent AEDTHDTC and AEOUT found.\" #> attr(,\"data\") #>   USUBJID   AEDTHDTC              AEOUT #> 1       3 2015-03-12                    #> 2       5 1999-11-07 RECOVERED/RESOLVED #> 3       6                         FATAL #> 4       7       <NA>              FATAL check_ae_aeout(AE,preproc=roche_derive_rave_row) #> [1] FALSE #> attr(,\"msg\") #> [1] \"AEs with inconsistent AEDTHDTC and AEOUT found.\" #> attr(,\"data\") #>   USUBJID   AEDTHDTC              AEOUT          RAVE #> 1       3 2015-03-12                    FORMNAME-R:13 #> 2       5 1999-11-07 RECOVERED/RESOLVED FORMNAME-R:13 #> 3       6                         FATAL FORMNAME-R:13 #> 4       7       <NA>              FATAL FORMNAME-R:13  AE$AEDTHDTC <- NULL check_ae_aeout(AE) #> [1] FALSE #> attr(,\"msg\") #> [1] \"AE is missing the variable: AEDTHDTC\"  AE$AEOUT <- NULL check_ae_aeout(AE) #> [1] FALSE #> attr(,\"msg\") #> [1] \"AE is missing the variables: AEDTHDTC, AEOUT\""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ae_aeout_aeendtc_aedthdtc.html","id":null,"dir":"Reference","previous_headings":"","what":"Check for AE outcome (AEOUT) of 'FATAL' with non-missing resolution\ndate that is not equal to the death date — check_ae_aeout_aeendtc_aedthdtc","title":"Check for AE outcome (AEOUT) of 'FATAL' with non-missing resolution\ndate that is not equal to the death date — check_ae_aeout_aeendtc_aedthdtc","text":"check looks AEs outcome 'FATAL' AE resolution date equal AE death date. Note datapoints collected way trials - trials leave AEENDTC missing unresolved death date. Confirm within team querying issue.","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ae_aeout_aeendtc_aedthdtc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check for AE outcome (AEOUT) of 'FATAL' with non-missing resolution\ndate that is not equal to the death date — check_ae_aeout_aeendtc_aedthdtc","text":"","code":"check_ae_aeout_aeendtc_aedthdtc(AE, preproc = identity, ...)"},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ae_aeout_aeendtc_aedthdtc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check for AE outcome (AEOUT) of 'FATAL' with non-missing resolution\ndate that is not equal to the death date — check_ae_aeout_aeendtc_aedthdtc","text":"AE Adverse Events SDTM dataset variables USUBJID, AETERM, AEDTHDTC, AEENDTC, AEOUT preproc optional company specific preprocessing script ... arguments passed methods","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ae_aeout_aeendtc_aedthdtc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check for AE outcome (AEOUT) of 'FATAL' with non-missing resolution\ndate that is not equal to the death date — check_ae_aeout_aeendtc_aedthdtc","text":"boolean value check failed passed 'msg' attribute test failed","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ae_aeout_aeendtc_aedthdtc.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Check for AE outcome (AEOUT) of 'FATAL' with non-missing resolution\ndate that is not equal to the death date — check_ae_aeout_aeendtc_aedthdtc","text":"Sara Bodach, Stella Banjo(HackR 2021)","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ae_aeout_aeendtc_aedthdtc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check for AE outcome (AEOUT) of 'FATAL' with non-missing resolution\ndate that is not equal to the death date — check_ae_aeout_aeendtc_aedthdtc","text":"","code":"AE <- data.frame(     USUBJID = 1:10,     DOMAIN = \"AE\",     AEDTHDTC = c(NA, \"NA\", rep(\"2015-03-12\",4), NA, NA, \"2020-01-01\", \"\"),     AEENDTC = c(NA, \"NA\", rep(\"2015-03-12\",4), NA, \"2020-01-01\", NA, \"\"),     AEOUT = c(\"\", \"\", \"\",\"FATAL\",\"RECOVERED/RESOLVED\", rep(\"FATAL\",5)),     AETERM = 1:10,     AESPID = \"FORMNAME-R:13/L:13XXXX\",     stringsAsFactors = FALSE )  check_ae_aeout_aeendtc_aedthdtc(AE) #> [1] FALSE #> attr(,\"msg\") #> [1] \"3 AE(s) with AEOUT = 'FATAL' but AEDTHDTC and AEENDTC inconsistent. \" #> attr(,\"data\") #>   USUBJID AETERM AEENDTC   AEDTHDTC AEOUT                          NOTE #> 1       7      7    <NA>       <NA> FATAL **QUERY ONLY IF TEAM AGREES** #> 2       9      9    <NA> 2020-01-01 FATAL **QUERY ONLY IF TEAM AGREES** #> 3      10     10                    FATAL **QUERY ONLY IF TEAM AGREES** check_ae_aeout_aeendtc_aedthdtc(AE,preproc=roche_derive_rave_row) #> [1] FALSE #> attr(,\"msg\") #> [1] \"3 AE(s) with AEOUT = 'FATAL' but AEDTHDTC and AEENDTC inconsistent. \" #> attr(,\"data\") #>   USUBJID AETERM AEENDTC   AEDTHDTC AEOUT          RAVE #> 1       7      7    <NA>       <NA> FATAL FORMNAME-R:13 #> 2       9      9    <NA> 2020-01-01 FATAL FORMNAME-R:13 #> 3      10     10                    FATAL FORMNAME-R:13 #>                            NOTE #> 1 **QUERY ONLY IF TEAM AGREES** #> 2 **QUERY ONLY IF TEAM AGREES** #> 3 **QUERY ONLY IF TEAM AGREES**  AE$AESPID <- NULL check_ae_aeout_aeendtc_aedthdtc(AE) #> [1] FALSE #> attr(,\"msg\") #> [1] \"3 AE(s) with AEOUT = 'FATAL' but AEDTHDTC and AEENDTC inconsistent. \" #> attr(,\"data\") #>   USUBJID AETERM AEENDTC   AEDTHDTC AEOUT                          NOTE #> 1       7      7    <NA>       <NA> FATAL **QUERY ONLY IF TEAM AGREES** #> 2       9      9    <NA> 2020-01-01 FATAL **QUERY ONLY IF TEAM AGREES** #> 3      10     10                    FATAL **QUERY ONLY IF TEAM AGREES**  AE$AEDTHDTC <- NULL AE$AEOUT <- NULL check_ae_aeout_aeendtc_aedthdtc(AE) #> [1] FALSE #> attr(,\"msg\") #> [1] \"AE is missing the variables: AEDTHDTC, AEOUT\""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ae_aerel.html","id":null,"dir":"Reference","previous_headings":"","what":"Check for AEREL1 - AERELN when AEREL is missing and when AEREL is unexpected — check_ae_aerel","title":"Check for AEREL1 - AERELN when AEREL is missing and when AEREL is unexpected — check_ae_aerel","text":"Flag patient record null value AEREL AEREL1 - AERELN contain 'Y'/'N'/'NA', likely mapping issue AEREL missing AERELn variable AEREL unexpected value","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ae_aerel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check for AEREL1 - AERELN when AEREL is missing and when AEREL is unexpected — check_ae_aerel","text":"","code":"check_ae_aerel(AE, preproc = identity, ...)"},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ae_aerel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check for AEREL1 - AERELN when AEREL is missing and when AEREL is unexpected — check_ae_aerel","text":"AE Adverse Events SDTM dataset variables USUBJID, AESEQ, AETERM, AESTDTC, AEREL, AERELn, AESPID (present) preproc optional company specific preprocessing script ... arguments passed methods","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ae_aerel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check for AEREL1 - AERELN when AEREL is missing and when AEREL is unexpected — check_ae_aerel","text":"boolean value check failed passed 'msg' attribute test failed","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ae_aerel.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Check for AEREL1 - AERELN when AEREL is missing and when AEREL is unexpected — check_ae_aerel","text":"Vira Vrakina","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ae_aerel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check for AEREL1 - AERELN when AEREL is missing and when AEREL is unexpected — check_ae_aerel","text":"","code":"AE <- data.frame(     STUDYID = 1001,     USUBJID = c(1,2,3,1,2,3),     AESTDTC = rep('2020-05-05',6),     AETERM  = c(\"abc Covid-19\", \"covid TEST POSITIVE\",\"CHILLS\"),     AESEQ   = c(1,1,1,2,2,2),     AEREL   = c(\"Y\", \"N\", \"NA\", \"N\", \"N\", \"Y\"),     AEREL1  = c(\"Y\", \"N\", \"NA\", \"N\", \"NA\", \"Y\"),     AEREL2  = c(\"Y\", \"N\", \"NA\", \"N\", \"N\", \"N\"),     AESPID = \"FORMNAME-R:13/L:13XXXX\",     stringsAsFactors = FALSE )  check_ae_aerel(AE) #> [1] TRUE  AE1 <- data.frame(     STUDYID = 1001,     USUBJID = c(1,2,3,1,2,3),     AESTDTC = rep('2020-05-05',6),     AETERM  = c(\"abc Covid-19\", \"covid TEST POSITIVE\",\"CHILLS\"),     AESEQ   = c(1,1,1,2,2,2),     AEREL   = c(\"Y\", \"N\", \"N\", \"N\", \"N\", \"N\"),     AEREL1  = c(\"Y\", \"N\", \"NA\", \"N\", \"N\", \"\"),     AEREL2  = c(\"Y\", \"N\", \" \", \"N\", \"N\", \" \"),     AESPID = \"FORMNAME-R:13/L:13XXXX\",     stringsAsFactors = FALSE )  check_ae_aerel(AE1) #> [1] FALSE #> attr(,\"msg\") #> [1] \"AE has 2 observations where AEREL is missing but one of AEREL1 - AEREL[n] is equal to Y/N/NA, or AEREL has an unexpected value, or AEREL[n] missing. \" #> attr(,\"data\") #>   USUBJID    AESTDTC AETERM AESEQ AEREL AEREL1 AEREL2 #> 1       3 2020-05-05 CHILLS     1     N     NA        #> 2       3 2020-05-05 CHILLS     2     N               check_ae_aerel(AE1,preproc=roche_derive_rave_row) #> [1] FALSE #> attr(,\"msg\") #> [1] \"AE has 2 observations where AEREL is missing but one of AEREL1 - AEREL[n] is equal to Y/N/NA, or AEREL has an unexpected value, or AEREL[n] missing. \" #> attr(,\"data\") #>   USUBJID    AESTDTC AETERM AESEQ AEREL AEREL1 AEREL2          RAVE #> 1       3 2020-05-05 CHILLS     1     N     NA        FORMNAME-R:13 #> 2       3 2020-05-05 CHILLS     2     N               FORMNAME-R:13  AE2 <- data.frame(     STUDYID = 1001,     USUBJID = c(1,2,3,1,2,3),     AESTDTC = rep('2020-05-05',6),     AETERM  = c(\"abc Covid-19\", \"covid TEST POSITIVE\",\"CHILLS\"),     AESEQ   = c(1,1,1,2,2,2),     AEREL   = c(\"Y\", \"N\", \" \", \"N\", \"N\", \" \"),     AEREL1  = c(\"NA\", \"N\", \"NA\", \"Y\", \"N\", \" \"),     AEREL2  = c(\"Y\", \"N\", \" \", \"N\", \"N\", \" \"),     AESPID = \"FORMNAME-R:13/L:13XXXX\",     stringsAsFactors = FALSE )  check_ae_aerel(AE2) #> [1] FALSE #> attr(,\"msg\") #> [1] \"AE has 2 observations where AEREL is missing but one of AEREL1 - AEREL[n] is equal to Y/N/NA, or AEREL has an unexpected value, or AEREL[n] missing. \" #> attr(,\"data\") #>   USUBJID    AESTDTC       AETERM AESEQ AEREL AEREL1 AEREL2 #> 1       1 2020-05-05 abc Covid-19     2     N      Y      N #> 2       3 2020-05-05       CHILLS     1           NA        check_ae_aerel(AE2,preproc=roche_derive_rave_row) #> [1] FALSE #> attr(,\"msg\") #> [1] \"AE has 2 observations where AEREL is missing but one of AEREL1 - AEREL[n] is equal to Y/N/NA, or AEREL has an unexpected value, or AEREL[n] missing. \" #> attr(,\"data\") #>   USUBJID    AESTDTC       AETERM AESEQ AEREL AEREL1 AEREL2          RAVE #> 1       1 2020-05-05 abc Covid-19     2     N      Y      N FORMNAME-R:13 #> 2       3 2020-05-05       CHILLS     1           NA        FORMNAME-R:13  AE3 <- data.frame(     STUDYID = 1001,     USUBJID = c(1,2,3,1,2,3),     AESTDTC = rep('2020-05-05',6),     AETERM  = c(\"abc Covid-19\", \"covid TEST POSITIVE\",\"CHILLS\"),     AESEQ   = c(1,1,1,2,2,2),     AEREL   = c(\"Y\", \" \", \" \", \"N\", \" \", \"NA\"),     AESPID = \"FORMNAME-R:13/L:13XXXX\",     stringsAsFactors = FALSE )  check_ae_aerel(AE3) #> [1] FALSE #> attr(,\"msg\") #> [1] \"AE has 3 observations where AEREL is missing but one of AEREL1 - AEREL[n] is equal to Y/N/NA, or AEREL has an unexpected value, or AEREL[n] missing. \" #> attr(,\"data\") #>   USUBJID    AESTDTC              AETERM AESEQ AEREL #> 1       2 2020-05-05 covid TEST POSITIVE     1       #> 2       3 2020-05-05              CHILLS     1       #> 3       2 2020-05-05 covid TEST POSITIVE     2       check_ae_aerel(AE3,preproc=roche_derive_rave_row) #> [1] FALSE #> attr(,\"msg\") #> [1] \"AE has 3 observations where AEREL is missing but one of AEREL1 - AEREL[n] is equal to Y/N/NA, or AEREL has an unexpected value, or AEREL[n] missing. \" #> attr(,\"data\") #>   USUBJID    AESTDTC              AETERM AESEQ AEREL          RAVE #> 1       2 2020-05-05 covid TEST POSITIVE     1       FORMNAME-R:13 #> 2       3 2020-05-05              CHILLS     1       FORMNAME-R:13 #> 3       2 2020-05-05 covid TEST POSITIVE     2       FORMNAME-R:13   AE4 <- data.frame(     STUDYID = 1001,     USUBJID = c(1,2,3,4,5,6),     AESTDTC = rep('2020-05-05',6),     AETERM  = c(\"abc Covid-19\", \"covid TEST POSITIVE\",\"CHILLS\"),     AESEQ   = c(1,2,3,4,5,6),     AEREL   = c(\"Y\", \"Y\", \"N\", \"\", \"Y\", \"NA\"),     AEREL1  = \"\",     AEREL2  = \"\",     AESPID = \"FORMNAME-R:13/L:13XXXX\",     stringsAsFactors = FALSE )  check_ae_aerel(AE4) #> [1] FALSE #> attr(,\"msg\") #> [1] \"AE has 5 observations where AEREL is missing but one of AEREL1 - AEREL[n] is equal to Y/N/NA, or AEREL has an unexpected value, or AEREL[n] missing. \" #> attr(,\"data\") #>   USUBJID    AESTDTC              AETERM AESEQ AEREL AEREL1 AEREL2 #> 1       1 2020-05-05        abc Covid-19     1     Y               #> 2       2 2020-05-05 covid TEST POSITIVE     2     Y               #> 3       5 2020-05-05 covid TEST POSITIVE     5     Y               #> 4       3 2020-05-05              CHILLS     3     N               #> 5       4 2020-05-05        abc Covid-19     4                     check_ae_aerel(AE4,preproc=roche_derive_rave_row) #> [1] FALSE #> attr(,\"msg\") #> [1] \"AE has 5 observations where AEREL is missing but one of AEREL1 - AEREL[n] is equal to Y/N/NA, or AEREL has an unexpected value, or AEREL[n] missing. \" #> attr(,\"data\") #>   USUBJID    AESTDTC              AETERM AESEQ AEREL AEREL1 AEREL2 #> 1       1 2020-05-05        abc Covid-19     1     Y               #> 2       2 2020-05-05 covid TEST POSITIVE     2     Y               #> 3       5 2020-05-05 covid TEST POSITIVE     5     Y               #> 4       3 2020-05-05              CHILLS     3     N               #> 5       4 2020-05-05        abc Covid-19     4                     #>            RAVE #> 1 FORMNAME-R:13 #> 2 FORMNAME-R:13 #> 3 FORMNAME-R:13 #> 4 FORMNAME-R:13 #> 5 FORMNAME-R:13"},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ae_aesdth_aedthdtc.html","id":null,"dir":"Reference","previous_headings":"","what":"Check AEs with AESDTH of ","title":"Check AEs with AESDTH of ","text":"check looks AE entries AESDTH \"Y\" AEDTHDTC (death date) value","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ae_aesdth_aedthdtc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check AEs with AESDTH of ","text":"","code":"check_ae_aesdth_aedthdtc(AE, preproc = identity, ...)"},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ae_aesdth_aedthdtc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check AEs with AESDTH of ","text":"AE Adverse Event SDTM dataset variables USUBJID, AEDTHDTC, AESDTH, AEDECOD AESTDTC preproc optional company specific preprocessing script ... arguments passed methods","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ae_aesdth_aedthdtc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check AEs with AESDTH of ","text":"Boolean value whether check passed failed, 'msg' attribute check failed","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ae_aesdth_aedthdtc.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Check AEs with AESDTH of ","text":"Shumei Chi","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ae_aesdth_aedthdtc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check AEs with AESDTH of ","text":"","code":"AE <- data.frame(USUBJID = c(1:5), AEDTHDTC = c(1:2, NA, \"NA\", 3),                  AESDTH = c(\"\", rep(\"Y\",2), rep(\"\", 2)),                  AEDECOD = letters[1:5], AESTDTC = c(1:5),                  AESPID = \"FORMNAME-R:5/L:5XXXX\",                  stringsAsFactors=FALSE)  check_ae_aesdth_aedthdtc(AE) #> [1] FALSE #> attr(,\"msg\") #> [1] \"AE has AESDTH equal to 'Y' where AEDTHDTC does not have a value. \" #> attr(,\"data\") #>   USUBJID AEDECOD AESTDTC AESDTH AEDTHDTC #> 1       3       c       3      Y     <NA> check_ae_aesdth_aedthdtc(AE,preproc=roche_derive_rave_row) #> [1] FALSE #> attr(,\"msg\") #> [1] \"AE has AESDTH equal to 'Y' where AEDTHDTC does not have a value. \" #> attr(,\"data\") #>   USUBJID AEDECOD AESTDTC AESDTH AEDTHDTC         RAVE #> 1       3       c       3      Y     <NA> FORMNAME-R:5"},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ae_aestdtc_after_aeendtc.html","id":null,"dir":"Reference","previous_headings":"","what":"Check that all AE start dates are on or before AE end dates — check_ae_aestdtc_after_aeendtc","title":"Check that all AE start dates are on or before AE end dates — check_ae_aestdtc_after_aeendtc","text":"check identifies AESTDTC values AEENDTC values","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ae_aestdtc_after_aeendtc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check that all AE start dates are on or before AE end dates — check_ae_aestdtc_after_aeendtc","text":"","code":"check_ae_aestdtc_after_aeendtc(AE, preproc = identity, ...)"},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ae_aestdtc_after_aeendtc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check that all AE start dates are on or before AE end dates — check_ae_aestdtc_after_aeendtc","text":"AE Adverse Event SDTM dataset variables USUBJID,AETERM,AEDECOD,AESTDTC,AEENDTC preproc optional company specific preprocessing script ... arguments passed methods","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ae_aestdtc_after_aeendtc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check that all AE start dates are on or before AE end dates — check_ae_aestdtc_after_aeendtc","text":"boolean value check failed passed 'msg' attribute test failed","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ae_aestdtc_after_aeendtc.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Check that all AE start dates are on or before AE end dates — check_ae_aestdtc_after_aeendtc","text":"Sara Bodach","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ae_aestdtc_after_aeendtc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check that all AE start dates are on or before AE end dates — check_ae_aestdtc_after_aeendtc","text":"","code":"AE <- data.frame(  USUBJID = 1:12,  AETERM = \"SOME AE TERM\",  AEDECOD = \"SOME AE PT\",  AESTDTC = c(\"2017-01-01\",\"2017-01-03\",\"2017-01-01T14:26\",\"2017\",\"2017-02\",\"2017\"      ,\"\"    ,              \"2017\"   ,\"2017-01-01T14:26\",\"2017-01-01T14:26\",\"2017-01-01T14\",\"2017-01-01T14:26:02\")              ,  AEENDTC = c(\"2017-01-01\",\"2017-01-02\",\"2017-01-01T14:25\",\"2015\",\"2017-01\",\"2016-01-01\",              \"2000\",\"2017-02\",\"2017-01-01\"      ,\"2017-01\",\"2017-01-01T13\",\"2017-01-01T14:26:01\")              ,  AESPID = \"FORMNAME-R:19/L:19XXXX\",  stringsAsFactors=FALSE )  check_ae_aestdtc_after_aeendtc(AE) #> [1] FALSE #> attr(,\"msg\") #> [1] \"AE has 6 records with AESTDTC after AEENDTC. \" #> attr(,\"data\") #>   USUBJID       AETERM    AEDECOD          AESTDTC          AEENDTC #> 1       2 SOME AE TERM SOME AE PT       2017-01-03       2017-01-02 #> 2       3 SOME AE TERM SOME AE PT 2017-01-01T14:26 2017-01-01T14:25 #> 3       4 SOME AE TERM SOME AE PT             2017             2015 #> 4       5 SOME AE TERM SOME AE PT          2017-02          2017-01 #> 5       6 SOME AE TERM SOME AE PT             2017       2016-01-01 #> 6      11 SOME AE TERM SOME AE PT    2017-01-01T14    2017-01-01T13 check_ae_aestdtc_after_aeendtc(AE,preproc=roche_derive_rave_row) #> [1] FALSE #> attr(,\"msg\") #> [1] \"AE has 6 records with AESTDTC after AEENDTC. \" #> attr(,\"data\") #>   USUBJID       AETERM    AEDECOD          AESTDTC          AEENDTC #> 1       2 SOME AE TERM SOME AE PT       2017-01-03       2017-01-02 #> 2       3 SOME AE TERM SOME AE PT 2017-01-01T14:26 2017-01-01T14:25 #> 3       4 SOME AE TERM SOME AE PT             2017             2015 #> 4       5 SOME AE TERM SOME AE PT          2017-02          2017-01 #> 5       6 SOME AE TERM SOME AE PT             2017       2016-01-01 #> 6      11 SOME AE TERM SOME AE PT    2017-01-01T14    2017-01-01T13 #>            RAVE #> 1 FORMNAME-R:19 #> 2 FORMNAME-R:19 #> 3 FORMNAME-R:19 #> 4 FORMNAME-R:19 #> 5 FORMNAME-R:19 #> 6 FORMNAME-R:19  AE$AETERM <- NULL check_ae_aestdtc_after_aeendtc(AE) #> [1] FALSE #> attr(,\"msg\") #> [1] \"AE is missing the variable: AETERM\""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ae_aestdtc_after_dd.html","id":null,"dir":"Reference","previous_headings":"","what":"Check for AE dates occurring after death date — check_ae_aestdtc_after_dd","title":"Check for AE dates occurring after death date — check_ae_aestdtc_after_dd","text":"check looks AE dates occur death date","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ae_aestdtc_after_dd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check for AE dates occurring after death date — check_ae_aestdtc_after_dd","text":"","code":"check_ae_aestdtc_after_dd(AE, DS, preproc = identity, ...)"},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ae_aestdtc_after_dd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check for AE dates occurring after death date — check_ae_aestdtc_after_dd","text":"AE Adverse Event SDTM dataset variables USUBJID, AEDTHDTC, AESTDTC, AEDECOD, AETERM, AESPID (optional) DS Disposition SDTM dataset variables USUBJID, DSSTDTC, DSDECOD, DSTERM, DSSPID (optional) preproc optional company specific preprocessing script ... arguments passed methods","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ae_aestdtc_after_dd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check for AE dates occurring after death date — check_ae_aestdtc_after_dd","text":"Boolean value whether check passed failed, 'msg' attribute check failed","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ae_aestdtc_after_dd.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Check for AE dates occurring after death date — check_ae_aestdtc_after_dd","text":"Nina Ting Qi","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ae_aestdtc_after_dd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check for AE dates occurring after death date — check_ae_aestdtc_after_dd","text":"","code":"AE <- data.frame(STUDYID = 1:5, USUBJID = LETTERS[1:5],                  AEDTHDTC = c(rep(\"\", 4), \"2016-01-01\"),                  AESTDTC = rep(\"2016-01-01\", 5),                  AEDECOD = c(\"\",\"\", rep(\"Myocarditis\",3)),                  AETERM = c(\"INJURY\", rep(\"MYOCARDITIS\", 4)),                  AESPID = \"FORMNAME-R:19/L:19XXXX\",                  stringsAsFactors = FALSE)  DS <- data.frame(STUDYID = 1:5, USUBJID = LETTERS[1:5],                  DSSTDTC = rep(\"2016-01-02\", 5),                  DSDECOD = c(LETTERS[1:4], \"death\"),                  DSSPID = \"XXX-R:0\",                  DSTERM = letters[1:5],                  stringsAsFactors = FALSE)  check_ae_aestdtc_after_dd(AE,DS) #> [1] TRUE  AE$AESTDTC[1] <- \"2016-01-03\" AE$USUBJID[1] <- AE$USUBJID[5]  check_ae_aestdtc_after_dd(AE, DS,preproc=roche_derive_rave_row) #> [1] FALSE #> attr(,\"msg\") #> [1] \"1 patient(s) with AE occurring after death date. \" #> attr(,\"data\") #>   USUBJID AETERM    AESTDTC   AEDTHDTC       RAVE.AE RAVE.DS    DSSTDTC #> 1       E INJURY 2016-01-03 2016-01-01 FORMNAME-R:19 XXX-R:0 2016-01-02 #>   EARLIEST_DTHDTC #> 1      2016-01-01  AE$AESPID <- NULL check_ae_aestdtc_after_dd(AE, DS) #> [1] FALSE #> attr(,\"msg\") #> [1] \"1 patient(s) with AE occurring after death date. \" #> attr(,\"data\") #>   USUBJID AETERM    AESTDTC   AEDTHDTC    DSSTDTC EARLIEST_DTHDTC #> 1       E INJURY 2016-01-03 2016-01-01 2016-01-02      2016-01-01  DS$DSSPID <- NULL check_ae_aestdtc_after_dd(AE, DS) #> [1] FALSE #> attr(,\"msg\") #> [1] \"1 patient(s) with AE occurring after death date. \" #> attr(,\"data\") #>   USUBJID AETERM    AESTDTC   AEDTHDTC    DSSTDTC EARLIEST_DTHDTC #> 1       E INJURY 2016-01-03 2016-01-01 2016-01-02      2016-01-01  AE$AESTDTC <- NULL check_ae_aestdtc_after_dd(AE, DS) #> [1] FALSE #> attr(,\"msg\") #> [1] \"AE is missing the variable: AESTDTC\""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ae_aetoxgr.html","id":null,"dir":"Reference","previous_headings":"","what":"Check for missing AETOXGR and/or AESEV values — check_ae_aetoxgr","title":"Check for missing AETOXGR and/or AESEV values — check_ae_aetoxgr","text":"check looks missing AETOXGR /AESEV values returns data frame. variables exist returns records missing.","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ae_aetoxgr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check for missing AETOXGR and/or AESEV values — check_ae_aetoxgr","text":"","code":"check_ae_aetoxgr(AE, preproc = identity, ...)"},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ae_aetoxgr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check for missing AETOXGR and/or AESEV values — check_ae_aetoxgr","text":"AE Adverse Events SDTM dataset variables USUBJID, AESTDTC, AEDECOD, AETERM, AETOXGR (AESEV) preproc optional company specific preprocessing script ... arguments passed methods","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ae_aetoxgr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check for missing AETOXGR and/or AESEV values — check_ae_aetoxgr","text":"boolean value check failed passed 'msg' attribute test failed","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ae_aetoxgr.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Check for missing AETOXGR and/or AESEV values — check_ae_aetoxgr","text":"Harris, Stella Banjo (HackR 2021)","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ae_aetoxgr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check for missing AETOXGR and/or AESEV values — check_ae_aetoxgr","text":"","code":"# test with sample data   AE <- data.frame(  USUBJID = 1:3,  DOMAIN = c(rep(\"AE\", 3)),  AESEQ = 1:3,  AESTDTC = 1:3,  AETERM = c(\"FLU COUGH\", \"HEADACHE\", \"FEVER\"),  AEDECOD = c(\"\", \"Headache\", \"Fever\"),  AETOXGR = 1:3,  AESEV = 1:3,  AESPID = \"FORMNAME-R:16/L:16XXXX\",  stringsAsFactors = FALSE )  check_ae_aetoxgr(AE) #> [1] TRUE  AE$AETOXGR[1] <- NA check_ae_aetoxgr(AE) #> [1] TRUE  AE$AESEV[1] <- NA check_ae_aetoxgr(AE,preproc=roche_derive_rave_row) #> [1] FALSE #> attr(,\"msg\") #> [1] \"AE has recrods where both AESEV and AETOXGR have missing values. \" #> attr(,\"data\") #>   USUBJID    AETERM AESTDTC AEDECOD AETOXGR AESEV          RAVE #> 1       1 FLU COUGH       1              NA    NA FORMNAME-R:16  AE$AETOXGR <- NULL check_ae_aetoxgr(AE,preproc=roche_derive_rave_row) #> [1] FALSE #> attr(,\"msg\") #> [1] \"AE has 1 record(s) with missing AESEV\" #> attr(,\"data\") #>   USUBJID AESTDTC    AETERM AEDECOD AESEV          RAVE #> 1       1       1 FLU COUGH            NA FORMNAME-R:16  AE$AESPID <- NULL check_ae_aetoxgr(AE,preproc=roche_derive_rave_row) #> [1] FALSE #> attr(,\"msg\") #> [1] \"AE has 1 record(s) with missing AESEV\" #> attr(,\"data\") #>   USUBJID AESTDTC    AETERM AEDECOD AESEV #> 1       1       1 FLU COUGH            NA  AE$AESEV <- NULL check_ae_aetoxgr(AE) #> [1] FALSE #> attr(,\"msg\") #> [1] \"AE is missing both the AETOXGR and AESEV variable.\"  AE$AEDECOD <- NULL check_ae_aetoxgr(AE) #> [1] FALSE #> attr(,\"msg\") #> [1] \"AE is missing the variable: AEDECOD\""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ae_death.html","id":null,"dir":"Reference","previous_headings":"","what":"Check for Grade 5 AE death variable consistency — check_ae_death","title":"Check for Grade 5 AE death variable consistency — check_ae_death","text":"Checks grade 5 AEs marked fatal (AEOUT), death indicated (AESDTH), death date (AESDTHDTC)","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ae_death.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check for Grade 5 AE death variable consistency — check_ae_death","text":"","code":"check_ae_death(AE, preproc = identity, ...)"},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ae_death.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check for Grade 5 AE death variable consistency — check_ae_death","text":"AE Adverse Event dataframe variables USUBJID,AETOXGR,AEOUT,AEDTHDTC,AESDTH preproc optional company specific preprocessing script ... arguments passed methods","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ae_death.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Check for Grade 5 AE death variable consistency — check_ae_death","text":"Iris Zhao","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ae_death.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check for Grade 5 AE death variable consistency — check_ae_death","text":"","code":"AE <- data.frame(  USUBJID = 1:10,  AETOXGR = c(1:5,5,5,5,5,5),  AEDTHDTC = c(rep(NA,4),rep(\"2020-01-01\",6)),  AESDTH = c(rep(NA,4),rep(\"Y\",6)),  AEOUT = c(rep(NA,4),rep(\"FATAL\",6)),   AESPID = \"FORMNAME-R:13/L:13XXXX\" )  check_ae_death(AE) #> [1] TRUE check_ae_death(AE,preproc=roche_derive_rave_row) #> [1] TRUE  AE$AEDTHDTC[5]=\"NA\" AE$AEDTHDTC[6]=NA AE$AEDTHDTC[7]=\"\" AE$AESDTH[8]=NA AE$AEOUT[9]=NA  check_ae_death(AE) #> [1] FALSE #> attr(,\"msg\") #> [1] \"Total number of records with grade 5 AEs and inconsistencies among AE death variables is 5. \" #> attr(,\"data\") #>   USUBJID AETOXGR AEOUT   AEDTHDTC AESDTH #> 1       5       5 FATAL         NA      Y #> 2       6       5 FATAL       <NA>      Y #> 3       7       5 FATAL                 Y #> 4       8       5 FATAL 2020-01-01   <NA> #> 5       9       5  <NA> 2020-01-01      Y check_ae_death(AE,preproc=roche_derive_rave_row) #> [1] FALSE #> attr(,\"msg\") #> [1] \"Total number of records with grade 5 AEs and inconsistencies among AE death variables is 5. \" #> attr(,\"data\") #>   USUBJID AETOXGR AEOUT   AEDTHDTC AESDTH          RAVE #> 1       5       5 FATAL         NA      Y FORMNAME-R:13 #> 2       6       5 FATAL       <NA>      Y FORMNAME-R:13 #> 3       7       5 FATAL                 Y FORMNAME-R:13 #> 4       8       5 FATAL 2020-01-01   <NA> FORMNAME-R:13 #> 5       9       5  <NA> 2020-01-01      Y FORMNAME-R:13"},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ae_death_ds_discon.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if death in AE then there should be a study discon form — check_ae_death_ds_discon","title":"Check if death in AE then there should be a study discon form — check_ae_death_ds_discon","text":"checks death indicated AE via AEDTHDTC/AESDTH/AEOUT (well grade 5 AE AETOXGR exists) study discontinuation record indicated DS.DSSCAT","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ae_death_ds_discon.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if death in AE then there should be a study discon form — check_ae_death_ds_discon","text":"","code":"check_ae_death_ds_discon(AE, DS, preproc = identity, ...)"},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ae_death_ds_discon.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if death in AE then there should be a study discon form — check_ae_death_ds_discon","text":"AE Adverse Events SDTM dataset variables USUBJID, AEDTHDTC, AESDTH, AEOUT DS Disposition SDTM dataset variables USUBJID, DSCAT, DSSCAT preproc optional company specific preprocessing script ... arguments passed methods","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ae_death_ds_discon.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if death in AE then there should be a study discon form — check_ae_death_ds_discon","text":"boolean value check failed passed 'msg' attribute test failed","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ae_death_ds_discon.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Check if death in AE then there should be a study discon form — check_ae_death_ds_discon","text":"Sara Bodach","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ae_death_ds_discon.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if death in AE then there should be a study discon form — check_ae_death_ds_discon","text":"","code":"AE <- data.frame(  STUDYID = rep(1,6),  USUBJID = 1:6,  AEDTHDTC = c(NA,\"2020-01-01\",NA,NA,NA,NA),  AESDTH = c(NA,NA,\"Y\",NA,NA,NA),  AEOUT = c(NA,NA,NA,\"FATAL\",NA,NA),  AETOXGR = c(NA,NA,NA,NA,\"5\",NA),  AESPID=\"FORMNAME-R:2/L:2XXXX\" )  DS <- data.frame(  STUDYID = 1,  USUBJID = 1:3,  DSCAT=\"DISPOSITION EVENT\",  DSSCAT=c(\"STUDY DISCON\",  \"STUDY DISCON\",  \"STUDY COMPLETION/EARLY DISCONTINUATION\") )  check_ae_death_ds_discon(AE,DS) #> [1] FALSE #> attr(,\"msg\") #> [1] \"2 patient(s) where AE data indicates death but no study discontinuation record in DS. \" #> attr(,\"data\") #>   USUBJID DSSCAT DSCAT AEDTHDTC AETOXGR AESDTH AEOUT #> 1       4   <NA>  <NA>     <NA>    <NA>   <NA> FATAL #> 2       5   <NA>  <NA>     <NA>       5   <NA>  <NA> check_ae_death_ds_discon(AE,DS,preproc=roche_derive_rave_row) #> [1] FALSE #> attr(,\"msg\") #> [1] \"2 patient(s) where AE data indicates death but no study discontinuation record in DS. \" #> attr(,\"data\") #>   USUBJID DSSCAT DSCAT AEDTHDTC AETOXGR AESDTH AEOUT         RAVE #> 1       4   <NA>  <NA>     <NA>    <NA>   <NA> FATAL FORMNAME-R:2 #> 2       5   <NA>  <NA>     <NA>       5   <NA>  <NA> FORMNAME-R:2  DS$DSSCAT = NULL  check_ae_death_ds_discon(AE,DS) #> [1] FALSE #> attr(,\"msg\") #> [1] \"DS is missing the variable: DSSCAT\""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ae_ds_partial_death_dates.html","id":null,"dir":"Reference","previous_headings":"","what":"Check for partial death dates in AE and DS — check_ae_ds_partial_death_dates","title":"Check for partial death dates in AE and DS — check_ae_ds_partial_death_dates","text":"checks looks partial death dates AE DS","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ae_ds_partial_death_dates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check for partial death dates in AE and DS — check_ae_ds_partial_death_dates","text":"","code":"check_ae_ds_partial_death_dates(AE, DS, preproc = identity, ...)"},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ae_ds_partial_death_dates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check for partial death dates in AE and DS — check_ae_ds_partial_death_dates","text":"AE Adverse Events SDTM dataset variables USUBJID,AEDTHDTC,AEDECOD DS Dispostion SDTM dataset variables USUBJID,DSSCAT,DSSTDTC,DSDECOD preproc optional company specific preprocessing script ... arguments passed methods","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ae_ds_partial_death_dates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check for partial death dates in AE and DS — check_ae_ds_partial_death_dates","text":"boolean value check failed passed 'msg' attribute test failed","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ae_ds_partial_death_dates.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Check for partial death dates in AE and DS — check_ae_ds_partial_death_dates","text":"Harris","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ae_ds_partial_death_dates.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check for partial death dates in AE and DS — check_ae_ds_partial_death_dates","text":"","code":"# test with sample data  AE <- data.frame(  USUBJID = 1:3,  AEDECOD = c(\"AE1\",\"AE2\",\"AE3\"),  AEDTHDTC = c(\"2017-01-01\",\"2017\",NA),  AESPID = \"FORMNAME-R:2/L:2XXXX\",  stringsAsFactors=FALSE )  DS <- data.frame(  USUBJID = 1:4,  DSSCAT = \"STUDY DISCON\",  DSDECOD = \"DEATH\",  DSSTDTC = c(\"2017-01-01\",\"2017\",\"2017-01-02\",\"2016-10\"),  stringsAsFactors=FALSE )  check_ae_ds_partial_death_dates(AE,DS) #> [1] FALSE #> attr(,\"msg\") #> [1] \"There are 2 patients with partial death dates. \" #> attr(,\"data\") #>   USUBJID       DSSCAT DSDECOD DSSTDTC AEDECOD AEDTHDTC #> 1       2 STUDY DISCON   DEATH    2017     AE2     2017 #> 2       4 STUDY DISCON   DEATH 2016-10    <NA>     <NA> check_ae_ds_partial_death_dates(AE,DS,preproc=roche_derive_rave_row) #> [1] FALSE #> attr(,\"msg\") #> [1] \"There are 2 patients with partial death dates. \" #> attr(,\"data\") #>   USUBJID       DSSCAT DSDECOD DSSTDTC AEDECOD AEDTHDTC         RAVE #> 1       2 STUDY DISCON   DEATH    2017     AE2     2017 FORMNAME-R:2 #> 2       4 STUDY DISCON   DEATH 2016-10    <NA>     <NA>         <NA>  DS$DSSTDTC = NULL  check_ae_ds_partial_death_dates(AE,DS) #> [1] FALSE #> attr(,\"msg\") #> [1] \"DS is missing the variable: DSSTDTC\""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ae_dup.html","id":null,"dir":"Reference","previous_headings":"","what":"Check for duplicate AE entries — check_ae_dup","title":"Check for duplicate AE entries — check_ae_dup","text":"Identifies duplicated AE entries based USUBJID, AETERM, AEDECOD, AESTDTC, AEENDTC, AEMODIFY (present), AELAT (present) AETOXGR AESEV","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ae_dup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check for duplicate AE entries — check_ae_dup","text":"","code":"check_ae_dup(AE)"},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ae_dup.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check for duplicate AE entries — check_ae_dup","text":"AE AE SDTM dataset variables USUBJID, AETERM, AEDECOD, AESTDTC, AEENDTC, AETOXGR AESEV","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ae_dup.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check for duplicate AE entries — check_ae_dup","text":"boolean value check failed passed 'msg' attribute test failed","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ae_dup.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Check for duplicate AE entries — check_ae_dup","text":"Edgar Manukyan","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ae_dup.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check for duplicate AE entries — check_ae_dup","text":"","code":"AE <- data.frame(USUBJID = c(1), AESTDTC = c(\"2020-01-01\",\"2020-01-01\",\"2020-02-01\",\"2020-03-01\"),                  AEENDTC = rep(\"2020-02-01\",4), AEDECOD = letters[c(1,1:3)],                  AETERM = letters[c(1,1:3)], AETOXGR = c(1,1:3),                  AESPID=\"FORMNAME-R:5/L:5XXXX\",                  stringsAsFactors=FALSE)  check_ae_dup(AE) #> [1] FALSE #> attr(,\"msg\") #> [1] \"AE has duplicated entries. \" #> attr(,\"data\") #> # A tibble: 2 × 6 #> # Groups:   USUBJID, AETERM, AEDECOD, AESTDTC, AEENDTC, AETOXGR [1] #>   USUBJID AETERM AEDECOD AESTDTC    AEENDTC    AETOXGR #>     <dbl> <chr>  <chr>   <chr>      <chr>        <dbl> #> 1       1 a      a       2020-01-01 2020-02-01       1 #> 2       1 a      a       2020-01-01 2020-02-01       1"},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ae_fatal.html","id":null,"dir":"Reference","previous_headings":"","what":"Check for death variable consistency when AEOUT==","title":"Check for death variable consistency when AEOUT==","text":"check looks consistency AESDTH, AEDTHDTC, AETOXGR (applicable) AEOUT 'FATAL'","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ae_fatal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check for death variable consistency when AEOUT==","text":"","code":"check_ae_fatal(AE, preproc = identity, ...)"},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ae_fatal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check for death variable consistency when AEOUT==","text":"AE Adverse Events SDTM dataset variables USUBJID, AEDECOD, AESTDTC, AEDTHDTC, AEOUT, AESDTH preproc optional company specific preprocessing script ... arguments passed methods","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ae_fatal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check for death variable consistency when AEOUT==","text":"boolean value check failed passed 'msg' attribute test failed","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ae_fatal.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Check for death variable consistency when AEOUT==","text":"Aldrich Salva","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ae_fatal.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check for death variable consistency when AEOUT==","text":"","code":"# AETOXGR, no AESEV  AE <- data.frame(  USUBJID = 1:5,  AESTDTC = \"01JAN2017\",  AEDECOD = c(\"AE1\",\"AE2\",\"AE3\",\"AE4\",\"AE5\"),  AEOUT = \"FATAL\",  AEDTHDTC = c(\"01FEB2017\",NA,\"02FEB2017\",\"03FEB2017\",NA),  AESDTH = c(\"Y\",\"Y\",\"N\",\"Y\",NA),  AETOXGR = c(\"5\",\"5\",\"5\",NA,NA),  AESPID = \"FORMNAME-R:12/L:2XXXX\",  stringsAsFactors = FALSE )  check_ae_fatal(AE) #> [1] FALSE #> attr(,\"msg\") #> [1] \"AE has 4 patient(s) with AE death variable inconsistencies when outcome marked FATAL. \" #> attr(,\"data\") #>   USUBJID   AESTDTC AEDECOD AEOUT  AEDTHDTC AESDTH AETOXGR #> 1       2 01JAN2017     AE2 FATAL      <NA>      Y       5 #> 2       3 01JAN2017     AE3 FATAL 02FEB2017      N       5 #> 3       4 01JAN2017     AE4 FATAL 03FEB2017      Y    <NA> #> 4       5 01JAN2017     AE5 FATAL      <NA>   <NA>    <NA> check_ae_fatal(AE,preproc=roche_derive_rave_row) #> [1] FALSE #> attr(,\"msg\") #> [1] \"AE has 4 patient(s) with AE death variable inconsistencies when outcome marked FATAL. \" #> attr(,\"data\") #>   USUBJID   AESTDTC AEDECOD AEOUT  AEDTHDTC AESDTH AETOXGR          RAVE #> 1       2 01JAN2017     AE2 FATAL      <NA>      Y       5 FORMNAME-R:12 #> 2       3 01JAN2017     AE3 FATAL 02FEB2017      N       5 FORMNAME-R:12 #> 3       4 01JAN2017     AE4 FATAL 03FEB2017      Y    <NA> FORMNAME-R:12 #> 4       5 01JAN2017     AE5 FATAL      <NA>   <NA>    <NA> FORMNAME-R:12  AE$AETOXGR <- NULL check_ae_fatal(AE) #> [1] FALSE #> attr(,\"msg\") #> [1] \"AE has 3 patient(s) with AE death variable inconsistencies when outcome marked FATAL. \" #> attr(,\"data\") #>   USUBJID   AESTDTC AEDECOD AEOUT  AEDTHDTC AESDTH #> 1       2 01JAN2017     AE2 FATAL      <NA>      Y #> 2       3 01JAN2017     AE3 FATAL 02FEB2017      N #> 3       5 01JAN2017     AE5 FATAL      <NA>   <NA>  AE$AEDECOD <- NULL check_ae_fatal(AE) #> [1] FALSE #> attr(,\"msg\") #> [1] \"AE is missing the variable: AEDECOD\"   # AESEV, no AETOXGR   AE <- data.frame(  USUBJID = 1:5,  AESTDTC = \"01JAN2017\",  AEDECOD = c(\"AE1\",\"AE2\",\"AE3\",\"AE4\",\"AE5\"),  AEOUT = \"FATAL\",  AEDTHDTC = c(\"01FEB2017\",\"02FEB2017\",\"03FEB2017\",\"04FEB2017\",NA),  AESDTH = c(\"Y\",\"Y\",\"N\",\"Y\",NA),  AESEV = c(\"SEVERE\",\"MILD\",\"SEVERE\",NA,NA),  AESPID = \"FORMNAME-R:12/L:2XXXX\",  stringsAsFactors = FALSE )  check_ae_fatal(AE) #> [1] FALSE #> attr(,\"msg\") #> [1] \"AE has 3 patient(s) with AE death variable inconsistencies when outcome marked FATAL. \" #> attr(,\"data\") #>   USUBJID   AESTDTC AEDECOD AEOUT  AEDTHDTC AESDTH  AESEV #> 1       2 01JAN2017     AE2 FATAL 02FEB2017      Y   MILD #> 2       3 01JAN2017     AE3 FATAL 03FEB2017      N SEVERE #> 3       5 01JAN2017     AE5 FATAL      <NA>   <NA>   <NA> check_ae_fatal(AE,preproc=roche_derive_rave_row) #> [1] FALSE #> attr(,\"msg\") #> [1] \"AE has 3 patient(s) with AE death variable inconsistencies when outcome marked FATAL. \" #> attr(,\"data\") #>   USUBJID   AESTDTC AEDECOD AEOUT  AEDTHDTC AESDTH  AESEV          RAVE #> 1       2 01JAN2017     AE2 FATAL 02FEB2017      Y   MILD FORMNAME-R:12 #> 2       3 01JAN2017     AE3 FATAL 03FEB2017      N SEVERE FORMNAME-R:12 #> 3       5 01JAN2017     AE5 FATAL      <NA>   <NA>   <NA> FORMNAME-R:12  AE$AESEV <- NULL check_ae_fatal(AE) #> [1] FALSE #> attr(,\"msg\") #> [1] \"AE has 2 patient(s) with AE death variable inconsistencies when outcome marked FATAL. \" #> attr(,\"data\") #>   USUBJID   AESTDTC AEDECOD AEOUT  AEDTHDTC AESDTH #> 1       3 01JAN2017     AE3 FATAL 03FEB2017      N #> 2       5 01JAN2017     AE5 FATAL      <NA>   <NA>  # Both AESEV and AETOXGR have non-missing values  AE <- data.frame(  USUBJID = 1:7,  AESTDTC = \"01JAN2017\",  AEDECOD = c(\"AE1\",\"AE2\",\"AE3\",\"AE4\",\"AE5\",\"AE6\",\"AE7\"),  AEOUT = \"FATAL\",  AEDTHDTC = c(\"01FEB2017\",NA,\"02FEB2017\",\"03FEB2017\",NA,\"04FEB2017\",\"05FEB2017\"),  AESDTH = c(\"Y\",\"Y\",\"N\",\"Y\",NA,\"Y\",\"Y\"),  AESEV = c(\"SEVERE\",\"MILD\",\"SEVERE\",NA,NA,\"MILD\",\"SEVERE\"),  AETOXGR = c(\"5\",\"5\",\"5\",NA,NA,\"1\",\"5\"),  AESPID = \"FORMNAME-R:12/L:2XXXX\",  stringsAsFactors = FALSE )  check_ae_fatal(AE) #> [1] FALSE #> attr(,\"msg\") #> [1] \"AE has 5 patient(s) with AE death variable inconsistencies when outcome marked FATAL. \" #> attr(,\"data\") #>   USUBJID   AESTDTC AEDECOD AEOUT  AEDTHDTC AESDTH  AESEV AETOXGR #> 1       2 01JAN2017     AE2 FATAL      <NA>      Y   MILD       5 #> 2       3 01JAN2017     AE3 FATAL 02FEB2017      N SEVERE       5 #> 3       4 01JAN2017     AE4 FATAL 03FEB2017      Y   <NA>    <NA> #> 4       5 01JAN2017     AE5 FATAL      <NA>   <NA>   <NA>    <NA> #> 5       6 01JAN2017     AE6 FATAL 04FEB2017      Y   MILD       1 check_ae_fatal(AE,preproc=roche_derive_rave_row) #> [1] FALSE #> attr(,\"msg\") #> [1] \"AE has 5 patient(s) with AE death variable inconsistencies when outcome marked FATAL. \" #> attr(,\"data\") #>   USUBJID   AESTDTC AEDECOD AEOUT  AEDTHDTC AESDTH  AESEV AETOXGR          RAVE #> 1       2 01JAN2017     AE2 FATAL      <NA>      Y   MILD       5 FORMNAME-R:12 #> 2       3 01JAN2017     AE3 FATAL 02FEB2017      N SEVERE       5 FORMNAME-R:12 #> 3       4 01JAN2017     AE4 FATAL 03FEB2017      Y   <NA>    <NA> FORMNAME-R:12 #> 4       5 01JAN2017     AE5 FATAL      <NA>   <NA>   <NA>    <NA> FORMNAME-R:12 #> 5       6 01JAN2017     AE6 FATAL 04FEB2017      Y   MILD       1 FORMNAME-R:12   # Neither AESEV or AETOXGR  AE <- data.frame(  USUBJID = 1:5,  AESTDTC = \"01JAN2017\",  AEDECOD = c(\"AE1\",\"AE2\",\"AE3\",\"AE4\",\"AE5\"),  AEOUT = \"FATAL\",  AEDTHDTC = c(\"01FEB2017\",NA,\"02FEB2017\",\"03FEB2017\",NA),  AESDTH = c(\"Y\",\"Y\",\"N\",\"Y\",NA),  AESPID = \"FORMNAME-R:12/L:2XXXX\",  stringsAsFactors = FALSE )  check_ae_fatal(AE) #> [1] FALSE #> attr(,\"msg\") #> [1] \"AE has 3 patient(s) with AE death variable inconsistencies when outcome marked FATAL. \" #> attr(,\"data\") #>   USUBJID   AESTDTC AEDECOD AEOUT  AEDTHDTC AESDTH #> 1       2 01JAN2017     AE2 FATAL      <NA>      Y #> 2       3 01JAN2017     AE3 FATAL 02FEB2017      N #> 3       5 01JAN2017     AE5 FATAL      <NA>   <NA>  # AETOXGR, existing but unmapped AESEV   AE <- data.frame(  USUBJID = 1:5,  AESTDTC = \"01JAN2017\",  AEDECOD = c(\"AE1\",\"AE2\",\"AE3\",\"AE4\",\"AE5\"),  AEOUT = \"FATAL\",  AEDTHDTC = c(\"01FEB2017\",NA,\"02FEB2017\",\"03FEB2017\",NA),  AESDTH = c(\"Y\",\"Y\",\"N\",\"Y\",NA),  AESEV = rep(NA,5),  AETOXGR = c(\"5\",\"5\",\"5\",NA,NA),  AESPID = \"FORMNAME-R:12/L:2XXXX\",  stringsAsFactors = FALSE )  check_ae_fatal(AE) #> [1] FALSE #> attr(,\"msg\") #> [1] \"AE has 4 patient(s) with AE death variable inconsistencies when outcome marked FATAL. \" #> attr(,\"data\") #>   USUBJID   AESTDTC AEDECOD AEOUT  AEDTHDTC AESDTH AESEV AETOXGR #> 1       2 01JAN2017     AE2 FATAL      <NA>      Y    NA       5 #> 2       3 01JAN2017     AE3 FATAL 02FEB2017      N    NA       5 #> 3       4 01JAN2017     AE4 FATAL 03FEB2017      Y    NA    <NA> #> 4       5 01JAN2017     AE5 FATAL      <NA>   <NA>    NA    <NA> check_ae_fatal(AE,preproc=roche_derive_rave_row) #> [1] FALSE #> attr(,\"msg\") #> [1] \"AE has 4 patient(s) with AE death variable inconsistencies when outcome marked FATAL. \" #> attr(,\"data\") #>   USUBJID   AESTDTC AEDECOD AEOUT  AEDTHDTC AESDTH AESEV AETOXGR          RAVE #> 1       2 01JAN2017     AE2 FATAL      <NA>      Y    NA       5 FORMNAME-R:12 #> 2       3 01JAN2017     AE3 FATAL 02FEB2017      N    NA       5 FORMNAME-R:12 #> 3       4 01JAN2017     AE4 FATAL 03FEB2017      Y    NA    <NA> FORMNAME-R:12 #> 4       5 01JAN2017     AE5 FATAL      <NA>   <NA>    NA    <NA> FORMNAME-R:12"},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ae_withdr_ds_discon.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if an AE leading to drug being withdrawn is reflected in DS — check_ae_withdr_ds_discon","title":"Check if an AE leading to drug being withdrawn is reflected in DS — check_ae_withdr_ds_discon","text":"checks AE AEACN=\"DRUG WITHDRAWN\" treatment discontinuation record indicated DS.DSSCAT","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ae_withdr_ds_discon.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if an AE leading to drug being withdrawn is reflected in DS — check_ae_withdr_ds_discon","text":"","code":"check_ae_withdr_ds_discon(AE, DS, TS, preproc = identity, ...)"},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ae_withdr_ds_discon.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if an AE leading to drug being withdrawn is reflected in DS — check_ae_withdr_ds_discon","text":"AE Adverse Events SDTM dataset variables USUBJID, AEACN DS Disposition SDTM dataset variables USUBJID, DSCAT, DSSCAT TS Trial Summary SDTM dataset variables TSPARMCD, TSVAL preproc optional company specific preprocessing script ... arguments passed methods","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ae_withdr_ds_discon.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if an AE leading to drug being withdrawn is reflected in DS — check_ae_withdr_ds_discon","text":"boolean value check failed passed 'msg' attribute test failed","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ae_withdr_ds_discon.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Check if an AE leading to drug being withdrawn is reflected in DS — check_ae_withdr_ds_discon","text":"Yuliia Bahatska","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ae_withdr_ds_discon.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if an AE leading to drug being withdrawn is reflected in DS — check_ae_withdr_ds_discon","text":"","code":"AE <- data.frame(  USUBJID = 1:6,  AEACN = c(\"DRUG WITHDRAWN\",NA,NA,NA,NA,NA),  AETOXGR = c(NA,NA,NA,NA,\"5\",NA),  AEDECOD=c(\"NAUSEA\",\"HEADACHE\"),  AESPID = \"FORMNAME-R:5/L:5XXXX\" ) DS <- data.frame(  USUBJID = 1:3,  DSCAT=\"DISPOSITION EVENT\",  DSSCAT=\"STUDY TREATMENT\",  DSDECOD=c(\"COMPLETED\",\"ADVERSE EVENT\",\"DEATH\") )   TS <- data.frame(  TSPARMCD=\"TRT\",  TSVAL=\"CHECK\" )  check_ae_withdr_ds_discon(AE,DS,TS) #> [1] FALSE #> attr(,\"msg\") #> [1] \"There are 1 patient(s) where AE data treatment discontinuation but no treatment discontinuation record in DS. \" #> attr(,\"data\") #>   USUBJID DSSCAT DSCAT          AEACN AEDECOD #> 1       1   <NA>  <NA> DRUG WITHDRAWN  NAUSEA check_ae_withdr_ds_discon(AE,DS,TS,preproc=roche_derive_rave_row) #> [1] FALSE #> attr(,\"msg\") #> [1] \"There are 1 patient(s) where AE data treatment discontinuation but no treatment discontinuation record in DS. \" #> attr(,\"data\") #>   USUBJID DSSCAT DSCAT          AEACN AEDECOD         RAVE #> 1       1   <NA>  <NA> DRUG WITHDRAWN  NAUSEA FORMNAME-R:5  DS$DSSCAT = NULL  check_ae_withdr_ds_discon(AE,DS,TS) #> [1] FALSE #> attr(,\"msg\") #> [1] \"DS is missing the variable: DSSCAT\""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_cm_cmdecod.html","id":null,"dir":"Reference","previous_headings":"","what":"Check for missing CMDECOD values — check_cm_cmdecod","title":"Check for missing CMDECOD values — check_cm_cmdecod","text":"check looks missing CMDECOD values","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_cm_cmdecod.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check for missing CMDECOD values — check_cm_cmdecod","text":"","code":"check_cm_cmdecod(CM, preproc = identity, ...)"},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_cm_cmdecod.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check for missing CMDECOD values — check_cm_cmdecod","text":"CM Concomitant Medications SDTM dataset variables USUBJID, CMTRT, CMDECOD preproc optional company specific preprocessing script ... arguments passed methods","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_cm_cmdecod.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check for missing CMDECOD values — check_cm_cmdecod","text":"boolean value check failed passed 'msg' attribute test failed","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_cm_cmdecod.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Check for missing CMDECOD values — check_cm_cmdecod","text":"Lei Zhao, Stella Banjo (HackR 2021)","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_cm_cmdecod.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check for missing CMDECOD values — check_cm_cmdecod","text":"","code":"CM <- data.frame(  USUBJID = 1:5,  DOMAIN = rep(\"CM\", 5),  CMTRT = rep(\"DRUG TERM\", 5),  CMDECOD = rep(\"CODED DRUG TERM\", 5),  CMSTDTC = 1:5,  CMENDTC = 1:5,  CMCAT = \"CONCOMITANT MEDICATIONS\",  CMSPID = c(\"FORMNAME-R:13/L:13XXXX\",              \"FORMNAME-R:16/L:16XXXX\",              \"FORMNAME-R:2/L:2XXXX\",              \"FORMNAME-R:19/L:19XXXX\",              \"FORMNAME-R:5/L:5XXXX\"),  stringsAsFactors=FALSE )  check_cm_cmdecod(CM) #> [1] TRUE  CM$CMDECOD[1] = NA CM$CMDECOD[2] = \"NA\" CM$CMDECOD[3:5] = \"\" check_cm_cmdecod(CM) #> [1] FALSE #> attr(,\"msg\") #> [1] \"CM has 5 record(s) with missing CMDECOD. \" #> attr(,\"data\") #>   USUBJID CMSTDTC     CMTRT CMDECOD #> 1       1       1 DRUG TERM    <NA> #> 2       2       2 DRUG TERM      NA #> 3       3       3 DRUG TERM         #> 4       4       4 DRUG TERM         #> 5       5       5 DRUG TERM         check_cm_cmdecod(CM,preproc=roche_derive_rave_row) #> [1] FALSE #> attr(,\"msg\") #> [1] \"CM has 5 record(s) with missing CMDECOD. \" #> attr(,\"data\") #>   USUBJID CMSTDTC     CMTRT CMDECOD          RAVE #> 1       1       1 DRUG TERM    <NA> FORMNAME-R:13 #> 2       2       2 DRUG TERM      NA FORMNAME-R:16 #> 3       3       3 DRUG TERM          FORMNAME-R:2 #> 4       4       4 DRUG TERM         FORMNAME-R:19 #> 5       5       5 DRUG TERM          FORMNAME-R:5  CM$CMDECOD <- NULL check_cm_cmdecod(CM) #> [1] FALSE #> attr(,\"msg\") #> [1] \"CM is missing the variable: CMDECOD\""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_cm_cmindc.html","id":null,"dir":"Reference","previous_headings":"","what":"Check for concomitant medication indication with text string ","title":"Check for concomitant medication indication with text string ","text":"check looks patients text string \"PROPHYL\" CMINDC CMPROPH checked \"Y\" studies given prophylaxis variable (CMPROPH)","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_cm_cmindc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check for concomitant medication indication with text string ","text":"","code":"check_cm_cmindc(CM, preproc = identity, ...)"},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_cm_cmindc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check for concomitant medication indication with text string ","text":"CM Concomitant Medication SDTM dataset variables USUBJID, CMTRT, CMSTDTC, CMINDC, CMPROPH, CMSPID (optional) preproc optional company specific preprocessing script ... arguments passed methods","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_cm_cmindc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check for concomitant medication indication with text string ","text":"boolean value check failed passed 'msg' attribute test failed","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_cm_cmindc.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Check for concomitant medication indication with text string ","text":"Sara Bodach, Stella Banjo (HackR 2021)","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_cm_cmindc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check for concomitant medication indication with text string ","text":"","code":"CM <- data.frame(  USUBJID = c(rep(1,3),rep(2,3),rep(3,3)),  CMTRT = letters[1:9],  CMSTDTC = rep(\"2017-01-01\",9),  CMINDC = c(rep(\"INDICATION 1\",2), rep(\"indication 2\",2),             rep(\"Prophylaxis\",2),rep(\"PROPHYLACTIC\",2),\"PROPHYLAXIS FOR XYZ\"),  CMPROPH = c(rep(\"Y\",3),rep(NA,2),rep(\"\",2),\"NA\",\".\"),  CMSPID = \"/F:XXX-D:12345-R:123\",  stringsAsFactors=FALSE )  check_cm_cmindc(CM) #> [1] FALSE #> attr(,\"msg\") #> [1] \"There are 2 patients with CM indication containing 'PROPHYL' when given for prophylaxis variable is not checked as 'Y'. \" #> attr(,\"data\") #>   USUBJID CMTRT    CMSTDTC              CMINDC CMPROPH #> 1       2     e 2017-01-01         Prophylaxis    <NA> #> 2       2     f 2017-01-01         Prophylaxis         #> 3       3     g 2017-01-01        PROPHYLACTIC         #> 4       3     h 2017-01-01        PROPHYLACTIC      NA #> 5       3     i 2017-01-01 PROPHYLAXIS FOR XYZ       . check_cm_cmindc(CM,preproc=roche_derive_rave_row) #> [1] FALSE #> attr(,\"msg\") #> [1] \"There are 2 patients with CM indication containing 'PROPHYL' when given for prophylaxis variable is not checked as 'Y'. \" #> attr(,\"data\") #>   USUBJID    RAVE CMTRT    CMSTDTC              CMINDC CMPROPH #> 1       2 XXX#123     e 2017-01-01         Prophylaxis    <NA> #> 2       2 XXX#123     f 2017-01-01         Prophylaxis         #> 3       3 XXX#123     g 2017-01-01        PROPHYLACTIC         #> 4       3 XXX#123     h 2017-01-01        PROPHYLACTIC      NA #> 5       3 XXX#123     i 2017-01-01 PROPHYLAXIS FOR XYZ       .  CM$CMPROPH[7] = \"Y\" check_cm_cmindc(CM) #> [1] FALSE #> attr(,\"msg\") #> [1] \"There are 2 patients with CM indication containing 'PROPHYL' when given for prophylaxis variable is not checked as 'Y'. \" #> attr(,\"data\") #>   USUBJID CMTRT    CMSTDTC              CMINDC CMPROPH #> 1       2     e 2017-01-01         Prophylaxis    <NA> #> 2       2     f 2017-01-01         Prophylaxis         #> 3       3     h 2017-01-01        PROPHYLACTIC      NA #> 4       3     i 2017-01-01 PROPHYLAXIS FOR XYZ       .  CM$CMSPID = NULL check_cm_cmindc(CM,preproc=roche_derive_rave_row) #> [1] FALSE #> attr(,\"msg\") #> [1] \"There are 2 patients with CM indication containing 'PROPHYL' when given for prophylaxis variable is not checked as 'Y'. \" #> attr(,\"data\") #>   USUBJID CMTRT    CMSTDTC              CMINDC CMPROPH #> 1       2     e 2017-01-01         Prophylaxis    <NA> #> 2       2     f 2017-01-01         Prophylaxis         #> 3       3     h 2017-01-01        PROPHYLACTIC      NA #> 4       3     i 2017-01-01 PROPHYLAXIS FOR XYZ       .  CM$CMPROPH = NULL check_cm_cmindc(CM) #> [1] FALSE #> attr(,\"msg\") #> [1] \"CM is missing the variable: CMPROPH\""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_cm_cmlat.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if ocular concomitant medication has laterality missing or laterality field is\npopulated but route is not eye-related. — check_cm_cmlat","title":"Check if ocular concomitant medication has laterality missing or laterality field is\npopulated but route is not eye-related. — check_cm_cmlat","text":"check assesses CMCAT = \"CONCOMITANT MEDICATIONS\" flags potential ocular records missing/inconsistent route laterality: eye-related CMROUTE ('INTRAVITREAL', 'OPHTHALMIC', etc.), CMLAT populated -- CMROUTE eye-related (.e., INTRAVITREAL, OPHTHALMIC, TOPICAL, etc.) CMLAT LEFT/RIGHT/BILATERAL.","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_cm_cmlat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if ocular concomitant medication has laterality missing or laterality field is\npopulated but route is not eye-related. — check_cm_cmlat","text":"","code":"check_cm_cmlat(CM, preproc = identity, ...)"},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_cm_cmlat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if ocular concomitant medication has laterality missing or laterality field is\npopulated but route is not eye-related. — check_cm_cmlat","text":"CM Concomitant Medications Dataset Ophtho Study variables USUBJID, CMCAT, CMLAT, CMDECOD, CMTRT, CMROUTE, CMSPID (Present), CMSTDTC (Present) preproc optional company specific preprocessing script ... arguments passed methods","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_cm_cmlat.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Check if ocular concomitant medication has laterality missing or laterality field is\npopulated but route is not eye-related. — check_cm_cmlat","text":"Monarch Shah (HackR 2021 Team Eye)","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_cm_cmlat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if ocular concomitant medication has laterality missing or laterality field is\npopulated but route is not eye-related. — check_cm_cmlat","text":"","code":"CM <- data.frame(    USUBJID = 1:7,    CMCAT = \"CONCOMITANT MEDICATIONS\",    CMSTDTC = 1:7,    CMLAT   = c(\"Left\", \"\",\"Bilateral\", \"\", \"\", \"LEFT\", \"\"),    CMTRT  = c(\"A\", \"B\", \"A\", \"B\", \"A\", \"A\", \"B\"),    CMDECOD = c(\"A\", \"B\", \"A\", \"B\", \"A\", \"A\", \"B\"),    CMROUTE = c(\"\",\"OPHTHALMIC\",\"INTRAVITREAL\",\"INTRAVITREAL\",                 \"opHTHALMIC\", \"INTRaOCULAr\", \"INTRaOCULAr\"),    CMSPID  = \"FORMNAME-R:13/L:13XXXX\",    stringsAsFactors = FALSE) check_cm_cmlat(CM,preproc=roche_derive_rave_row) #> [1] FALSE #> attr(,\"msg\") #> [1] \"5 record(s) with CMLAT Missing when CM is Eye related, or CMLAT is LEFT/RIGHT/BILATERAL and CMROUTE is not Eye related.\" #> attr(,\"data\") #>   USUBJID CMSTDTC          RAVE CMLAT CMTRT CMDECOD      CMROUTE #> 1       1       1 FORMNAME-R:13  Left     A       A              #> 2       2       2 FORMNAME-R:13           B       B   OPHTHALMIC #> 3       4       4 FORMNAME-R:13           B       B INTRAVITREAL #> 4       5       5 FORMNAME-R:13           A       A   opHTHALMIC #> 5       7       7 FORMNAME-R:13           B       B  INTRaOCULAr  CM <- data.frame(    USUBJID = 1:5,    CMCAT = rep(\"CONCOMITANT MEDICATIONS\",5),    CMSTDTC = 1:5,    CMLAT   = c(\"Left\", \"LEFT\",\"Bilateral\",                 \"RIGHT\", \"RIgHT\"),    CMTRT  = c(\"A\", \"B\", \"A\", \"B\", \"A\"),    CMDECOD = c(\"A\", \"B\", \"A\", \"B\", \"A\"),    CMROUTE = c(\"\",\"OPHTHALMIC\",\"INTRAVITREAL\",                \"INTRaOCULAr\", \"opHTHALMIC\"),    stringsAsFactors = FALSE) check_cm_cmlat(CM) #> [1] FALSE #> attr(,\"msg\") #> [1] \"1 record(s) with CMLAT Missing when CM is Eye related, or CMLAT is LEFT/RIGHT/BILATERAL and CMROUTE is not Eye related.\" #> attr(,\"data\") #>   USUBJID CMSTDTC CMLAT CMTRT CMDECOD CMROUTE #> 1       1       1  Left     A       A          CM <- data.frame(    USUBJID = 1:5,    CMCAT = \"CONCOMITANT MEDICATIONS\",    CMSTDTC = 1:5,    CMLAT   = c(\"Left\", \"LEFT\",\"Bilateral\", \"RIGHT\", \"RIgHT\"),    CMTRT  = c(\"A\", \"B\", \"A\", \"B\", \"A\"),    CMDECOD = c(\"A\", \"B\", \"A\", \"B\", \"A\"),    #CMROUTE = c(\"\",\"OPHTHALMIC\",\"INTRAVITREAL\",\"INTRaOCULAr\", \"opHTHALMIC\"),    stringsAsFactors = FALSE) check_cm_cmlat(CM) #> [1] FALSE #> attr(,\"msg\") #> [1] \"CM is missing the variable: CMROUTE\""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_cm_cmlat_prior_ocular.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if ocular concomitant medication has laterality missing for specific\n","title":"Check if ocular concomitant medication has laterality missing for specific\n","text":"check assesses ocular CMCAT records flags records missing/inconsistent laterality","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_cm_cmlat_prior_ocular.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if ocular concomitant medication has laterality missing for specific\n","text":"","code":"check_cm_cmlat_prior_ocular(CM, preproc = identity, ...)"},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_cm_cmlat_prior_ocular.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if ocular concomitant medication has laterality missing for specific\n","text":"CM Concomitant Medications Dataset Ophtha Study variables USUBJID, CMCAT, CMLAT, CMTRT, CMSPID (Present), CMSTDTC (Present), CMLOC (Present), CMINDC (Present), CMDOSFRM (Present) preproc optional company specific preprocessing script ... arguments passed methods","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_cm_cmlat_prior_ocular.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Check if ocular concomitant medication has laterality missing for specific\n","text":"Tim Barnett (HackR 2021 Team Eye) (copied check_cm_cmlat)","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_cm_cmlat_prior_ocular.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if ocular concomitant medication has laterality missing for specific\n","text":"","code":"CM <- data.frame(    USUBJID = 1:5,    CMCAT = \"PRIOR OCULAR THERAPIES AND TREATMENTS\",    CMSTDTC = 1:5,    CMLAT   = c(\"Left\", \"\",\"Bilateral\", \"\", \"\"),    CMTRT   = c(\"A\", \"B\", \"A\", \"B\", \"A\"),    CMDECOD = c(\"A\", \"B\", \"A\", \"B\", \"A\"),    CMROUTE = c(\"\",\"OPHTHALMIC\",\"INTRAVITREAL\",\"INTRAVITREAL\", \"opHTHALMIC\"),    CMSPID  = \"FORMNAME-R:13/L:13XXXX\",    stringsAsFactors = FALSE) check_cm_cmlat_prior_ocular(CM,preproc=roche_derive_rave_row) #> [1] FALSE #> attr(,\"msg\") #> [1] \"3 record(s) with CMLAT missing when expected to be populated. \" #> attr(,\"data\") #>   CMSTDTC          RAVE CMLAT CMTRT #> 1       2 FORMNAME-R:13           B #> 2       4 FORMNAME-R:13           B #> 3       5 FORMNAME-R:13           A  CM <- data.frame(    USUBJID = 1:5,    CMCAT = \"Prior Ocular Therapies/Treatments\",    CMSTDTC = 1:5,    CMLAT   = c(\"\", \"LEFT\",\"Bilateral\", \"\", \"RIgHT\"),    CMTRT  = c(\"A\", \"B\", \"A\", \"B\", \"A\"),    CMDECOD = c(\"A\", \"B\", \"A\", \"B\", \"A\"),    #CMROUTE = c(\"\",\"OPHTHALMIC\",\"INTRAVITREAL\",\"INTRAVITREAL\", \"opHTHALMIC\"),    stringsAsFactors = FALSE) check_cm_cmlat_prior_ocular(CM) #> [1] FALSE #> attr(,\"msg\") #> [1] \"2 record(s) with CMLAT missing when expected to be populated. \" #> attr(,\"data\") #>   CMSTDTC CMLAT CMTRT #> 1       1           A #> 2       4           B  CM <- data.frame(    USUBJID = 1:5,    CMCAT = \"CONCOMITANT MEDICATIONS\",    CMSTDTC = 1:5,    CMLAT   = c(\"Left\", \"LEFT\",\"Bilateral\", \"RIGHT\", \"RIgHT\"),    CMTRT  = c(\"A\", \"B\", \"A\", \"B\", \"A\"),    CMDECOD = c(\"A\", \"B\", \"A\", \"B\", \"A\"),    CMROUTE = c(\"\",\"OPHTHALMIC\",\"INTRAVITREAL\",\"INTRAVITREAL\", \"opHTHALMIC\"),    stringsAsFactors = FALSE) check_cm_cmlat_prior_ocular(CM) #> [1] TRUE  CM <- data.frame(    USUBJID = 1:5,    CMCAT = \"CONCOMITANT MEDICATIONS\",    CMSTDTC = 1:5,    CMLAT   = c(\"Left\", \"LEFT\",\"Bilateral\", \"RIGHT\", \"RIgHT\"),    CMTRT  = c(\"A\", \"B\", \"A\", \"B\", \"A\"),    CMDECOD = c(\"A\", \"B\", \"A\", \"B\", \"A\"),    #CMROUTE = c(\"\",\"OPHTHALMIC\",\"INTRAVITREAL\",\"INTRAVITREAL\", \"opHTHALMIC\"),    stringsAsFactors = FALSE) check_cm_cmlat_prior_ocular(CM) #> [1] TRUE  CM <- data.frame(    USUBJID = 1:5,    CMCAT = c(rep(\"Prior Ocular Therapies/Treatments\",3), rep(\"Non-Ocular Therapies/Treatments\",2)),    CMSTDTC = 1:5,    CMLAT   = c(\"\", \"LEFT\",\"Bilateral\", \"\", \"\"),    CMTRT  = c(\"A\", \"B\", \"A\", \"B\", \"A\"),    CMDECOD = c(\"A\", \"B\", \"A\", \"B\", \"A\"),    #CMROUTE = c(\"\",\"OPHTHALMIC\",\"INTRAVITREAL\",\"ORAL\", \"ORAL\"),    stringsAsFactors = FALSE) check_cm_cmlat_prior_ocular(CM) #> [1] FALSE #> attr(,\"msg\") #> [1] \"1 record(s) with CMLAT missing when expected to be populated. \" #> attr(,\"data\") #>   CMSTDTC CMLAT CMTRT #> 1       1           A"},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_cm_missing_month.html","id":null,"dir":"Reference","previous_headings":"","what":"Check for conmed dates with year and day known but month unknown — check_cm_missing_month","title":"Check for conmed dates with year and day known but month unknown — check_cm_missing_month","text":"Check missing month conmed start (CMSTDTC) end dates (CMENDTC) known year day","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_cm_missing_month.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check for conmed dates with year and day known but month unknown — check_cm_missing_month","text":"","code":"check_cm_missing_month(CM, preproc = identity, ...)"},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_cm_missing_month.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check for conmed dates with year and day known but month unknown — check_cm_missing_month","text":"CM Concomitant Medications SDTM dataset variables USUBJID, CMTRT, CMSTDTC, CMENDTC preproc optional company specific preprocessing script ... arguments passed methods","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_cm_missing_month.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check for conmed dates with year and day known but month unknown — check_cm_missing_month","text":"boolean value check failed passed 'msg' attribute test failed","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_cm_missing_month.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Check for conmed dates with year and day known but month unknown — check_cm_missing_month","text":"Chandra Mannem","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_cm_missing_month.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check for conmed dates with year and day known but month unknown — check_cm_missing_month","text":"","code":"CM <- data.frame(  USUBJID = 1:3,  CMTRT = c(\"CM1\",\"CM2\",\"CM3\"),  CMSTDTC = c(\"2017-01-01\",\"2017---01\",\"2017-01-02\"),  CMENDTC = c(\"2017-02-01\",\"2017-03-01\",\"2017---01\"),  CMSPID = \"/F:XXX-D:12345-R:123\",  stringsAsFactors=FALSE )  check_cm_missing_month(CM) #> [1] FALSE #> attr(,\"msg\") #> [1] \"There are 2 patients with a conmed date that has year and day present but missing month. \" #> attr(,\"data\") #>   USUBJID CMTRT    CMSTDTC    CMENDTC #> 1       2   CM2  2017---01 2017-03-01 #> 2       3   CM3 2017-01-02  2017---01 check_cm_missing_month(CM,preproc=roche_derive_rave_row) #> [1] FALSE #> attr(,\"msg\") #> [1] \"There are 2 patients with a conmed date that has year and day present but missing month. \" #> attr(,\"data\") #>   USUBJID CMTRT    CMSTDTC    CMENDTC    RAVE #> 1       2   CM2  2017---01 2017-03-01 XXX#123 #> 2       3   CM3 2017-01-02  2017---01 XXX#123  CM$CMSTDTC = NULL  check_cm_missing_month(CM) #> [1] FALSE #> attr(,\"msg\") #> [1] \"CM is missing the variable: CMSTDTC\""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_dd_ae_aedthdtc_ds_dsstdtc.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if death date is the same in AE and DS domains — check_dd_ae_aedthdtc_ds_dsstdtc","title":"Check if death date is the same in AE and DS domains — check_dd_ae_aedthdtc_ds_dsstdtc","text":"check compares death date AE AEDTHDT death date DS DSSTDTC. expected .","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_dd_ae_aedthdtc_ds_dsstdtc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if death date is the same in AE and DS domains — check_dd_ae_aedthdtc_ds_dsstdtc","text":"","code":"check_dd_ae_aedthdtc_ds_dsstdtc(AE, DS, preproc = identity, ...)"},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_dd_ae_aedthdtc_ds_dsstdtc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if death date is the same in AE and DS domains — check_dd_ae_aedthdtc_ds_dsstdtc","text":"AE Adverse Events SDTM dataset variables USUBJID AEDTHDTC DS Disposition SDTM dataset variables USUBJID, DSDECOD, DSSTDTC preproc optional company specific preprocessing script ... arguments passed methods","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_dd_ae_aedthdtc_ds_dsstdtc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if death date is the same in AE and DS domains — check_dd_ae_aedthdtc_ds_dsstdtc","text":"boolean value check failed passed 'msg' attribute test failed","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_dd_ae_aedthdtc_ds_dsstdtc.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Check if death date is the same in AE and DS domains — check_dd_ae_aedthdtc_ds_dsstdtc","text":"Hiral Raval","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_dd_ae_aedthdtc_ds_dsstdtc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if death date is the same in AE and DS domains — check_dd_ae_aedthdtc_ds_dsstdtc","text":"","code":"AE <- data.frame(  STUDYID = rep(1, 3),  USUBJID = 1:3,  AEDTHDTC = c(\"2020-01-01\",\"2020-01-02\",\"2020-01-03\"),  AESPID = \"FORMNAME-R:19/L:19XXXX\" )  DS <- data.frame(  STUDYID = rep(1, 3),  USUBJID = 1:3,  DSDECOD = rep(\"DEATH\", 3),  DSSTDTC = c(\"2020-01-01\",\"2020-01-02\",\"2020-01-03\"),  DSSPID = \"XXX-R:0\",  stringsAsFactors = FALSE )  # no case check_dd_ae_aedthdtc_ds_dsstdtc(AE, DS) #> [1] TRUE  # 1 case DS[3, \"DSSTDTC\"] <- \"2000-01-01\" check_dd_ae_aedthdtc_ds_dsstdtc(AE, DS, preproc=roche_derive_rave_row) #> [1] FALSE #> attr(,\"msg\") #> [1] \"There are 1 patients with a death date different in DS and AE. \" #> attr(,\"data\") #>   USUBJID    DSSTDTC   AEDTHDTC RAVE.DS       RAVE.AE #> 3       3 2000-01-01 2020-01-03 XXX-R:0 FORMNAME-R:19  # check for non existence of vars DS$DSDECOD <- NULL DS$DSSTDTC <- NULL check_dd_ae_aedthdtc_ds_dsstdtc(AE, DS) #> [1] FALSE #> attr(,\"msg\") #> [1] \"DS is missing the variables: DSDECOD, DSSTDTC\""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_dd_ae_aeout_aedthdtc.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if there is a death date and AEOUT='FATAL' agreement — check_dd_ae_aeout_aedthdtc","title":"Check if there is a death date and AEOUT='FATAL' agreement — check_dd_ae_aeout_aedthdtc","text":"check looks death dates AEOUT='FATAL' reverse, .e death date, AEOUT value \"FATAL\".","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_dd_ae_aeout_aedthdtc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if there is a death date and AEOUT='FATAL' agreement — check_dd_ae_aeout_aedthdtc","text":"","code":"check_dd_ae_aeout_aedthdtc(AE, preproc = identity, ...)"},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_dd_ae_aeout_aedthdtc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if there is a death date and AEOUT='FATAL' agreement — check_dd_ae_aeout_aedthdtc","text":"AE Adverse Events SDTM dataset variables USUBJID, AEDTHDTC, AEDECOD, AESTDTC AEOUT preproc optional company specific preprocessing script ... arguments passed methods","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_dd_ae_aeout_aedthdtc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if there is a death date and AEOUT='FATAL' agreement — check_dd_ae_aeout_aedthdtc","text":"boolean value check failed passed 'msg' attribute test failed","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_dd_ae_aeout_aedthdtc.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Check if there is a death date and AEOUT='FATAL' agreement — check_dd_ae_aeout_aedthdtc","text":"Joel Laxamana","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_dd_ae_aeout_aedthdtc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if there is a death date and AEOUT='FATAL' agreement — check_dd_ae_aeout_aedthdtc","text":"","code":"AE <- data.frame(  USUBJID = 1:3,  AEDTHDTC = c(\"2020-01-01\",\"2020-01-02\",\"2020-01-03\"),  AEDECOD = 1:3,  AESTDTC = 1:3,  AEOUT = rep(\"FATAL\", 3),  AESPID = \"FORMNAME-R:19/L:19XXXX\",  stringsAsFactors = FALSE )  # no case check_dd_ae_aeout_aedthdtc(AE) #> [1] TRUE  # 2 cases AE[3, \"AEDTHDTC\"] <- NA AE[1, \"AEOUT\"] <- NA check_dd_ae_aeout_aedthdtc(AE) #> [1] FALSE #> attr(,\"msg\") #> [1] \"There are 1 patients with a discrepant AE outcome and death date. \" #> attr(,\"data\") #>   USUBJID AEDECOD AESTDTC AEDTHDTC AEOUT #> 3       3       3       3     <NA> FATAL check_dd_ae_aeout_aedthdtc(AE,preproc=roche_derive_rave_row) #> [1] FALSE #> attr(,\"msg\") #> [1] \"There are 1 patients with a discrepant AE outcome and death date. \" #> attr(,\"data\") #>   USUBJID AEDECOD AESTDTC AEDTHDTC AEOUT          RAVE #> 3       3       3       3     <NA> FATAL FORMNAME-R:19  # check for non existence of vars AE$AEDTHDTC <- NULL AE$USUBJID <- NULL check_dd_ae_aeout_aedthdtc(AE) #> [1] FALSE #> attr(,\"msg\") #> [1] \"AE is missing the variables: USUBJID, AEDTHDTC\""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_dd_death_date.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if patient with Death due to AE also has Death record in DS — check_dd_death_date","title":"Check if patient with Death due to AE also has Death record in DS — check_dd_death_date","text":"Flag patient Death AE (.e. AE record non-missing AE.AEDTHDTC) Death DS (.e. record DS.DSDECOD=DEATH DS.DSTERM contains 'DEATH' contain 'PROGRESSIVE DISEASE' 'DISEASE RELAPSE' (can pick records DSTERM 'DEATH','DEATH DUE ...' exclude 'DEATH DUE PROGRESSIVE DISEASE', 'DEATH DUE DISEASE RELAPSE')","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_dd_death_date.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if patient with Death due to AE also has Death record in DS — check_dd_death_date","text":"","code":"check_dd_death_date(AE, DS, preproc = identity, ...)"},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_dd_death_date.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if patient with Death due to AE also has Death record in DS — check_dd_death_date","text":"AE Adverse Events SDTM dataset USUBJID, AEDTHDTC, AESPID (optional) DS Disposition SDTM dataset USUBJID, DSDECOD, DSTERM preproc optional company specific preprocessing script ... arguments passed methods","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_dd_death_date.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Check if patient with Death due to AE also has Death record in DS — check_dd_death_date","text":"Edgar Manukyan, N Springfield updated 14SEP2020","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_dd_death_date.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if patient with Death due to AE also has Death record in DS — check_dd_death_date","text":"","code":"AE <- data.frame(  USUBJID = 1:5,  AEDTHDTC = c(\"2018-01-01\", \"2018-01-02\", \"2018-01-03\",\"2018-01-04\", \"\"),  AESPID=\"FORMNAME-R:13/L:13XXXX\",  stringsAsFactors = FALSE )  DS <- data.frame(  USUBJID = c(1,1,2,3,3,4),  DSTERM=c(\"DEATH\",\"RANDOM THING\",\"ADVERSE EVENT\",           \"DEATH DUE TO PROGRESSIVE DISEASE\",\"ADVERSE EVENT\",           \"DEATH DUE TO ABC\"),  DSDECOD=c(\"DEATH\",\"ADVERSE EVENT\",\"DEATH\", \"DEATH\",\"OTHER\", \"DEATH\"),  stringsAsFactors=FALSE )  check_dd_death_date(AE,DS) #> [1] FALSE #> attr(,\"msg\") #> [1] \"2 patient(s) with a death date in AE but death not reflected properly in DS. \" #> attr(,\"data\") #>   USUBJID   AEDTHDTC DSTERM DSDECOD #> 2       2 2018-01-02   <NA>    <NA> #> 3       3 2018-01-03   <NA>    <NA> check_dd_death_date(AE,DS,preproc=roche_derive_rave_row) #> [1] FALSE #> attr(,\"msg\") #> [1] \"2 patient(s) with a death date in AE but death not reflected properly in DS. \" #> attr(,\"data\") #>   USUBJID   AEDTHDTC          RAVE DSTERM DSDECOD #> 2       2 2018-01-02 FORMNAME-R:13   <NA>    <NA> #> 3       3 2018-01-03 FORMNAME-R:13   <NA>    <NA>"},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_dm_actarm_arm.html","id":null,"dir":"Reference","previous_headings":"","what":"Check DM where ARM is not equal to ACTARM — check_dm_actarm_arm","title":"Check DM where ARM is not equal to ACTARM — check_dm_actarm_arm","text":"check looks DM entries ARM equal ACTARM","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_dm_actarm_arm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check DM where ARM is not equal to ACTARM — check_dm_actarm_arm","text":"","code":"check_dm_actarm_arm(DM)"},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_dm_actarm_arm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check DM where ARM is not equal to ACTARM — check_dm_actarm_arm","text":"DM Demographics SDTM dataset variables USUBJID, ARM, ACTARM","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_dm_actarm_arm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check DM where ARM is not equal to ACTARM — check_dm_actarm_arm","text":"Boolean value whether check passed failed, 'msg' attribute check failed","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_dm_actarm_arm.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Check DM where ARM is not equal to ACTARM — check_dm_actarm_arm","text":"Ying Yuen","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_dm_actarm_arm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check DM where ARM is not equal to ACTARM — check_dm_actarm_arm","text":"","code":"DM <- data.frame(USUBJID = 1:5,                  ARM = c(letters[1:3], letters[5:6]),                  ACTARM = letters[1:5],                  stringsAsFactors = FALSE)  check_dm_actarm_arm(DM) #> [1] FALSE #> attr(,\"msg\") #> [1] \"DM has entries where ARM != ACTARM. \" #> attr(,\"data\") #>   USUBJID ARM ACTARM #> 1       4   e      d #> 2       5   f      e"},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_dm_ae_ds_death.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if death reported in DM then death indicator also present in DS or AE — check_dm_ae_ds_death","title":"Check if death reported in DM then death indicator also present in DS or AE — check_dm_ae_ds_death","text":"checks death indicated DM either DTHFL DTHDTC death indicated either AE DS.","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_dm_ae_ds_death.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if death reported in DM then death indicator also present in DS or AE — check_dm_ae_ds_death","text":"","code":"check_dm_ae_ds_death(DM, DS, AE)"},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_dm_ae_ds_death.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if death reported in DM then death indicator also present in DS or AE — check_dm_ae_ds_death","text":"DM Demographics SDTM dataset variables USUBJID, DTHFL, DTHDTC DS Disposition SDTM dataset variables USUBJID, DSDECOD, DSSTDTC AE Adverse Events SDTM dataset variables USUBJID, AEDTHDTC, AESDTH, AEOUT","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_dm_ae_ds_death.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if death reported in DM then death indicator also present in DS or AE — check_dm_ae_ds_death","text":"boolean value check failed passed 'msg' attribute test failed","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_dm_ae_ds_death.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Check if death reported in DM then death indicator also present in DS or AE — check_dm_ae_ds_death","text":"Sara Bodach","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_dm_ae_ds_death.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if death reported in DM then death indicator also present in DS or AE — check_dm_ae_ds_death","text":"","code":"AE <- data.frame(  STUDYID = 1,  USUBJID = 1:3,  AEDTHDTC = c(NA,1,NA),  AESDTH = c(NA,\"Y\",NA),  AEOUT = c(NA,\"FATAL\",NA),  AETOXGR = c(NA,\"5\",NA) )  DS <- data.frame(  STUDYID = 1,  USUBJID = 1:3,  DSDECOD = c(NA,\"DEATH\",NA),  DSSTDTC = c(NA,\"DSDATE\",NA) )  DM <- data.frame(  STUDYID = 1,  USUBJID = 1:3,  DTHFL=c(NA,\"Y\",\"Y\"),  DTHDTC = c(NA,\"DMDATE\",\"DMDATE\")  )  check_dm_ae_ds_death(DM,DS,AE) #> [1] FALSE #> attr(,\"msg\") #> [1] \"1 patient(s) where DM data indicates death but no record indicating death in DS or AE. \" #> attr(,\"data\") #>   USUBJID DTHDTC DTHFL #> 1       3 DMDATE     Y  DS$DSDECOD = NULL  check_dm_ae_ds_death(DM,DS,AE) #> [1] FALSE #> attr(,\"msg\") #> [1] \"DS is missing the variable: DSDECOD\""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_dm_age_missing.html","id":null,"dir":"Reference","previous_headings":"","what":"Check for patients with suspicious age values — check_dm_age_missing","title":"Check for patients with suspicious age values — check_dm_age_missing","text":"Check patients missing AGE, AGE<18 AGE>90 DM","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_dm_age_missing.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check for patients with suspicious age values — check_dm_age_missing","text":"","code":"check_dm_age_missing(DM)"},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_dm_age_missing.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check for patients with suspicious age values — check_dm_age_missing","text":"DM Demographics SDTM dataset variables USUBJID,AGE","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_dm_age_missing.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check for patients with suspicious age values — check_dm_age_missing","text":"boolean value check failed passed 'msg' attribute test failed","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_dm_age_missing.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Check for patients with suspicious age values — check_dm_age_missing","text":"Nina Qi","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_dm_age_missing.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check for patients with suspicious age values — check_dm_age_missing","text":"","code":"DM <- data.frame(  USUBJID = 1:10,  AGE = c(50,60,17,99,NA,33,500,40,22,NA) )  check_dm_age_missing(DM) #> [1] FALSE #> attr(,\"msg\") #> [1] \"DM has 5 patient(s) with suspicious age value(s). \" #> attr(,\"data\") #>   USUBJID AGE #> 1       3  17 #> 2       4  99 #> 3       5  NA #> 4       7 500 #> 5      10  NA  DM$AGE = NULL  check_dm_age_missing(DM) #> [1] FALSE #> attr(,\"msg\") #> [1] \"DM is missing the variable: AGE\""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_dm_armcd.html","id":null,"dir":"Reference","previous_headings":"","what":"Check for missing ARM or ARMCD values in DM — check_dm_armcd","title":"Check for missing ARM or ARMCD values in DM — check_dm_armcd","text":"check looks missing ARM ARMCD values","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_dm_armcd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check for missing ARM or ARMCD values in DM — check_dm_armcd","text":"","code":"check_dm_armcd(DM)"},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_dm_armcd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check for missing ARM or ARMCD values in DM — check_dm_armcd","text":"DM Demographics SDTM dataset variables USUBJID, ARM, ARMCD","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_dm_armcd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check for missing ARM or ARMCD values in DM — check_dm_armcd","text":"boolean value check failed passed 'msg' attribute test failed","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_dm_armcd.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Check for missing ARM or ARMCD values in DM — check_dm_armcd","text":"Rena Wang","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_dm_armcd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check for missing ARM or ARMCD values in DM — check_dm_armcd","text":"","code":"DM <- data.frame(  USUBJID = 1:3,  ARM = 1:3,  ARMCD = 1:3 )  check_dm_armcd(DM) #> [1] TRUE  DM$ARMCD[1] <- NA check_dm_armcd(DM) #> [1] FALSE #> attr(,\"msg\") #> [1] \"Total number of patients with missing ARM/ARMCD values is 1. \" #> attr(,\"data\") #>   USUBJID ARM ARMCD #> 1       1   1    NA  DM$ARM[2] <- NA check_dm_armcd(DM) #> [1] FALSE #> attr(,\"msg\") #> [1] \"Total number of patients with missing ARM/ARMCD values is 2. \" #> attr(,\"data\") #>   USUBJID ARM ARMCD #> 1       1   1    NA #> 2       2  NA     2  DM$ARMCD <- NULL check_dm_armcd(DM) #> [1] FALSE #> attr(,\"msg\") #> [1] \"DM is missing the variable: ARMCD\""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_dm_dthfl_dthdtc.html","id":null,"dir":"Reference","previous_headings":"","what":"Check that when DM.DTHFL is Y, DM.DTHDTC does not have a missing value, and vice versa — check_dm_dthfl_dthdtc","title":"Check that when DM.DTHFL is Y, DM.DTHDTC does not have a missing value, and vice versa — check_dm_dthfl_dthdtc","text":"check bi-directional consistency DM.DTHFL DM.DTHDTC returns data frame. Note possible valid scenario issue death date truly unknown","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_dm_dthfl_dthdtc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check that when DM.DTHFL is Y, DM.DTHDTC does not have a missing value, and vice versa — check_dm_dthfl_dthdtc","text":"","code":"check_dm_dthfl_dthdtc(DM)"},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_dm_dthfl_dthdtc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check that when DM.DTHFL is Y, DM.DTHDTC does not have a missing value, and vice versa — check_dm_dthfl_dthdtc","text":"DM Demographics SDTM dataset variables USUBJID,DTHFL,DTHDTC","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_dm_dthfl_dthdtc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check that when DM.DTHFL is Y, DM.DTHDTC does not have a missing value, and vice versa — check_dm_dthfl_dthdtc","text":"boolean value check failed passed 'msg' attribute test failed","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_dm_dthfl_dthdtc.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Check that when DM.DTHFL is Y, DM.DTHDTC does not have a missing value, and vice versa — check_dm_dthfl_dthdtc","text":"Ross Farrugia","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_dm_dthfl_dthdtc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check that when DM.DTHFL is Y, DM.DTHDTC does not have a missing value, and vice versa — check_dm_dthfl_dthdtc","text":"","code":"DM <- data.frame(  USUBJID = 1:7,  DTHFL = 1:7,  DTHDTC = 1:7 )  DM$DTHFL[1] = \"\" DM$DTHDTC[1] = \"2020-01-01\" DM$DTHFL[2] = \"N\" DM$DTHDTC[2] = \"2020-01-01\" DM$DTHFL[3] = \"Y\" DM$DTHDTC[3] = \"2020-01-01\" DM$DTHFL[4] = \"Y\" DM$DTHDTC[4] = \"\" DM$DTHFL[5] = \"N\" DM$DTHDTC[5] = \"\" DM$DTHFL[6] = \"Y\" DM$DTHDTC[6] = \"2020\" DM$DTHFL[7] = \"\" DM$DTHDTC[7] = \"\" check_dm_dthfl_dthdtc(DM) #> [1] FALSE #> attr(,\"msg\") #> [1] \"DM has 3 records with inconsistent values of DTHFL and DTHDTC. \" #> attr(,\"data\") #>   USUBJID DTHFL     DTHDTC #> 1       1       2020-01-01 #> 2       2     N 2020-01-01 #> 3       4     Y             DM$DTHFL <- NULL DM$DTHDTC <- NULL check_dm_dthfl_dthdtc(DM) #> [1] FALSE #> attr(,\"msg\") #> [1] \"DM is missing the variables: DTHFL, DTHDTC\""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_dm_usubjid_ae_usubjid.html","id":null,"dir":"Reference","previous_headings":"","what":"Check patients in the DM dataset who do not have records in the AE dataset — check_dm_usubjid_ae_usubjid","title":"Check patients in the DM dataset who do not have records in the AE dataset — check_dm_usubjid_ae_usubjid","text":"check looks patients DM dataset records AE dataset, obtains first treatment start date earliest death date patients","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_dm_usubjid_ae_usubjid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check patients in the DM dataset who do not have records in the AE dataset — check_dm_usubjid_ae_usubjid","text":"","code":"check_dm_usubjid_ae_usubjid(DM, AE, DS, EX)"},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_dm_usubjid_ae_usubjid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check patients in the DM dataset who do not have records in the AE dataset — check_dm_usubjid_ae_usubjid","text":"DM Demographics SDTM dataset variable USUBJID AE Adverse Events SDTM dataset variable USUBJID DS Disposition SDTM dataset variables USUBJID, DSSTDTC, DSDECOD EX Exposure SDTM dataset variables USUBJID, EXDOSE, EXSTDTC, EXTRT","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_dm_usubjid_ae_usubjid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check patients in the DM dataset who do not have records in the AE dataset — check_dm_usubjid_ae_usubjid","text":"boolean value check failed passed 'msg' attribute test failed","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_dm_usubjid_ae_usubjid.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Check patients in the DM dataset who do not have records in the AE dataset — check_dm_usubjid_ae_usubjid","text":"Vani Nimbal","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_dm_usubjid_ae_usubjid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check patients in the DM dataset who do not have records in the AE dataset — check_dm_usubjid_ae_usubjid","text":"","code":"USUBJID<- c(1:10) DM=data.frame(USUBJID) AE=data.frame(USUBJID) AE$USUBJID[3]=NA AE$USUBJID[8]=NA AE$USUBJID[10]=NA  EX <- data.frame( USUBJID = c(1:8, 6, 8, 10, 10, 10, 10), EXOCCUR = rep(\"Y\", times=14), EXDOSE = rep(c(1,2), times=7), EXSTDTC = c(rep(\"2012-01-01\", 10),\"2012-02-04\",\"2012-02-04\", \"\", \"2012-02-07\"), EXTRT = \"GDC\", stringsAsFactors=FALSE )  DS <- data.frame( USUBJID = c(2,8,8), DSDECOD = rep(\"DEATH\", times=3), DSSTDTC = c(\"2012-12-01\", NA, \"2013-07-01\"), stringsAsFactors=FALSE ) check_dm_usubjid_ae_usubjid(DM, AE, DS, EX) #> [1] FALSE #> attr(,\"msg\") #> [1] \"There is/are 3 patient(s) in DM without Adverse Events reported. \" #> attr(,\"data\") #>   USUBJID    EXSTDTC DSDECOD    DSSTDTC #> 1       3 2012-01-01                    #> 2       8 2012-01-01   DEATH 2013-07-01 #> 3      10 2012-02-04                     EX$EXOCCUR[3]=\"N\"  check_dm_usubjid_ae_usubjid(DM, AE, DS, EX) #> [1] FALSE #> attr(,\"msg\") #> [1] \"There is/are 3 patient(s) in DM without Adverse Events reported. \" #> attr(,\"data\") #>   USUBJID    EXSTDTC DSDECOD    DSSTDTC #> 1       3                               #> 2       8 2012-01-01   DEATH 2013-07-01 #> 3      10 2012-02-04                     EX$EXOCCUR=NULL  check_dm_usubjid_ae_usubjid(DM, AE, DS, EX) #> [1] FALSE #> attr(,\"msg\") #> [1] \"There is/are 3 patient(s) in DM without Adverse Events reported. \" #> attr(,\"data\") #>   USUBJID    EXSTDTC DSDECOD    DSSTDTC #> 1       3 2012-01-01                    #> 2       8 2012-01-01   DEATH 2013-07-01 #> 3      10 2012-02-04"},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_dm_usubjid_dup.html","id":null,"dir":"Reference","previous_headings":"","what":"Check duplicate patient records in DM based on USUBJID — check_dm_usubjid_dup","title":"Check duplicate patient records in DM based on USUBJID — check_dm_usubjid_dup","text":"check looks duplicate patient demographics records DM","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_dm_usubjid_dup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check duplicate patient records in DM based on USUBJID — check_dm_usubjid_dup","text":"","code":"check_dm_usubjid_dup(DM)"},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_dm_usubjid_dup.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check duplicate patient records in DM based on USUBJID — check_dm_usubjid_dup","text":"DM Demographics SDTM dataset variable USUBJID","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_dm_usubjid_dup.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check duplicate patient records in DM based on USUBJID — check_dm_usubjid_dup","text":"Boolean value whether check passed failed, 'msg' attribute check failed","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_dm_usubjid_dup.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Check duplicate patient records in DM based on USUBJID — check_dm_usubjid_dup","text":"Madeleine Ma, Stella Banjo (HackR 2021)","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_dm_usubjid_dup.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check duplicate patient records in DM based on USUBJID — check_dm_usubjid_dup","text":"","code":"## duplicates and same patient number across sites for 3-part USUBJID DM <- data.frame(USUBJID = c(\"GO12345-00000-1000\",                              \"GO12345-11111-1000\",                              \"GO12345-00000-1000\",                              \"GO12345-00000-1001\"),       stringsAsFactors = FALSE)  check_dm_usubjid_dup(DM) #> [1] FALSE #> attr(,\"msg\") #> [1] \"Duplicate USUBJID and/or same Patient number across different USUBJIDs\" #> attr(,\"data\") #> # A tibble: 3 × 2 #>   USUBJID            FLAG                                         #>   <chr>              <chr>                                        #> 1 GO12345-00000-1000 Same Patient Number Across Different USUBJID #> 2 GO12345-11111-1000 Same Patient Number Across Different USUBJID #> 3 GO12345-00000-1000 Duplicate USUBJID                              ## no duplicate IDs in the dataframe for 3-part USUBJID DM2 <- data.frame(USUBJID = c(\"GO12345-00000-1000\",                               \"GO12345-11111-1001\",                               \"GO12345-11111-1002\"),              stringAsFactors = FALSE)  check_dm_usubjid_dup(DM2) #> [1] TRUE   ## duplicates for 2-part USUBJID DM3 <- data.frame(USUBJID = c(\"GO12345-1000\",                               \"GO12345-1000\"),             stringAsFactors = FALSE)  check_dm_usubjid_dup(DM3) #> [1] FALSE #> attr(,\"msg\") #> [1] \"Duplicate USUBJID and/or same Patient number across different USUBJIDs\" #> attr(,\"data\") #> # A tibble: 1 × 2 #>   USUBJID      FLAG              #>   <chr>        <chr>             #> 1 GO12345-1000 Duplicate USUBJID   ##  no duplicate IDs in the dataframe for 2-part USUBJID DM4 <- data.frame(USUBJID = c(\"GO12345-1000\",                               \"GO12345-1001\",                               \"GO12345-1002\"),              stringAsFactors = FALSE)  check_dm_usubjid_dup(DM4) #> [1] TRUE  ##  dataframe with one or two additional variables, if there is variation across other variables DM5 <- data.frame(USUBJID = c(\"GO12345-1000\",                               \"GO12345-1000\"),                   SEX = c(\"M\", \"F\"),                   AGE = c(18, 60),          stringAsFactors = FALSE)  check_dm_usubjid_dup(DM5) #> [1] FALSE #> attr(,\"msg\") #> [1] \"Duplicate USUBJID and/or same Patient number across different USUBJIDs\" #> attr(,\"data\") #> # A tibble: 1 × 2 #>   USUBJID      FLAG              #>   <chr>        <chr>             #> 1 GO12345-1000 Duplicate USUBJID  ## dataframe in which USUBJID is not present DM6 <- data.frame(          STUDYID = c(\"GO12345\"),          SEX = c(\"M\"),          AGE = c(72),      stringAsFactors = FALSE)  check_dm_usubjid_dup(DM6) #> [1] FALSE #> attr(,\"msg\") #> [1] \"DM is missing the variable: USUBJID\""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ds_ae_discon.html","id":null,"dir":"Reference","previous_headings":"","what":"Check for treatment discontinuation consistency between DS and AE — check_ds_ae_discon","title":"Check for treatment discontinuation consistency between DS and AE — check_ds_ae_discon","text":"check looks consistency DS.DSSPID=DISCTX* AE.AEACNn=DRUG WITHDRAWN","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ds_ae_discon.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check for treatment discontinuation consistency between DS and AE — check_ds_ae_discon","text":"","code":"check_ds_ae_discon(DS, AE)"},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ds_ae_discon.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check for treatment discontinuation consistency between DS and AE — check_ds_ae_discon","text":"DS Disposition SDTM dataset variables USUBJID, DSSPID, DSCAT, DSDECOD, DSSTDTC AE Adverse Events SDTM dataset variables USUBJID, AEDECOD, AESTDTC, AEACNn","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ds_ae_discon.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check for treatment discontinuation consistency between DS and AE — check_ds_ae_discon","text":"boolean value check failed passed 'msg' attribute test failed","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ds_ae_discon.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Check for treatment discontinuation consistency between DS and AE — check_ds_ae_discon","text":"Sarwan Singh","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ds_ae_discon.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check for treatment discontinuation consistency between DS and AE — check_ds_ae_discon","text":"","code":"AE <- data.frame(  USUBJID = 1:5,  AESTDTC = \"01JAN2017\",  AETERM  = c(\"AE1\",\"AE2\",\"AE3\",\"AE4\",\"AE5\"),  AEDECOD = c(\"AE1\",\"AE2\",\"AE3\",\"AE4\",\"AE5\"),  AEACN = c(\"DOSE REDUCED\", \"DOSE REDUCED\", \"DOSE NOT CHANGED\",  \"DOSE NOT CHANGED\", \"NOT APPLICABLE\"),  stringsAsFactors = FALSE )   DS <- data.frame(  USUBJID = 1:5,  DSSPID  = c('XXXDISCTXXXXX'),  DSSTDTC = '01JAN2017',  DSCAT   = rep(\"DISPOSITION EVENT\", 5),  DSSCAT   = rep(\"TX FORM\", 5),  DSDECOD = c(\"PHYSICIAN DECISION\", \"OTHER\", \"PHYSICIAN DECISION\", \"OTHER\", \"DEATH\"),  stringsAsFactors = FALSE )  # no case check_ds_ae_discon(DS, AE) #> [1] TRUE  # 1 case DS[3, \"DSDECOD\"] <- 'ADVERSE EVENT' check_ds_ae_discon(DS, AE) #> [1] FALSE #> attr(,\"msg\") #> [1] \"1 patient(s) with Treatment Discon due to AE but no AE record indicating drug withdrawn. \" #> attr(,\"data\") #>   USUBJID  DSSCAT       DSDECOD   DSSTDTC #> 1       3 TX FORM ADVERSE EVENT 01JAN2017  # mutliple AEACNx AE <- data.frame(  USUBJID = 1:5,  AESTDTC = c(\"01JAN2017\"),  AETERM  = c(\"AE1\",\"AE2\",\"AE3\",\"AE4\",\"AE5\"),  AEDECOD = c(\"AE1\",\"AE2\",\"AE3\",\"AE4\",\"AE5\"),  AEACN   = rep(\"MULTIPLE\", 5),  AEACN1  = c(\"DOSE REDUCED\", \"DOSE NOT CHANGED\", \"DOSE NOT CHANGED\",  \"DOSE NOT CHANGED\", \"NOT APPLICABLE\"),  stringsAsFactors = FALSE )  check_ds_ae_discon(DS, AE) #> [1] FALSE #> attr(,\"msg\") #> [1] \"1 patient(s) with Treatment Discon due to AE but no AE record indicating drug withdrawn. \" #> attr(,\"data\") #>   USUBJID  DSSCAT       DSDECOD   DSSTDTC #> 1       3 TX FORM ADVERSE EVENT 01JAN2017"},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ds_dsdecod_death.html","id":null,"dir":"Reference","previous_headings":"","what":"Check for study discontinuation record if death indicated — check_ds_dsdecod_death","title":"Check for study discontinuation record if death indicated — check_ds_dsdecod_death","text":"patient record DS.DSDECOD == DEATH also Study Discon Record","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ds_dsdecod_death.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check for study discontinuation record if death indicated — check_ds_dsdecod_death","text":"","code":"check_ds_dsdecod_death(DS, preproc = identity, ...)"},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ds_dsdecod_death.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check for study discontinuation record if death indicated — check_ds_dsdecod_death","text":"DS Disposition domain variables USUBJID, DSDECOD, DSSCAT, optional variables DSCAT, DSSTDTC, DSSPID preproc optional company specific preprocessing script ... arguments passed methods","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ds_dsdecod_death.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Check for study discontinuation record if death indicated — check_ds_dsdecod_death","text":"Sara Bodach Harris","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ds_dsdecod_death.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check for study discontinuation record if death indicated — check_ds_dsdecod_death","text":"","code":"DS <- data.frame(  STUDYID = 1,  USUBJID = 1:3,  DSDECOD = c(NA,\"DEATH\",NA),  DSSTDTC = c(NA,\"DSDATE\",NA),  DSCAT = c('DISPOSITION EVENT', 'DISPOSITION EVENT', 'OTHER'),  DSSCAT = c('STUDY COMPLETION/EARLY DISCONTINUATION',             'TREATMENT DISCONTINUATION',             'STUDY TREATMENT'),  DSOTH = 1:3,  DSSPID = \"XXX-R:0\",  stringsAsFactors=FALSE  )  check_ds_dsdecod_death(DS) #> [1] FALSE #> attr(,\"msg\") #> [1] \"1 record(s) for 1 unique patient(s) with DSDECOD='DEATH' but no record with DSSCAT indicating STUDY DISCONTINUATION. \" #> attr(,\"data\") #>   USUBJID DSDECOD             DSCAT DSSTDTC #> 1       2   DEATH DISPOSITION EVENT  DSDATE check_ds_dsdecod_death(DS,preproc=roche_derive_rave_row) #> [1] FALSE #> attr(,\"msg\") #> [1] \"1 record(s) for 1 unique patient(s) with DSDECOD='DEATH' but no record with DSSCAT indicating STUDY DISCONTINUATION. \" #> attr(,\"data\") #>   USUBJID DSDECOD             DSCAT DSSTDTC    RAVE #> 1       2   DEATH DISPOSITION EVENT  DSDATE XXX-R:0  DS$DSSCAT[2] <- \"STUDY COMPLETION/EARLY DISCONTINUATION\" check_ds_dsdecod_death(DS) #> [1] TRUE  DS$DSDECOD = NULL check_ds_dsdecod_death(DS) #> [1] FALSE #> attr(,\"msg\") #> [1] \"DS is missing the variable: DSDECOD\""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ds_dsdecod_dsstdtc.html","id":null,"dir":"Reference","previous_headings":"","what":"Check DS with death record but no death date — check_ds_dsdecod_dsstdtc","title":"Check DS with death record but no death date — check_ds_dsdecod_dsstdtc","text":"check looks patients DS record indicating death corresponding record death date DS. example, \"Survival Follow \" records often death dates, data cut applied properly, impute missing death date another record missing (e.g. Study Discon form)","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ds_dsdecod_dsstdtc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check DS with death record but no death date — check_ds_dsdecod_dsstdtc","text":"","code":"check_ds_dsdecod_dsstdtc(DS)"},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ds_dsdecod_dsstdtc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check DS with death record but no death date — check_ds_dsdecod_dsstdtc","text":"DS Disposition SDTMv dataset variables USUBJID, DSDECOD, DSSCAT DSSTDTC","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ds_dsdecod_dsstdtc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check DS with death record but no death date — check_ds_dsdecod_dsstdtc","text":"Boolean value whether check passed failed, 'msg' attribute test failed","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ds_dsdecod_dsstdtc.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Check DS with death record but no death date — check_ds_dsdecod_dsstdtc","text":"Harris","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ds_dsdecod_dsstdtc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check DS with death record but no death date — check_ds_dsdecod_dsstdtc","text":"","code":"DS <- data.frame(STUDYID = rep(1, 5),                  USUBJID = c(1, 1, 1, 2, 3),                  DSDECOD = c(\"DEATH\", \"DEATH\", rep(\"\", 3)),                  DSSCAT = LETTERS[1:5],                  DSSTDTC = c(\"\", \"2016-01-01\", \"\", \"\", \"2016-01-02\"),                  stringsAsFactors = FALSE)  check_ds_dsdecod_dsstdtc(DS) #> [1] TRUE  DS$DSSTDTC[2] <- \"\"  check_ds_dsdecod_dsstdtc(DS) #> [1] FALSE #> attr(,\"msg\") #> [1] \"DS has death recorded with no death date records. \" #> attr(,\"data\") #>   USUBJID DSDECOD DSSTDTC #> 1       1   DEATH"},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ds_dsscat.html","id":null,"dir":"Reference","previous_headings":"","what":"Check for patients with more than one study discontinuation records — check_ds_dsscat","title":"Check for patients with more than one study discontinuation records — check_ds_dsscat","text":"check looks patient one study discontinuation records","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ds_dsscat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check for patients with more than one study discontinuation records — check_ds_dsscat","text":"","code":"check_ds_dsscat(DS)"},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ds_dsscat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check for patients with more than one study discontinuation records — check_ds_dsscat","text":"DS Disposition SDTM dataset variables USUBJID,DSSCAT","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ds_dsscat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check for patients with more than one study discontinuation records — check_ds_dsscat","text":"boolean value check failed passed 'msg' attribute test failed","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ds_dsscat.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Check for patients with more than one study discontinuation records — check_ds_dsscat","text":"Madeleine Ma","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ds_dsscat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check for patients with more than one study discontinuation records — check_ds_dsscat","text":"","code":"DS <- data.frame(  USUBJID = c(rep(1,3),rep(2,3),rep(3,3)),  DSSCAT= rep(c(\"STUDY DISCONTINUATION\", \"ADVERSE EVENT\", \"PROTOCOL\"),3),  stringsAsFactors=FALSE ) check_ds_dsscat(DS) #> [1] TRUE  DS$DSSCAT[8] = \"STUDY DISCONTINUATION\" check_ds_dsscat(DS) #> [1] FALSE #> attr(,\"msg\") #> [1] \"Patients with more than one study discontinuation records. \" #> attr(,\"data\") #>   USUBJID                DSSCAT #> 1       3 STUDY DISCONTINUATION #> 2       3 STUDY DISCONTINUATION  DS$DSSCAT = NULL check_ds_dsscat(DS) #> [1] FALSE #> attr(,\"msg\") #> [1] \"DS is missing the variable: DSSCAT\""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ds_dsterm_death_due_to.html","id":null,"dir":"Reference","previous_headings":"","what":"Check missing cause of death information in DS — check_ds_dsterm_death_due_to","title":"Check missing cause of death information in DS — check_ds_dsterm_death_due_to","text":"check looks DS.DSTERM values missing death reason returns data frame (e.g. records DSTERM = 'DEATH DUE ')","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ds_dsterm_death_due_to.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check missing cause of death information in DS — check_ds_dsterm_death_due_to","text":"","code":"check_ds_dsterm_death_due_to(DS)"},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ds_dsterm_death_due_to.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check missing cause of death information in DS — check_ds_dsterm_death_due_to","text":"DS Disposition SDTMv dataset variables USUBJID, DSTERM, DSDECOD, DSDTC, DSSTDTC","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ds_dsterm_death_due_to.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check missing cause of death information in DS — check_ds_dsterm_death_due_to","text":"boolean value check failed passed 'msg' attribute test failed","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ds_dsterm_death_due_to.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Check missing cause of death information in DS — check_ds_dsterm_death_due_to","text":"Sara Bodach","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ds_dsterm_death_due_to.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check missing cause of death information in DS — check_ds_dsterm_death_due_to","text":"","code":"DS <- data.frame(  STUDYID = 1,  USUBJID = 1:4,  DSTERM = c(\"DEATH DUE TO\",    \"DEATH DUE TO \",    \"DEATH DUE TO ADVERSE EVENT\",    \"DEATH DUE TO UNKNOWN\"),  DSDECOD = \"DEATH\",  DSDTC = \"2017-01-01\",  DSSTDTC = \"2017-01-01\",  stringsAsFactors=FALSE )  check_ds_dsterm_death_due_to(DS) #> [1] FALSE #> attr(,\"msg\") #> [1] \"DS has 2 records with missing death reason. \" #> attr(,\"data\") #>   USUBJID        DSTERM DSDECOD      DSDTC    DSSTDTC #> 1       1  DEATH DUE TO   DEATH 2017-01-01 2017-01-01 #> 2       2 DEATH DUE TO    DEATH 2017-01-01 2017-01-01  DS$DSDECOD <- NULL check_ds_dsterm_death_due_to(DS) #> [1] FALSE #> attr(,\"msg\") #> [1] \"DS is missing the variable: DSDECOD\""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ds_duplicate_randomization.html","id":null,"dir":"Reference","previous_headings":"","what":"Check for duplicate randomization records for a patient — check_ds_duplicate_randomization","title":"Check for duplicate randomization records for a patient — check_ds_duplicate_randomization","text":"Checks duplicate subject IDs (USUBJID) DS domain randomization indicated","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ds_duplicate_randomization.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check for duplicate randomization records for a patient — check_ds_duplicate_randomization","text":"","code":"check_ds_duplicate_randomization(DS)"},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ds_duplicate_randomization.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check for duplicate randomization records for a patient — check_ds_duplicate_randomization","text":"DS Disposition SDTM dataset variables USUBJID, DSDECOD","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ds_duplicate_randomization.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check for duplicate randomization records for a patient — check_ds_duplicate_randomization","text":"boolean value check failed passed 'msg' attribute test failed","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ds_duplicate_randomization.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Check for duplicate randomization records for a patient — check_ds_duplicate_randomization","text":"Madeleine Ma","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ds_duplicate_randomization.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check for duplicate randomization records for a patient — check_ds_duplicate_randomization","text":"","code":"DS <- data.frame(  USUBJID = c(\"ID1\",\"ID1\",\"ID2\",\"ID2\",\"ID3\",\"ID3\"),  DSDECOD = c(\"RANDOMIZATION\",\"OTHER THING\",\"RANDOMIZATION\",              \"OTHER THING\",\"RANDOMIZATION\",\"RANDOMIZATION\")              , stringsAsFactors = FALSE )  check_ds_duplicate_randomization(DS) #> [1] FALSE #> attr(,\"msg\") #> [1] \"DS has 1 patient(s) with duplicate randomization records. \" #> attr(,\"data\") #>   Duplicate USUBJID Number of Records #> 3               ID3                 2  DS$DSDECOD <- NULL check_ds_duplicate_randomization(DS) #> [1] FALSE #> attr(,\"msg\") #> [1] \"DS is missing the variable: DSDECOD\""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ds_ex_after_discon.html","id":null,"dir":"Reference","previous_headings":"","what":"Check for patients who had Start/End date of treatment after study discontinuation date — check_ds_ex_after_discon","title":"Check for patients who had Start/End date of treatment after study discontinuation date — check_ds_ex_after_discon","text":"Check patients Start/End date treatment study discontinuation date DS EX domains.","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ds_ex_after_discon.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check for patients who had Start/End date of treatment after study discontinuation date — check_ds_ex_after_discon","text":"","code":"check_ds_ex_after_discon(DS, EX)"},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ds_ex_after_discon.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check for patients who had Start/End date of treatment after study discontinuation date — check_ds_ex_after_discon","text":"DS Disposition SDTM dataset variables USUBJID, DSSCAT, DSCAT DSSTDTC EX Exposure SDTM dataset variables USUBJID, EXSTDTC, EXENDTC, EXTRT, EXDOSE EXOCCUR (available)","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ds_ex_after_discon.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check for patients who had Start/End date of treatment after study discontinuation date — check_ds_ex_after_discon","text":"Boolean value check failed passed 'msg' attribute test failed","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ds_ex_after_discon.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Check for patients who had Start/End date of treatment after study discontinuation date — check_ds_ex_after_discon","text":"Saibah Chohan, Ashley Mao, Tina Cho (HackR 2021 Team STA-R)","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ds_ex_after_discon.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check for patients who had Start/End date of treatment after study discontinuation date — check_ds_ex_after_discon","text":"","code":"DS <- data.frame(  USUBJID = c(rep(1,2), rep(2,2)),  DSSCAT= rep(c(\"STUDY COMPLETION/EARLY DISCONTINUATION\", \"ADVERSE EVENT\"),2),  DSCAT = rep(c(\"DISPOSITION EVENT\", \"OTHER\"),2),  DSSTDTC = c(\"2019-12-29\", \"2019-12-20\", \"2019-12-10\", \"2019-12-01\"),  stringsAsFactors = FALSE  )  EX <- data.frame(  USUBJID = c(rep(1,2), rep(2,2)),  EXSTDTC = c(\"2019-12-20\", \"2019-12-28\", \"2019-12-26\", \"2019-12-27\"),  EXENDTC = c(\"2019-12-10\", \"2019-12-23\", \"2019-12-30\", \"2019-12-27\"),  EXTRT = c(rep(\"SOME DRUG\", 2), rep(\"PLACEBO\",2)),  EXDOSE = c(10,10,0,0),  stringsAsFactors = FALSE  )  check_ds_ex_after_discon(DS, EX) #> [1] FALSE #> attr(,\"msg\") #> [1] \"1 patient(s) with suspicious Start/End date of treatment occurring after study discontinuation. \" #> attr(,\"data\") #>   USUBJID max_EX_start max_EX_end                                 DSSCAT #> 1       2   2019-12-27 2019-12-30 STUDY COMPLETION/EARLY DISCONTINUATION #>      DSSTDTC #> 1 2019-12-10  DS <- data.frame(  USUBJID = c(rep(1,2), rep(2,2)),  DSSCAT= rep(c(\"STUDY COMPLETION/EARLY DISCONTINUATION\", \"ADVERSE EVENT\"),2),  DSCAT = rep(c(\"DISPOSITION EVENT\", \"OTHER\"),2),  DSSTDTC = c(\"2019-12-29\", \"2019-12-20\", \"2019-12-10\", \"2019-12-01\"),  stringsAsFactors = FALSE  )  EX <- data.frame(  USUBJID = c(rep(1,2), rep(2,2)),  EXSTDTC = c(\"2019-12-20\", \"2019-12-28\", \"2019-12-01\", \"2019-12-02\"),  EXENDTC = c(\"2019-12-10\", \"2019-12-23\", \"2020\", \"2020\"),  EXTRT = c(rep(\"SOME DRUG\", 2), rep(\"PLACEBO\",2)),  EXDOSE = c(10,10,0,0),  stringsAsFactors = FALSE  )  check_ds_ex_after_discon(DS, EX) #> [1] FALSE #> attr(,\"msg\") #> [1] \"1 patient(s) with suspicious Start/End date of treatment occurring after study discontinuation. \" #> attr(,\"data\") #>   USUBJID max_EX_start max_EX_end                                 DSSCAT #> 1       2   2019-12-02       2020 STUDY COMPLETION/EARLY DISCONTINUATION #>      DSSTDTC #> 1 2019-12-10"},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ds_multdeath_dsstdtc.html","id":null,"dir":"Reference","previous_headings":"","what":"Check DS with multiple death records with death dates, where death dates do not match — check_ds_multdeath_dsstdtc","title":"Check DS with multiple death records with death dates, where death dates do not match — check_ds_multdeath_dsstdtc","text":"check looks patients DS multiple records indicating death, non-missing mismatching death dates DSSTDTC.","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ds_multdeath_dsstdtc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check DS with multiple death records with death dates, where death dates do not match — check_ds_multdeath_dsstdtc","text":"","code":"check_ds_multdeath_dsstdtc(DS, preproc = identity, ...)"},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ds_multdeath_dsstdtc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check DS with multiple death records with death dates, where death dates do not match — check_ds_multdeath_dsstdtc","text":"DS Disposition SDTMv dataset variables USUBJID, DSDECOD, DSSTDTC preproc optional company specific preprocessing script ... arguments passed methods","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ds_multdeath_dsstdtc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check DS with multiple death records with death dates, where death dates do not match — check_ds_multdeath_dsstdtc","text":"Boolean value whether check passed failed, 'msg' attribute test failed","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ds_multdeath_dsstdtc.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Check DS with multiple death records with death dates, where death dates do not match — check_ds_multdeath_dsstdtc","text":"Kimberly Fernandes","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ds_multdeath_dsstdtc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check DS with multiple death records with death dates, where death dates do not match — check_ds_multdeath_dsstdtc","text":"","code":"DS_error1 <- data.frame(STUDYID = rep(1, 6),   USUBJID = c(1, 1, 1, 2, 1,1),   DSDECOD = c(\"DEATH\", \"DEATH\", rep(\"\", 2),\"DEATH\",\"DEATH\"),   DSSCAT = LETTERS[1:6],   DSSTDTC = c(\"\", \"2016-01-01\", \"\", \"\", \"2016-01-02\",\"2016-01-01\"),   stringsAsFactors = FALSE)  DS_error2 <- data.frame(STUDYID = rep(1, 6),   USUBJID = c(1, 1, 1, 2, 1,1),   DSDECOD = c(\"DEATH\", \"DEATH\", rep(\"\", 2),\"DEATH\",\"DEATH\"),   DSSCAT = LETTERS[1:6],   DSSTDTC = c(\"\", \"2016-01\", \"\", \"\", \"2016-01-01\",\"2016-01-01\"),   stringsAsFactors = FALSE)     DS_noerror <- data.frame(STUDYID = rep(1, 6),                         USUBJID = c(1, 1, 1, 2, 1,1),                         DSDECOD = c(\"DEATH\", \"DEATH\", rep(\"\", 2),\"DEATH\",\"DEATH\"),                         DSSCAT = LETTERS[1:6],                         DSSTDTC = c(\"\", \"2016-01-01\", \"\", \"\", \"2016-01-01\",\"2016-01-01\"),                         stringsAsFactors = FALSE)  check_ds_multdeath_dsstdtc(DS_error1) #> [1] FALSE #> attr(,\"msg\") #> [1] \"DS has multiple non-missing death dates in DSSTDTC that do not match. \" #> attr(,\"data\") #> # A tibble: 3 × 4 #> # Groups:   USUBJID [1] #>   USUBJID DSSCAT DSDECOD DSSTDTC    #>     <dbl> <chr>  <chr>   <chr>      #> 1       1 B      DEATH   2016-01-01 #> 2       1 E      DEATH   2016-01-02 #> 3       1 F      DEATH   2016-01-01 check_ds_multdeath_dsstdtc(DS_error2) #> [1] FALSE #> attr(,\"msg\") #> [1] \"DS has multiple non-missing death dates in DSSTDTC that do not match. \" #> attr(,\"data\") #> # A tibble: 3 × 4 #> # Groups:   USUBJID [1] #>   USUBJID DSSCAT DSDECOD DSSTDTC    #>     <dbl> <chr>  <chr>   <chr>      #> 1       1 B      DEATH   2016-01    #> 2       1 E      DEATH   2016-01-01 #> 3       1 F      DEATH   2016-01-01 check_ds_multdeath_dsstdtc(DS_noerror) #> [1] TRUE"},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ds_sc_strat.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if randomized patients are missing stratification factor data — check_ds_sc_strat","title":"Check if randomized patients are missing stratification factor data — check_ds_sc_strat","text":"Check Study randomized (DS.DSDECOD == \"RANDOMIZED\" \"RANDOMIZATION\"), subject Characteristics Domain (SC) stratification factors reported.","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ds_sc_strat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if randomized patients are missing stratification factor data — check_ds_sc_strat","text":"","code":"check_ds_sc_strat(DS, SC)"},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ds_sc_strat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if randomized patients are missing stratification factor data — check_ds_sc_strat","text":"DS Subject Dispostion Dataset variable USUBJID, DSDECOD, DSSTDTC SC Subject Characteristics Dataset variables USUBJID, SCTEST, SCTESTCD, SCCAT, SCORRES","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ds_sc_strat.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Check if randomized patients are missing stratification factor data — check_ds_sc_strat","text":"Monarch Shah","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ds_sc_strat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if randomized patients are missing stratification factor data — check_ds_sc_strat","text":"","code":"ds <- data.frame(USUBJID = c(1,2,2),                  DSDECOD = c(\"RANDOMIZATION\", \"RANDOMIZED\", \"Randomized\"),                  DSSTDTC = c(\"2021-01-01\", \"2021-01-02\", \"2021-02-01\")) sc <- data.frame(USUBJID  = c(1,1,1,2,2,2),                  SCCAT = rep(\"STRATIFICATION\", 6),                  SCTESTCD = c(\"STRAT 1\", \"STRAT 2\", \"STRAT 3\", \"STRAT 1\", \"STRAT 2\", \"STRAT 3\"),                  SCTEST   = c(\"Factor 1\", \"Factor 2\", \"Factor 3\",                               \"Factor 1\", \"Factor 2\", \"Factor 3\"),                  SCORRES  = c(\"US\", \"Left\", \"Score > x\", \"RoW\", \"Right\", \"Score < x\"),                  stringsAsFactors = FALSE)  check_ds_sc_strat(ds, sc) #> [1] TRUE  ds <- data.frame(USUBJID = c(1,2,2),                  DSDECOD = c(\"RANDOMIZATION\", \"RANDOMIZED\", \"Randomized\"),                  DSSTDTC = c(\"2021-01-01\", \"2021-01-02\", \"2021-02-01\")) sc <- data.frame(USUBJID  = c(1,1,1),                  SCCAT = rep(\"STRATIFICATION\", 3),                  SCTESTCD = c(\"STRAT 1\", \"STRAT 2\", \"STRAT 3\"),                  SCTEST   = c(\"Factor 1\", \"Factor 2\", \"Factor 3\"),                  SCORRES  = c(\"US\", \"Left\", NA),                  stringsAsFactors = FALSE)  check_ds_sc_strat(ds, sc) #> [1] FALSE #> attr(,\"msg\") #> [1] \"2 patient(s) for randomized study where stratification factors are missing. \" #> attr(,\"data\") #> # A tibble: 2 × 5 #> # Groups:   USUBJID [2] #>   USUBJID DS_RANDDT  SCTESTCD  SCTEST     SCORRES #>     <dbl> <date>     <chr>     <chr>      <chr>   #> 1       1 2021-01-01 \"STRAT 3\" \"Factor 3\" \" \"     #> 2       2 2021-01-02 \" \"       \" \"        \" \"      ds <- data.frame(USUBJID = c(1,2),                  DSDECOD = c(\"Open Label\", \"Open Label\"),                  DSSTDTC = c(\"2021-01-01\", \"2021-01-02\")) sc <- data.frame(USUBJID  = c(1,1,1,2,2,2),                  SCCAT = rep(\"No STRATIFICATION\", 6),                  SCTESTCD = c(\"STRAT 1\", \"STRAT 2\", \"STRAT 3\", \"STRAT 1\", \"STRAT 2\", \"STRAT 3\"),                  SCTEST   = c(\"Factor 1\", \"Factor 2\", \"Factor 3\",                               \"Factor 1\", \"Factor 2\", \"Factor 3\"),                  SCORRES  = c(\"US\", \"Left\", NA, \"RoW\", \"Right\", \"Score < x\"),                  stringsAsFactors = FALSE)  check_ds_sc_strat(ds, sc) #> [1] FALSE #> attr(,\"msg\") #> [1] \"Only applicable for randomized studies. Based on DS, no records were found indicating randomized patients.\""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_dv_ae_aedecod_covid.html","id":null,"dir":"Reference","previous_headings":"","what":"Check for consistency between DV and AE for Covid-19 events — check_dv_ae_aedecod_covid","title":"Check for consistency between DV and AE for Covid-19 events — check_dv_ae_aedecod_covid","text":"patient DV record indicating Covid-19 also COVID-related AE AE.AEDECOD matches covid.REFTERM.","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_dv_ae_aedecod_covid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check for consistency between DV and AE for Covid-19 events — check_dv_ae_aedecod_covid","text":"","code":"check_dv_ae_aedecod_covid(AE, DV, covid_df = NULL)"},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_dv_ae_aedecod_covid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check for consistency between DV and AE for Covid-19 events — check_dv_ae_aedecod_covid","text":"AE Adverse Events SDTM dataset variables USUBJID,AEDECOD DV Protocol Deviation SDTM dataset variables USUBJID,DVREAS covid_df Dataframe AE terms identify covid, contains variable REFTERM","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_dv_ae_aedecod_covid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check for consistency between DV and AE for Covid-19 events — check_dv_ae_aedecod_covid","text":"boolean value check returns 0 obs, otherwise return subset dataframe.","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_dv_ae_aedecod_covid.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Check for consistency between DV and AE for Covid-19 events — check_dv_ae_aedecod_covid","text":"Natalie Springfield","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_dv_ae_aedecod_covid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check for consistency between DV and AE for Covid-19 events — check_dv_ae_aedecod_covid","text":"","code":"covid_df = data.frame(REFTERM = c(\"COVID-19\",                                   \"CORONAVIRUS POSITIVE\"                                   )                      )  AE <- data.frame(  USUBJID = 1:6,  AEDECOD = c(\"covid-19\", \"covid-19\",\"some AE\",\"some AE\",\"CORONAVIRUS POSITIVE\",\"UNMAPPED\") )  DV <- data.frame(  USUBJID = 1:6,  DVREAS=c(\"SUSPECTED EPIDEMIC/PANDEMIC INFECTION\",           \"UNKNOWN\",           \"SUSPECTED EPIDEMIC/PANDEMIC INFECTION\",           \"OTHER\",           \"SUSPECTED EPIDEMIC/PANDEMIC INFECTION\",           \"SUSPECTED EPIDEMIC/PANDEMIC INFECTION\") )  check_dv_ae_aedecod_covid(AE,DV,covid_df) #> [1] FALSE #> attr(,\"msg\") #> [1] \"Found 2 patient(s) with COVID-related Protocol Deviation, but no AE record with COVID terms. \" #> attr(,\"data\") #>   USUBJID                                DVREAS AEDECOD #> 2       3 SUSPECTED EPIDEMIC/PANDEMIC INFECTION    <NA> #> 4       6 SUSPECTED EPIDEMIC/PANDEMIC INFECTION    <NA>"},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_dv_covid.html","id":null,"dir":"Reference","previous_headings":"","what":"Check for consistency in Covid-19 DV variables, DVREAS and DVEPRELI — check_dv_covid","title":"Check for consistency in Covid-19 DV variables, DVREAS and DVEPRELI — check_dv_covid","text":"check looks inconsistency DVREAS DVEPRELI. DVREAS Covid-19 related deviation DVEPRELI missing vice versa. check applies studies using Protocol Deviation Management System (PDMS).","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_dv_covid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check for consistency in Covid-19 DV variables, DVREAS and DVEPRELI — check_dv_covid","text":"","code":"check_dv_covid(DV)"},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_dv_covid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check for consistency in Covid-19 DV variables, DVREAS and DVEPRELI — check_dv_covid","text":"DV Protocol Deviations SDTM dataset variables USUBJID, DVREAS, DVEPRELI","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_dv_covid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check for consistency in Covid-19 DV variables, DVREAS and DVEPRELI — check_dv_covid","text":"boolean value check failed passed 'msg' attribute test failed","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_dv_covid.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Check for consistency in Covid-19 DV variables, DVREAS and DVEPRELI — check_dv_covid","text":"Mij Rahman","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_dv_covid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check for consistency in Covid-19 DV variables, DVREAS and DVEPRELI — check_dv_covid","text":"","code":"DV <- data.frame(     USUBJID = 1:3,     DVEPRELI = c(\"Y\",\"N\",\"Y\"),     DVREAS=c(\"EPIDEMIC/PANDEMIC INFECTION\",\"EPIDEMIC/PANDEMIC INFECTION\",\"\"),     stringsAsFactors=FALSE )  check_dv_covid(DV) #> [1] FALSE #> attr(,\"msg\") #> [1] \"Found  2 patient(s) with COVID-related Protocol Deviation inconsistencies. \" #> attr(,\"data\") #>   USUBJID                      DVREAS DVEPRELI #> 1       2 EPIDEMIC/PANDEMIC INFECTION        N #> 2       3                                    Y"},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ec_sc_lat.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if Study Drug is not administered in the Study Eye — check_ec_sc_lat","title":"Check if Study Drug is not administered in the Study Eye — check_ec_sc_lat","text":"Check Study Drug administered Study Eye. 1.> Subset Exposure dataset (EC) ocular Study Drug Administration records, pass check none. EC.ECCAT variable available remove records containing EC.ECCAT = “FELLOW”. EC.ECCAT variable available include records, assuming drug administration collected study eye . 2.> Subset Subject Characteristics dataset (SC) Study Eye Selection 3.> Compare Exposure dataset laterality (EC.ECLAT) Subject Characteristics dataset laterality (SC.SCORRES - OS = LEFT, OD = RIGHT) report mismatch.","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ec_sc_lat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if Study Drug is not administered in the Study Eye — check_ec_sc_lat","text":"","code":"check_ec_sc_lat(EC, SC)"},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ec_sc_lat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if Study Drug is not administered in the Study Eye — check_ec_sc_lat","text":"EC Subject Exposure Dataset variables USUBJID, ECCAT (available), ECLOC, ECMOOD, ECLAT, ECSTDY, VISIT, ECSTDTC, ECOCCUR, ECROUTE SC Subject Characteristics Dataset Ophtha Study variables USUBJID, SCTEST, SCTESTCD, SCCAT, SCORRES, SCDTC","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ec_sc_lat.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Check if Study Drug is not administered in the Study Eye — check_ec_sc_lat","text":"Monarch Shah (HackR 2021 Team Eye)","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ec_sc_lat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if Study Drug is not administered in the Study Eye — check_ec_sc_lat","text":"","code":"sc <- data.frame(USUBJID  = c(1,1,1,2,2,2),                  SCTEST   = c(\"Eye Meeting Eligibility Criteria\",                                \"Focus of Study-Specific Interest\",                                \" \",                               \"Eye Meeting Eligibility Criteria\",                                \"Focus of Study-Specific Interest\",                                \" \"),                  SCTESTCD = c(\"ELIGEYE\", \"FOCID\", \"\", \"ELIGEYE\", \"FOCID\", \"\"),                  SCCAT    = c(\"STUDY EYE SELECTION\", \"STUDY EYE SELECTION\", \"\",                                \"STUDY EYE SELECTION\", \"STUDY EYE SELECTION\", \"\"),                  SCORRES  = c(\"LEFT\", \"OS\", \"\", \"RIGHT\", \"OD\", \"\"),                  SCDTC    = \"2021-01-01\",                  stringsAsFactors = FALSE)  ec <- data.frame(USUBJID = c(1,1,1,1,1,2,2,2,2,2,2),                  ECCAT   = c(\"Fellow\", \"Study\", \"Study\", \"Study\", \"StudY\",                               \"Fellow\", \"Fellow\", \"STUDY\", \"STUDY\", \"STUDY\", \"\"),                  ECMOOD  = rep(\"Performed\", 11),                  ECLOC   = rep(\"Eye\", 11),                  ECLAT   = c(\"LEFT\", \"Left\", \"left\", \"LEFT\", \"LEFT\", \"RIGHT\",                               \"right\", \"right\", \"RIGHT\", \"RIGHT\", \"right\"),                  ECSTDY  = c(1, 28, 56, 84, 112, 1, 28, 56, 84, 112, 140),                  VISIT   = c(\"Week 1\", \"Week 4\", \"Week 8\", \"Week 12\", \"Week 16\",                               \"Week 1\", \"Week 4\", \"Week 8\", \"Week 12\", \"Week 16\", \"Week 20\"),                  ECSTDTC = c(\"2021-01-01\", \"2021-02-01\", \"2021-03-01\", \"2021-04-01\", \"2021-05-01\",                               \"2021-01-01\", \"2021-02-01\", \"2021-03-01\", \"2021-04-01\", \"2021-05-01\",                               \"2021-06-01\"),                  ECOCCUR = \"Y\",                  ECROUTE = \"INTRAVITREAL\",                  stringsAsFactors=FALSE)  check_ec_sc_lat(SC=sc, EC=ec) #> [1] TRUE  sc <- data.frame(USUBJID  = c(1,1,1,2,2,2),                  SCTEST   = c(\"Eye Meeting Eligibility Criteria\",                                \"Focus of Study-Specific Interest\",                                \" \",                               \"Eye Meeting Eligibility Criteria\",                                \"Focus of Study-Specific Interest\",                                \" \"),                  SCTESTCD = c(\"ELIGEYE\", \"FOCID\", \"\", \"ELIGEYE\", \"FOCID\", \"\"),                  SCCAT    = c(\"STUDY EYE SELECTION\", \"STUDY EYE SELECTION\", \"\",                                \"STUDY EYE SELECTION\", \"STUDY EYE SELECTION\", \"\"),                  SCORRES  = c(\"LEFT\", \"OS\", \"\", \"RIGHT\", \"OD\", \"\"),                  SCDTC    = \"2021-01-01\",                  stringsAsFactors = FALSE)  ec <- data.frame(USUBJID = c(1,1,1,1,1,2,2,2,2,2,2),                  ECCAT   = c(\"Fellow\", \"Study\", \"Study\", \"Study\", \"StudY\",                               \"Fellow\", \"Fellow\", \"STUDY\", \"STUDY\", \"STUDY\", \"\"),                  ECMOOD  = rep(\"Performed\", 11),                  ECLOC   = rep(\"Eye\", 11),                  ECLAT   = c(\"LEFT\", \"Left\", \"left\", \"LEFT\", \"RIGHT\", \"RIGHT\",                               \"right\", \"right\", \"RIGHT\", \"RIGHT\", \"left\"),                  ECSTDY  = c(1, 28, 56, 84, 112, 1, 28, 56, 84, 112, 140),                  VISIT   = c(\"Week 1\", \"Week 4\", \"Week 8\", \"Week 12\", \"Week 16\",                               \"Week 1\", \"Week 4\", \"Week 8\", \"Week 12\", \"Week 16\", \"Week 20\"),                  ECSTDTC = c(\"2021-01-01\", \"2021-02-01\", \"2021-03-01\", \"2021-04-01\", \"2021-05-01\",                               \"2021-01-01\", \"2021-02-01\", \"2021-03-01\", \"2021-04-01\", \"2021-05-01\",                               \"2021-06-01\"),                  ECOCCUR = \"Y\",                  ECROUTE = \"OPHTHALMIC\",                  stringsAsFactors=FALSE)  check_ec_sc_lat(SC=sc, EC=ec) #> [1] FALSE #> attr(,\"msg\") #> [1] \"2 record(s) with Study Drug not administered in the Study Eye. \" #> attr(,\"data\") #>   USUBJID      SCDTC SC_STUDYEYE ECCAT    ECROUTE ECLAT ECSTDY   VISIT #> 1       1 2021-01-01        LEFT StudY OPHTHALMIC RIGHT    112 Week 16 #> 2       2 2021-01-01       RIGHT       OPHTHALMIC  left    140 Week 20 #>      ECSTDTC #> 1 2021-05-01 #> 2 2021-06-01  sc <- data.frame(USUBJID  = c(1,1,1,2,2,2,3),                  SCTEST   = c(\"Eye Meeting Eligibility Criteria\",                                \"Focus of Study-Specific Interest\",                                \" \",                               \"Eye Meeting Eligibility Criteria\",                                \"Focus of Study-Specific Interest\",                                \" \",                               \"Focus of Study-Specific Interest\"),                  SCTESTCD = c(\"ELIGEYE\", \"FOCID\", \"\", \"ELIGEYE\", \"FOCID\", \"\", \"FOCID\"),                  SCCAT    = c(\"STUDY EYE SELECTION\", \"STUDY EYE SELECTION\", \"\",                                \"STUDY EYE SELECTION\",                                \"STUDY EYE SELECTION\", \"\", \"STUDY EYE SELECTION\"),                  SCORRES  = c(\"LEFT\", \"OS\", \"\", \"RIGHT\", \"OD\", \"\", \"RIGHT\"),                  SCDTC    = \"2021-01-01\",                  stringsAsFactors = FALSE)  ec <- data.frame(USUBJID = c(1,1,1,1,1,2,2,2,2,2,2),                  ECMOOD  = \"Performed\",                  ECLOC   = \"Eye\",                  ECLAT   = c(\"LEFT\", \"Left\", \"left\", \"LEFT\", \"RIGHT\", \"RIGHT\",                               \"right\", \"right\", \"RIGHT\", \"RIGHT\", \"left\"),                  ECSTDY  = c(1, 28, 56, 84, 112, 1, 28, 56, 84, 112, 140),                  VISIT   = c(\"Week 1\", \"Week 4\", \"Week 8\", \"Week 12\", \"Week 16\",                               \"Week 1\", \"Week 4\", \"Week 8\", \"Week 12\", \"Week 16\", \"Week 20\"),                  ECSTDTC = c(\"2021-01-01\", \"2021-02-01\", \"2021-03-01\", \"2021-04-01\", \"2021-05-01\",                               \"2021-01-01\", \"2021-02-01\", \"2021-03-01\", \"2021-04-01\", \"2021-05-01\",                               \"2021-06-01\"),                  ECOCCUR = c(\"Y\", \"Y\", \"Y\", \"Y\", \"Y\", \"Y\", \"Y\", \"Y\", \"Y\", \"Y\", \"N\"),                  stringsAsFactors=FALSE)  check_ec_sc_lat(SC=sc, EC=ec) #> [1] FALSE #> attr(,\"msg\") #> [1] \"EC is missing the variable: ECROUTE\""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_eg_egdtc_visit_ordinal_error.html","id":null,"dir":"Reference","previous_headings":"","what":"Check that all ECG datetimes are earlier than last\nvisit's (possible datetime data entry error) — check_eg_egdtc_visit_ordinal_error","title":"Check that all ECG datetimes are earlier than last\nvisit's (possible datetime data entry error) — check_eg_egdtc_visit_ordinal_error","text":"check identifies EGDTC values earlier last visit's. Unscheduled visits excluded.","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_eg_egdtc_visit_ordinal_error.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check that all ECG datetimes are earlier than last\nvisit's (possible datetime data entry error) — check_eg_egdtc_visit_ordinal_error","text":"","code":"check_eg_egdtc_visit_ordinal_error(EG)"},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_eg_egdtc_visit_ordinal_error.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check that all ECG datetimes are earlier than last\nvisit's (possible datetime data entry error) — check_eg_egdtc_visit_ordinal_error","text":"EG ECG Test Results SDTM dataset variables USUBJID, VISITNUM, VISIT, EGDTC, EGSTAT","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_eg_egdtc_visit_ordinal_error.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check that all ECG datetimes are earlier than last\nvisit's (possible datetime data entry error) — check_eg_egdtc_visit_ordinal_error","text":"boolean value check failed passed 'msg' attribute test failed","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_eg_egdtc_visit_ordinal_error.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Check that all ECG datetimes are earlier than last\nvisit's (possible datetime data entry error) — check_eg_egdtc_visit_ordinal_error","text":"James Zhang","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_eg_egdtc_visit_ordinal_error.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check that all ECG datetimes are earlier than last\nvisit's (possible datetime data entry error) — check_eg_egdtc_visit_ordinal_error","text":"","code":"# No case EG<- data.frame(USUBJID = 101:102,                 EGDTC=rep(c(\"2017-01-01T08:25\", \"2017-01-05T09:25\",                 \"2017-01-15T10:25\", \"2017-01-20T08:25\", \"2017-01-25T08:25\"), 2),                 VISITNUM=rep(1:5,2),                 VISIT=rep(c(\"Screening\", \"Cycle 1\", \"Cycle 2\",                 \"Cycle 3\",\"UNschedUled\"),2),                 EGSTAT=\"\",                 stringsAsFactors=FALSE) check_eg_egdtc_visit_ordinal_error(EG) #> [1] TRUE  # Cases with earler datetime EG$EGDTC[EG$USUBJID == 101 & EG$VISIT == \"Cycle 3\"] <- \"2017-01-10T08:25\" EG$EGDTC[EG$USUBJID == 102 & EG$VISIT == \"Cycle 1\"] <- \"2017-01-01T06:25\" check_eg_egdtc_visit_ordinal_error(EG) #> [1] FALSE #> attr(,\"msg\") #> [1] \"EG has 2 records with Possible EGDTC data entry error. \" #> attr(,\"data\") #>   USUBJID VISITNUM   VISIT            EGDTC EGSTAT     last.vis.dtc  last.vis #> 1     101        4 Cycle 3 2017-01-10T08:25        2017-01-15T10:25   Cycle 2 #> 2     102        2 Cycle 1 2017-01-01T06:25        2017-01-01T08:25 Screening #>   visit.order                       check.flag #> 1           4 Datetime earlier than last Visit #> 2           2 Datetime earlier than last Visit  # Cases with duplicated datetime EG$EGDTC[EG$USUBJID == 101 & EG$VISIT == \"Cycle 3\"] <- \"2017-01-15T10:25\" EG$EGDTC[EG$USUBJID == 102 & EG$VISIT == \"Cycle 2\"] <- \"2017-01-01T06:25\" check_eg_egdtc_visit_ordinal_error(EG) #> [1] FALSE #> attr(,\"msg\") #> [1] \"EG has 1 records with Possible EGDTC data entry error. \" #> attr(,\"data\") #>   USUBJID VISITNUM   VISIT            EGDTC EGSTAT     last.vis.dtc  last.vis #> 1     102        2 Cycle 1 2017-01-01T06:25        2017-01-01T08:25 Screening #>   visit.order                       check.flag #> 1           2 Datetime earlier than last Visit  # Not checking duplicates EG<- data.frame(USUBJID = rep(\"101\",6),                 EGDTC=rep(\"2017-01-01T08:25\", 6),                 VISITNUM=rep(1:2,3),                 VISIT=rep(\"Screening\",6),                 EGSTAT=\"\",                 stringsAsFactors=FALSE)  check_eg_egdtc_visit_ordinal_error(EG) #> [1] TRUE"},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ex_dup.html","id":null,"dir":"Reference","previous_headings":"","what":"Check for duplicate EX records — check_ex_dup","title":"Check for duplicate EX records — check_ex_dup","text":"check looks duplicate treatment records EX","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ex_dup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check for duplicate EX records — check_ex_dup","text":"","code":"check_ex_dup(EX)"},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ex_dup.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check for duplicate EX records — check_ex_dup","text":"EX Exposure SDTM dataset variables USUBJID, EXTRT, EXDOSE, EXSTDTC, EXSTDTC. VISIT optional.","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ex_dup.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check for duplicate EX records — check_ex_dup","text":"boolean value check failed passed 'msg' attribute test failed","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ex_dup.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Check for duplicate EX records — check_ex_dup","text":"Fang Yuan","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ex_dup.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check for duplicate EX records — check_ex_dup","text":"","code":"EX <- data.frame(  USUBJID = rep(1,2),  EXTRT = rep(1,2),  EXDOSE = rep(1,2),  EXSTDTC = rep(1,2),  EXOCCUR = \"Y\" ) check_ex_dup(EX) #> [1] FALSE #> attr(,\"msg\") #> [1] \"There are 1 duplicated exposure records. \" #> attr(,\"data\") #>   USUBJID EXTRT EXDOSE EXSTDTC #> 1       1     1      1       1  EX$EXOCCUR <- NULL  check_ex_dup(EX) #> [1] FALSE #> attr(,\"msg\") #> [1] \"There are 1 duplicated exposure records. \" #> attr(,\"data\") #>   USUBJID EXTRT EXDOSE EXSTDTC #> 1       1     1      1       1  EX$EXDOSE <- NULL  check_ex_dup(EX) #> [1] FALSE #> attr(,\"msg\") #> [1] \"EX is missing the variable: EXDOSE\"  # test with sample data without duplicates  EX <- data.frame( USUBJID = 1:2, EXTRT = 1:2, EXDOSE = 1:2, EXSTDTC = 1:2, EXOCCUR = \"Y\" )  check_ex_dup(EX) #> [1] TRUE  EX = rbind(EX,EX)  check_ex_dup(EX) #> [1] FALSE #> attr(,\"msg\") #> [1] \"There are 2 duplicated exposure records. \" #> attr(,\"data\") #>   USUBJID EXTRT EXDOSE EXSTDTC #> 1       1     1      1       1 #> 2       2     2      2       2  # check non existing vars  EX$EXTRT <- NULL EX$EXOCCUR <- NULL  check_ex_dup(EX) #> [1] FALSE #> attr(,\"msg\") #> [1] \"EX is missing the variable: EXTRT\""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ex_exdose_exoccur.html","id":null,"dir":"Reference","previous_headings":"","what":"Check for Missing EXDOSE. — check_ex_exdose_exoccur","title":"Check for Missing EXDOSE. — check_ex_exdose_exoccur","text":"checks looks missing EXDOSE values EXOCCUR=\"Y\" EXOCCUR exist. specified drug/treatment, drugs/treatments dataset","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ex_exdose_exoccur.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check for Missing EXDOSE. — check_ex_exdose_exoccur","text":"","code":"check_ex_exdose_exoccur(EX, drug = NULL)"},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ex_exdose_exoccur.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check for Missing EXDOSE. — check_ex_exdose_exoccur","text":"EX Exposure SDTM dataset variables USUBJID, EXTRT, EXSTDTC, EXDOSE drug Drug name EXTRT; used subset dataset. Default value NULL (.e. filtering drug)","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ex_exdose_exoccur.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check for Missing EXDOSE. — check_ex_exdose_exoccur","text":"Boolean value whether check passed failed, 'msg' attribute test failed","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ex_exdose_exoccur.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Check for Missing EXDOSE. — check_ex_exdose_exoccur","text":"Harris, Pasha Foroudi","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ex_exdose_exoccur.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check for Missing EXDOSE. — check_ex_exdose_exoccur","text":"","code":"EX <- data.frame(  USUBJID = 1:3,  EXSEQ   = 1:3,  EXSTDTC = 1:3,  EXTRT   = c(1,2,NA),  EXOCCUR = \"Y\",  EXDOSE  = 1:3,  VISIT = c(\"CYCLE 1 DAY 1\", \"CYCLE 2 DAY 1\", \"CYCLE 3 DAY 1\") )  check_ex_exdose_exoccur(EX) #> [1] TRUE  EX$EXDOSE[3]=NA check_ex_exdose_exoccur(EX) #> [1] FALSE #> attr(,\"msg\") #> [1] \"EX has 1 record(s) with missing EXDOSE when EXOCCUR = 'Y' (or EXOCCUR does not exist). \" #> attr(,\"data\") #>   USUBJID EXTRT         VISIT EXSTDTC EXOCCUR EXDOSE #> 1       3    NA CYCLE 3 DAY 1       3       Y     NA  EX$EXVISIT = NULL check_ex_exdose_exoccur(EX) #> [1] FALSE #> attr(,\"msg\") #> [1] \"EX has 1 record(s) with missing EXDOSE when EXOCCUR = 'Y' (or EXOCCUR does not exist). \" #> attr(,\"data\") #>   USUBJID EXTRT         VISIT EXSTDTC EXOCCUR EXDOSE #> 1       3    NA CYCLE 3 DAY 1       3       Y     NA  EX$EXDOSE = NULL check_ex_exdose_exoccur(EX) #> [1] FALSE #> attr(,\"msg\") #> [1] \"EX is missing the variable: EXDOSE\""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ex_exdose_pos_exoccur_no.html","id":null,"dir":"Reference","previous_headings":"","what":"Check for EXDOSE>0 When EXOCCUR is not ","title":"Check for EXDOSE>0 When EXOCCUR is not ","text":"checks looks EXDOSE values greater 0 EXOCCUR \"Y\". specified drug/treatment, drugs/treatments dataset.","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ex_exdose_pos_exoccur_no.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check for EXDOSE>0 When EXOCCUR is not ","text":"","code":"check_ex_exdose_pos_exoccur_no(EX, drug = NULL)"},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ex_exdose_pos_exoccur_no.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check for EXDOSE>0 When EXOCCUR is not ","text":"EX Exposure SDTM dataset variables USUBJID, EXTRT, EXSTDTC, EXOCCUR EXDOSE drug Drug name EXTRT; used subset dataset. Default value NULL (.e. filtering drug)","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ex_exdose_pos_exoccur_no.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check for EXDOSE>0 When EXOCCUR is not ","text":"Boolean value whether check passed failed, 'msg' attribute test failed","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ex_exdose_pos_exoccur_no.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Check for EXDOSE>0 When EXOCCUR is not ","text":"Sara Bodach","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ex_exdose_pos_exoccur_no.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check for EXDOSE>0 When EXOCCUR is not ","text":"","code":"EX <- data.frame(  USUBJID = 1:5,  EXSTDTC = rep(\"2017-01-01\",5),  EXTRT   = c(rep(\"TRT A\",2),rep(\"TRT B\",3)),  EXOCCUR = c(\".\",\"\", \"N\", \"N\", \"Y\"),  EXDOSE  = 0:4,  VISIT = \"VISIT 1\",  stringsAsFactors = FALSE )  check_ex_exdose_pos_exoccur_no(EX) #> [1] FALSE #> attr(,\"msg\") #> [1] \"There are 3 patients with positive dose amount (EXDOSE>0) when occurrence (EXOCCUR) is not 'Y'. \" #> attr(,\"data\") #>   USUBJID EXTRT    EXSTDTC EXOCCUR EXDOSE   VISIT #> 1       2 TRT A 2017-01-01              1 VISIT 1 #> 2       3 TRT B 2017-01-01       N      2 VISIT 1 #> 3       4 TRT B 2017-01-01       N      3 VISIT 1  check_ex_exdose_pos_exoccur_no(EX, drug = \"TRT A\") #> [1] FALSE #> attr(,\"msg\") #> [1] \"There are 1 patients with positive dose amount (EXDOSE>0) when occurrence (EXOCCUR) for TRT A is not 'Y'. \" #> attr(,\"data\") #>   USUBJID EXTRT    EXSTDTC EXOCCUR EXDOSE   VISIT #> 1       2 TRT A 2017-01-01              1 VISIT 1 check_ex_exdose_pos_exoccur_no(EX, drug = \"TRT B\") #> [1] FALSE #> attr(,\"msg\") #> [1] \"There are 2 patients with positive dose amount (EXDOSE>0) when occurrence (EXOCCUR) for TRT B is not 'Y'. \" #> attr(,\"data\") #>   USUBJID EXTRT    EXSTDTC EXOCCUR EXDOSE   VISIT #> 1       3 TRT B 2017-01-01       N      2 VISIT 1 #> 2       4 TRT B 2017-01-01       N      3 VISIT 1  EX$EXDOSE = NULL  check_ex_exdose_pos_exoccur_no(EX) #> [1] FALSE #> attr(,\"msg\") #> [1] \"EX is missing the variable: EXDOSE\""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ex_exdosu.html","id":null,"dir":"Reference","previous_headings":"","what":"Check for missing EXDOSU records — check_ex_exdosu","title":"Check for missing EXDOSU records — check_ex_exdosu","text":"check looks missing EXODOSU values valid doses","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ex_exdosu.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check for missing EXDOSU records — check_ex_exdosu","text":"","code":"check_ex_exdosu(EX)"},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ex_exdosu.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check for missing EXDOSU records — check_ex_exdosu","text":"EX Exposure SDTM dataset variables USUBJID,EXTRT,EXSTDTC,EXDOSU","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ex_exdosu.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check for missing EXDOSU records — check_ex_exdosu","text":"boolean value check failed passed 'msg' attribute test failed","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ex_exdosu.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Check for missing EXDOSU records — check_ex_exdosu","text":"Jen Chen","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ex_exdosu.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check for missing EXDOSU records — check_ex_exdosu","text":"","code":"EX <- data.frame(  USUBJID = 1:10,  EXTRT = 1:10,  EXSTDTC = 1:10,  EXDOSE = 1:10,  EXOCCUR = as.character(c(rep(\"Y\",5),rep(\"N\",5))),  EXDOSU = as.character(rep(\"mg\",10)) )  EX$EXDOSU[1] = \"\" EX$EXDOSU[2] = \"NA\" EX$EXDOSU[3] = NA  check_ex_exdosu(EX) #> [1] FALSE #> attr(,\"msg\") #> [1] \"There are 3 records with missing dose units. \" #> attr(,\"data\") #>   USUBJID EXTRT EXDOSE EXSTDTC EXDOSU #> 1       1     1      1       1        #> 2       2     2      2       2     NA #> 3       3     3      3       3   <NA>  EX$EXSTDTC = NULL  check_ex_exdosu(EX) #> [1] FALSE #> attr(,\"msg\") #> [1] \"EX is missing the variable: EXSTDTC\""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ex_exoccur_exdose_exstdtc.html","id":null,"dir":"Reference","previous_headings":"","what":"Check for Invalid EXDOSE (Dose per Administration) and\nMissing/Incomplete EXSTDTC (Start Date) Values for valid exposures — check_ex_exoccur_exdose_exstdtc","title":"Check for Invalid EXDOSE (Dose per Administration) and\nMissing/Incomplete EXSTDTC (Start Date) Values for valid exposures — check_ex_exoccur_exdose_exstdtc","text":"check looks valid exposures (EXOCCUR=Y exist) EXDOSE (dose per administration) > 0 (>= 0 case placebo) /EXSTDTC (start date/treatment date) missing incomplete EX (exposure) SDTM domain","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ex_exoccur_exdose_exstdtc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check for Invalid EXDOSE (Dose per Administration) and\nMissing/Incomplete EXSTDTC (Start Date) Values for valid exposures — check_ex_exoccur_exdose_exstdtc","text":"","code":"check_ex_exoccur_exdose_exstdtc(EX)"},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ex_exoccur_exdose_exstdtc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check for Invalid EXDOSE (Dose per Administration) and\nMissing/Incomplete EXSTDTC (Start Date) Values for valid exposures — check_ex_exoccur_exdose_exstdtc","text":"EX Exposure SDTM dataset variables USUBJID, VISIT, VISITNUM, EXOCCUR, EXTRT, EXDOSE, EXSTDTC EXENDTC","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ex_exoccur_exdose_exstdtc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check for Invalid EXDOSE (Dose per Administration) and\nMissing/Incomplete EXSTDTC (Start Date) Values for valid exposures — check_ex_exoccur_exdose_exstdtc","text":"Boolean value whether check passed failed, 'msg' attribute check failed","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ex_exoccur_exdose_exstdtc.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Check for Invalid EXDOSE (Dose per Administration) and\nMissing/Incomplete EXSTDTC (Start Date) Values for valid exposures — check_ex_exoccur_exdose_exstdtc","text":"Sara Bodach","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ex_exoccur_exdose_exstdtc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check for Invalid EXDOSE (Dose per Administration) and\nMissing/Incomplete EXSTDTC (Start Date) Values for valid exposures — check_ex_exoccur_exdose_exstdtc","text":"","code":"EX <- data.frame(USUBJID = LETTERS[1:5],                  VISIT = paste0(\"Visit \", 1:5),                  VISITNUM = 1:5,                  EXOCCUR = c('Y', rep('', 4)),                  EXTRT = LETTERS[1:5],                  EXDOSE = 1:5,                  EXSTDTC = c('2010-01-01', rep('', 4)),                  EXENDTC = c('2010-01-01', rep('', 4)),                  stringsAsFactors = FALSE)  EX$EXOCCUR[2] <- 'Y' EX$EXSTDTC[2] <- '2011' EX$EXDOSE[1] <- 0  check_ex_exoccur_exdose_exstdtc(EX) #> [1] FALSE #> attr(,\"msg\") #> [1] \"There are 2 EX records with invalid dosing amount or missing full treatment administration date. \" #> attr(,\"data\") #>   USUBJID   VISIT VISITNUM EXOCCUR EXTRT EXDOSE    EXSTDTC    EXENDTC #> 1       A Visit 1        1       Y     A      0 2010-01-01 2010-01-01 #> 2       B Visit 2        2       Y     B      2       2011             EX$VISIT <- NULL  check_ex_exoccur_exdose_exstdtc(EX) #> [1] FALSE #> attr(,\"msg\") #> [1] \"EX is missing the variable: VISIT\""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ex_exoccur_mis_exdose_nonmis.html","id":null,"dir":"Reference","previous_headings":"","what":"Check for missing EXOCCUR but EXDOSE not missing — check_ex_exoccur_mis_exdose_nonmis","title":"Check for missing EXOCCUR but EXDOSE not missing — check_ex_exoccur_mis_exdose_nonmis","text":"Checks exposure records missing EXOCCUR EXDOSE missing","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ex_exoccur_mis_exdose_nonmis.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check for missing EXOCCUR but EXDOSE not missing — check_ex_exoccur_mis_exdose_nonmis","text":"","code":"check_ex_exoccur_mis_exdose_nonmis(EX)"},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ex_exoccur_mis_exdose_nonmis.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check for missing EXOCCUR but EXDOSE not missing — check_ex_exoccur_mis_exdose_nonmis","text":"EX Exposure dataframe variables USUBJID, EXTRT, EXDOSE, EXOCCUR, EXSTDTC","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ex_exoccur_mis_exdose_nonmis.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check for missing EXOCCUR but EXDOSE not missing — check_ex_exoccur_mis_exdose_nonmis","text":"boolean value check failed passed 'msg' attribute test failed","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ex_exoccur_mis_exdose_nonmis.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Check for missing EXOCCUR but EXDOSE not missing — check_ex_exoccur_mis_exdose_nonmis","text":"Iris Zhao","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ex_exoccur_mis_exdose_nonmis.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check for missing EXOCCUR but EXDOSE not missing — check_ex_exoccur_mis_exdose_nonmis","text":"","code":"EX <- data.frame(  USUBJID = 1:10,  EXTRT = rep(1,10),  EXOCCUR = c(rep(1,2),rep(NA,4),rep(2,4)),  EXDOSE = c(rep(NA,4),rep(1,6)),  EXSTDTC = 1:10 )  EX$EXOCCUR[6]=\"NA\" EX$EXOCCUR[7]=\"\" EX$EXOCCUR[8]=NA  check_ex_exoccur_mis_exdose_nonmis(EX) #> [1] FALSE #> attr(,\"msg\") #> [1] \"There are 4 EX records with EXOCCUR missing but EXDOSE not missing. \" #> attr(,\"data\") #>   USUBJID EXTRT EXOCCUR EXDOSE EXSTDTC #> 1       5     1    <NA>      1       5 #> 2       6     1      NA      1       6 #> 3       7     1              1       7 #> 4       8     1    <NA>      1       8"},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ex_exstdtc_after_dd.html","id":null,"dir":"Reference","previous_headings":"","what":"Check for EX dates occurring after death date — check_ex_exstdtc_after_dd","title":"Check for EX dates occurring after death date — check_ex_exstdtc_after_dd","text":"check looks EX dates occur death date","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ex_exstdtc_after_dd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check for EX dates occurring after death date — check_ex_exstdtc_after_dd","text":"","code":"check_ex_exstdtc_after_dd(AE, DS, EX)"},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ex_exstdtc_after_dd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check for EX dates occurring after death date — check_ex_exstdtc_after_dd","text":"AE Adverse Event SDTM dataset variables USUBJID, AEDTHDTC, AESTDTC, AEDECOD, AETERM DS Disposition SDTM dataset variables USUBJID, DSSTDTC, DSDECOD, DSTERM EX Exposure SDTM dataset variables USUBJID, EXSTDTC, EXTRT, EXDOSE","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ex_exstdtc_after_dd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check for EX dates occurring after death date — check_ex_exstdtc_after_dd","text":"Boolean value whether check passed failed, 'msg' attribute check failed","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ex_exstdtc_after_dd.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Check for EX dates occurring after death date — check_ex_exstdtc_after_dd","text":"Nina Ting Qi","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ex_exstdtc_after_dd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check for EX dates occurring after death date — check_ex_exstdtc_after_dd","text":"","code":"AE <- data.frame(STUDYID = 1:5, USUBJID = LETTERS[1:5],                  AEDTHDTC = c(rep(\"\", 4), \"2016-01-01\"),                  AESTDTC = rep(\"2016-01-01\", 5),                  AEDECOD = LETTERS[1:5], AETERM = LETTERS[1:5],                  stringsAsFactors = FALSE)  DS <- data.frame(STUDYID = 1:5, USUBJID = LETTERS[1:5],                  DSSTDTC = rep(\"2016-01-02\", 5),                  DSDECOD = c(LETTERS[1:4], \"death\"),                  DSTERM = letters[1:5],                  stringsAsFactors = FALSE)  EX <- data.frame(STUDYID = 1:5, USUBJID = LETTERS[1:5],                  EXSTDTC = rep(\"2015-12-31\", 5),                  EXTRT = LETTERS[1:5],                  EXDOSE = 1:5,                  stringsAsFactors = FALSE)  check_ex_exstdtc_after_dd(AE, DS, EX) #> [1] TRUE  EX$EXSTDTC[1] <- \"2016-01-03\" EX$USUBJID[1] <- EX$USUBJID[5]  check_ex_exstdtc_after_dd(AE, DS, EX) #> [1] FALSE #> attr(,\"msg\") #> [1] \"Patient(s) with EX occurring after death date. \" #> attr(,\"data\") #>   USUBJID    EXSTDTC   AEDTHDTC    DSSTDTC EARLIEST_DTHDTC #> 1       E 2016-01-03 2016-01-01 2016-01-02      2016-01-01"},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ex_exstdtc_after_exendtc.html","id":null,"dir":"Reference","previous_headings":"","what":"Check that all exposure start dates are on or before exposure end dates — check_ex_exstdtc_after_exendtc","title":"Check that all exposure start dates are on or before exposure end dates — check_ex_exstdtc_after_exendtc","text":"check identifies EXSTDTC values EXENDTC values","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ex_exstdtc_after_exendtc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check that all exposure start dates are on or before exposure end dates — check_ex_exstdtc_after_exendtc","text":"","code":"check_ex_exstdtc_after_exendtc(EX)"},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ex_exstdtc_after_exendtc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check that all exposure start dates are on or before exposure end dates — check_ex_exstdtc_after_exendtc","text":"EX Exposure SDTM dataset variables USUBJID,EXTRT,EXSTDTC,EXENDTC","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ex_exstdtc_after_exendtc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check that all exposure start dates are on or before exposure end dates — check_ex_exstdtc_after_exendtc","text":"boolean value check failed passed 'msg' attribute test failed","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ex_exstdtc_after_exendtc.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Check that all exposure start dates are on or before exposure end dates — check_ex_exstdtc_after_exendtc","text":"Sara Bodach","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ex_exstdtc_after_exendtc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check that all exposure start dates are on or before exposure end dates — check_ex_exstdtc_after_exendtc","text":"","code":"EX <- data.frame(  STUDYID = 1,  USUBJID = 1:12,  EXTRT = \"SOME DRUG\",  EXSTDTC = c(\"2017-01-01\",\"2017-01-03\",\"2017-01-01T14:26\",\"2017\",\"2017-02\",\"2017\"      ,\"\"    ,              \"2017\"   ,\"2017-01-01T14:26\",\"2017-01-01T14:26\",\"2017-01-01T14\",\"2017-01-01T14:26:02\")              ,  EXENDTC = c(\"2017-01-01\",\"2017-01-02\",\"2017-01-01T14:25\",\"2015\",\"2017-01\",\"2016-01-01\",\"2000\",              \"2017-02\",\"2017-01-01\"      ,\"2017-01\",\"2017-01-01T13\",\"2017-01-01T14:26:01\")              ,  EXOCCUR = \"Y\",  VISIT = \"CYCLE 1 DAY 1\",  stringsAsFactors=FALSE )  check_ex_exstdtc_after_exendtc(EX) #> [1] FALSE #> attr(,\"msg\") #> [1] \"EX has 6 record(s) with EXSTDTC after EXENDTC. \" #> attr(,\"data\") #>   USUBJID     EXTRT          EXSTDTC          EXENDTC         VISIT EXOCCUR #> 1       2 SOME DRUG       2017-01-03       2017-01-02 CYCLE 1 DAY 1       Y #> 2       3 SOME DRUG 2017-01-01T14:26 2017-01-01T14:25 CYCLE 1 DAY 1       Y #> 3       4 SOME DRUG             2017             2015 CYCLE 1 DAY 1       Y #> 4       5 SOME DRUG          2017-02          2017-01 CYCLE 1 DAY 1       Y #> 5       6 SOME DRUG             2017       2016-01-01 CYCLE 1 DAY 1       Y #> 6      11 SOME DRUG    2017-01-01T14    2017-01-01T13 CYCLE 1 DAY 1       Y  EX$EXOCCUR <- NULL EX$VISIT <- NULL check_ex_exstdtc_after_exendtc(EX) #> [1] FALSE #> attr(,\"msg\") #> [1] \"EX has 6 record(s) with EXSTDTC after EXENDTC. \" #> attr(,\"data\") #>   USUBJID     EXTRT          EXSTDTC          EXENDTC #> 1       2 SOME DRUG       2017-01-03       2017-01-02 #> 2       3 SOME DRUG 2017-01-01T14:26 2017-01-01T14:25 #> 3       4 SOME DRUG             2017             2015 #> 4       5 SOME DRUG          2017-02          2017-01 #> 5       6 SOME DRUG             2017       2016-01-01 #> 6      11 SOME DRUG    2017-01-01T14    2017-01-01T13  EX$EXTRT <- NULL check_ex_exstdtc_after_exendtc(EX) #> [1] FALSE #> attr(,\"msg\") #> [1] \"EX is missing the variable: EXTRT\""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ex_exstdtc_visit_ordinal_error.html","id":null,"dir":"Reference","previous_headings":"","what":"Check that all EX start dates are earlier than last\nvisit's (possible datetime data entry error) — check_ex_exstdtc_visit_ordinal_error","title":"Check that all EX start dates are earlier than last\nvisit's (possible datetime data entry error) — check_ex_exstdtc_visit_ordinal_error","text":"check identifies EXSTDTC values earlier last visit's. Unscheduled visits excluded.","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ex_exstdtc_visit_ordinal_error.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check that all EX start dates are earlier than last\nvisit's (possible datetime data entry error) — check_ex_exstdtc_visit_ordinal_error","text":"","code":"check_ex_exstdtc_visit_ordinal_error(EX)"},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ex_exstdtc_visit_ordinal_error.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check that all EX start dates are earlier than last\nvisit's (possible datetime data entry error) — check_ex_exstdtc_visit_ordinal_error","text":"EX Exposure SDTM dataset variables USUBJID, EXTRT, VISITNUM, VISIT, EXDTC","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ex_exstdtc_visit_ordinal_error.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check that all EX start dates are earlier than last\nvisit's (possible datetime data entry error) — check_ex_exstdtc_visit_ordinal_error","text":"boolean value check failed passed 'msg' attribute test failed","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ex_exstdtc_visit_ordinal_error.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Check that all EX start dates are earlier than last\nvisit's (possible datetime data entry error) — check_ex_exstdtc_visit_ordinal_error","text":"James Zhang","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ex_exstdtc_visit_ordinal_error.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check that all EX start dates are earlier than last\nvisit's (possible datetime data entry error) — check_ex_exstdtc_visit_ordinal_error","text":"","code":"# no case EX <- data.frame(USUBJID = 101:102,                 EXTRT = rep(c(\"A\", \"B\"), 5),                 EXSTDTC = rep(c(\"2017-01-01T08:25\", \"2017-01-05T09:25\",                  \"2017-01-15T10:25\",\"2017-01-20T08:25\",\"2017-01-25T08:25\"), 2),                 VISITNUM = rep(1:5,2),                 VISIT = rep(c(\"Cycle 1\", \"Cycle 2\", \"Cycle 3\", \"Cycle 4\", \"uNscheDuledd\"), 2),                 stringsAsFactors = FALSE) check_ex_exstdtc_visit_ordinal_error(EX) #> [1] TRUE  # adding cases with earler date EX$EXSTDTC[EX$USUBJID == 101 & EX$VISIT == \"Cycle 4\"] <- \"2017-01-10T08:25\" EX$EXSTDTC[EX$USUBJID == 102 & EX$VISIT == \"Cycle 2\"] <- \"2017-01-01T06:25\" check_ex_exstdtc_visit_ordinal_error(EX) #> [1] FALSE #> attr(,\"msg\") #> [1] \"EX has 2 records with Possible EXSTDTC data entry error. \" #> attr(,\"data\") #>   USUBJID EXTRT VISITNUM   VISIT          EXSTDTC     last.vis.dtc last.vis #> 1     101     A        4 Cycle 4 2017-01-10T08:25 2017-01-15T10:25  Cycle 3 #> 2     102     B        2 Cycle 2 2017-01-01T06:25 2017-01-01T08:25  Cycle 1 #>   visit.order                       check.flag #> 1           4 Datetime earlier than last Visit #> 2           2 Datetime earlier than last Visit  # adding cases with duplicated date EX$EXSTDTC[EX$USUBJID == 101 & EX$VISIT == \"Cycle 5\"] <- \"2017-01-10T08:25\" EX$EXSTDTC[EX$USUBJID == 102 & EX$VISIT == \"Cycle 3\"] <- \"2017-01-01T06:25\" check_ex_exstdtc_visit_ordinal_error(EX) #> [1] FALSE #> attr(,\"msg\") #> [1] \"EX has 2 records with Possible EXSTDTC data entry error. \" #> attr(,\"data\") #>   USUBJID EXTRT VISITNUM   VISIT          EXSTDTC     last.vis.dtc last.vis #> 1     101     A        4 Cycle 4 2017-01-10T08:25 2017-01-15T10:25  Cycle 3 #> 2     102     B        2 Cycle 2 2017-01-01T06:25 2017-01-01T08:25  Cycle 1 #>   visit.order                       check.flag #> 1           4 Datetime earlier than last Visit #> 2           2 Datetime earlier than last Visit"},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ex_extrt_exoccur.html","id":null,"dir":"Reference","previous_headings":"","what":"Check for EX records where EXTRT is missing — check_ex_extrt_exoccur","title":"Check for EX records where EXTRT is missing — check_ex_extrt_exoccur","text":"check looks EX records EXTRT missing EXOCCUR=Y (EXOCCUR exist) returns data frame","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ex_extrt_exoccur.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check for EX records where EXTRT is missing — check_ex_extrt_exoccur","text":"","code":"check_ex_extrt_exoccur(EX)"},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ex_extrt_exoccur.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check for EX records where EXTRT is missing — check_ex_extrt_exoccur","text":"EX Exposure domain variables USUBJID, EXSTDTC, EXTRT, EXDOSE","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ex_extrt_exoccur.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Check for EX records where EXTRT is missing — check_ex_extrt_exoccur","text":"Betty Wang","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ex_extrt_exoccur.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check for EX records where EXTRT is missing — check_ex_extrt_exoccur","text":"","code":"EX <- data.frame( USUBJID = 1:10, EXTRT = 1:10, EXOCCUR = c(rep(\"Y\",5), rep(\"\",5)), EXSTDTC = \"2016-01-01\", EXDOSE = 1:10, stringsAsFactors=FALSE )  EX$EXTRT[1]=\"\" EX$EXTRT[2]=\"NA\" EX$EXTRT[3]=NA EX$EXTRT[6]=\"\" EX$EXTRT[7]=\"NA\" EX$EXTRT[8]=NA  check_ex_extrt_exoccur(EX) #> [1] FALSE #> attr(,\"msg\") #> [1] \"Patients with Missing EXTRT where EXOCCUR=Y\" #> attr(,\"data\") #>   USUBJID    EXSTDTC EXTRT EXOCCUR EXDOSE #> 1       1 2016-01-01             Y      1 #> 2       2 2016-01-01    NA       Y      2 #> 3       3 2016-01-01  <NA>       Y      3  EX$EXOCCUR=NULL  check_ex_extrt_exoccur(EX) #> [1] FALSE #> attr(,\"msg\") #> [1] \"Patients with Missing EXTRT. \" #> attr(,\"data\") #>   USUBJID    EXSTDTC EXTRT EXDOSE #> 1       1 2016-01-01            1 #> 2       2 2016-01-01    NA      2 #> 3       3 2016-01-01  <NA>      3 #> 4       6 2016-01-01            6 #> 5       7 2016-01-01    NA      7 #> 6       8 2016-01-01  <NA>      8"},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ex_infusion_exstdtc_exendtc.html","id":null,"dir":"Reference","previous_headings":"","what":"Check that an infusion drug has same start/end exposure dates, also including missing start/end dates — check_ex_infusion_exstdtc_exendtc","title":"Check that an infusion drug has same start/end exposure dates, also including missing start/end dates — check_ex_infusion_exstdtc_exendtc","text":"check identifies infusion drug EXSTDTC EXENDTC dateparts. time available dates, also check end time start time. Missing start/end dates also included.","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ex_infusion_exstdtc_exendtc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check that an infusion drug has same start/end exposure dates, also including missing start/end dates — check_ex_infusion_exstdtc_exendtc","text":"","code":"check_ex_infusion_exstdtc_exendtc(EX)"},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ex_infusion_exstdtc_exendtc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check that an infusion drug has same start/end exposure dates, also including missing start/end dates — check_ex_infusion_exstdtc_exendtc","text":"EX Exposure SDTM dataset variables USUBJID,EXTRT,EXSTDTC,EXENDTC,EXROUTE","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ex_infusion_exstdtc_exendtc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check that an infusion drug has same start/end exposure dates, also including missing start/end dates — check_ex_infusion_exstdtc_exendtc","text":"boolean value check failed passed 'msg' attribute test failed","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ex_infusion_exstdtc_exendtc.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Check that an infusion drug has same start/end exposure dates, also including missing start/end dates — check_ex_infusion_exstdtc_exendtc","text":"Anastasiia Khmelnytska, Stella Banjo(HackR 2021)","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ex_infusion_exstdtc_exendtc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check that an infusion drug has same start/end exposure dates, also including missing start/end dates — check_ex_infusion_exstdtc_exendtc","text":"","code":"EX <- data.frame(  STUDYID = 1,  USUBJID = 1:12,  EXTRT = \"SOME DRUG\",  EXROUTE = \"INTRAVENOUS\",  EXSTDTC = c(\"2017-01-01\",\"2017-01-02\",\"2017-01-01T14:36\",\"2015\",\"2017-02\",\"2017\"      ,\"\"    ,              \"2017\"   ,\"2017-01-01T14:26\",\"2017-01-01T14:26\",\"2017-01-01T14\",\"2017-01-01T14:26:01\")              ,  EXENDTC = c(\"2017-01-01\",\"2017-01-03\",\"2017-01-01T14:35\",\"2017\",\"2017-01\",\"2016-01-01\",\"2000\",              \"2017-02\",\"2017-01-01\"      ,\"2017-01\",\"2017-01-01T13\",\"2017-01-02T14:26:02\")              ,  EXOCCUR = \"Y\",  VISIT = \"CYCLE 1 DAY 1\",  stringsAsFactors=FALSE )   check_ex_infusion_exstdtc_exendtc(EX) #> [1] FALSE #> attr(,\"msg\") #> [1] \"EX has 6 record(s) with issues on date checks and 3 record(s) with issues on date/time checks. \" #> attr(,\"data\") #>   USUBJID     EXTRT             EXSTDTC             EXENDTC         VISIT #> 1       2 SOME DRUG          2017-01-02          2017-01-03 CYCLE 1 DAY 1 #> 2       4 SOME DRUG                2015                2017 CYCLE 1 DAY 1 #> 3       5 SOME DRUG             2017-02             2017-01 CYCLE 1 DAY 1 #> 4       6 SOME DRUG                2017          2016-01-01 CYCLE 1 DAY 1 #> 5       7 SOME DRUG                                    2000 CYCLE 1 DAY 1 #> 6       8 SOME DRUG                2017             2017-02 CYCLE 1 DAY 1 #> 7       3 SOME DRUG    2017-01-01T14:36    2017-01-01T14:35 CYCLE 1 DAY 1 #> 8      11 SOME DRUG       2017-01-01T14       2017-01-01T13 CYCLE 1 DAY 1 #> 9      12 SOME DRUG 2017-01-01T14:26:01 2017-01-02T14:26:02 CYCLE 1 DAY 1 #>                                          check_stat check_flag #> 1             Different Start/End date for Infusion          A #> 2             Different Start/End date for Infusion          A #> 3             Different Start/End date for Infusion          A #> 4             Different Start/End date for Infusion          A #> 5                                Missing Start date          C #> 6             Different Start/End date for Infusion          A #> 7 Same Start/End date but Start time after End time          D #> 8 Same Start/End date but Start time after End time          D #> 9             Different Start/End date for Infusion          A   EX2 <- data.frame(  STUDYID = 1,  USUBJID = 1:4,  EXTRT = \"SOME DRUG\",  EXROUTE = \"INTRAVENOUS\",  EXSTDTC = c(\"2017-01-03\", \"\", \"2017-02-01T14:26\", \"\"),  EXENDTC = c(\"\", \"2017-02-03\", \"\", \"2017-02-02T14:26:02\"),  EXOCCUR = \"Y\",  VISIT = \"CYCLE 1 DAY 1\",  stringsAsFactors = FALSE  )   check_ex_infusion_exstdtc_exendtc(EX2) #> [1] FALSE #> attr(,\"msg\") #> [1] \"EX has 2 record(s) with issues on date checks and 2 record(s) with issues on date/time checks. \" #> attr(,\"data\") #>   USUBJID     EXTRT          EXSTDTC             EXENDTC         VISIT #> 1       1 SOME DRUG       2017-01-03                     CYCLE 1 DAY 1 #> 2       2 SOME DRUG                           2017-02-03 CYCLE 1 DAY 1 #> 3       3 SOME DRUG 2017-02-01T14:26                     CYCLE 1 DAY 1 #> 4       4 SOME DRUG                  2017-02-02T14:26:02 CYCLE 1 DAY 1 #>                check_stat check_flag #> 1        Missing End date          B #> 2      Missing Start date          C #> 3   Missing End date/time          F #> 4 Missing Start date/time          G   EX3 <- data.frame(      STUDYID = 1,      USUBJID = 1:3,      EXTRT = \"SOME DRUG\",      EXROUTE = \"INTRAVENOUS\",      EXSTDTC = c(\"2017-01-01\", \"2017-01-01T14:26\", \"2017-01-01T14:26\"),      EXENDTC = c(\"2017-01-01\", \"2017-01-01\", \"2017-01\"),      EXOCCUR = \"Y\",      VISIT = \"CYCLE 1 DAY 1\",      stringsAsFactors=FALSE  )   check_ex_infusion_exstdtc_exendtc(EX3) #> [1] TRUE"},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ex_visit.html","id":null,"dir":"Reference","previous_headings":"","what":"Check for missing EX.VISIT — check_ex_visit","title":"Check for missing EX.VISIT — check_ex_visit","text":"check looks missing EX.VISIT values EX.EXOCCUR=Y (EX.EXOCCUR exist)","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ex_visit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check for missing EX.VISIT — check_ex_visit","text":"","code":"check_ex_visit(EX)"},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ex_visit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check for missing EX.VISIT — check_ex_visit","text":"EX Exposure SDTM dataset variables USUBJID,EXTRT,EXSTDTC,VISIT","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ex_visit.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Check for missing EX.VISIT — check_ex_visit","text":"Jen Chen","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ex_visit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check for missing EX.VISIT — check_ex_visit","text":"","code":"EX <- data.frame(  USUBJID = 1:3,  EXTRT = 1:3,  EXSTDTC = 1:3,  EXOCCUR = \"Y\",  VISIT = NA )  check_ex_visit(EX) #> [1] FALSE #> attr(,\"msg\") #> [1] \"Total number of records is 3. \" #> attr(,\"data\") #>   USUBJID EXTRT EXSTDTC EXOCCUR VISIT #> 1       1     1       1       Y    NA #> 2       2     2       2       Y    NA #> 3       3     3       3       Y    NA  EX$EXOCCUR=NULL  check_ex_visit(EX) #> [1] FALSE #> attr(,\"msg\") #> [1] \"Total number of records is 3. \" #> attr(,\"data\") #>   USUBJID EXTRT EXSTDTC VISIT #> 1       1     1       1    NA #> 2       2     2       2    NA #> 3       3     3       3    NA  EX$VISIT=NULL  check_ex_visit(EX)# #> [1] FALSE #> attr(,\"msg\") #> [1] \"EX is missing the variable: VISIT\""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_lb_lbdtc_after_dd.html","id":null,"dir":"Reference","previous_headings":"","what":"Check for LB dates occurring after death date — check_lb_lbdtc_after_dd","title":"Check for LB dates occurring after death date — check_lb_lbdtc_after_dd","text":"check looks LB dates occur death date","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_lb_lbdtc_after_dd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check for LB dates occurring after death date — check_lb_lbdtc_after_dd","text":"","code":"check_lb_lbdtc_after_dd(AE, DS, LB)"},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_lb_lbdtc_after_dd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check for LB dates occurring after death date — check_lb_lbdtc_after_dd","text":"AE Adverse Event SDTM dataset variables USUBJID, AEDTHDTC, AESTDTC, AEDECOD, AETERM DS Disposition SDTM dataset variables USUBJID, DSSTDTC, DSDECOD, DSTERM LB Laboratory Test Findings SDTM dataset variables USUBJID, LBDTC, LBTESTCD, LBORRES","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_lb_lbdtc_after_dd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check for LB dates occurring after death date — check_lb_lbdtc_after_dd","text":"Boolean value whether check passed failed, 'msg' attribute check failed","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_lb_lbdtc_after_dd.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Check for LB dates occurring after death date — check_lb_lbdtc_after_dd","text":"Nina Ting Qi","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_lb_lbdtc_after_dd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check for LB dates occurring after death date — check_lb_lbdtc_after_dd","text":"","code":"AE <- data.frame(STUDYID = 1:5, USUBJID = LETTERS[1:5],                  AEDTHDTC = c(rep(\"\", 4), \"2016-01-01\"),                  AESTDTC = rep(\"2016-01-01\", 5),                  AEDECOD = LETTERS[1:5], AETERM = LETTERS[1:5],                  stringsAsFactors = FALSE)  DS <- data.frame(STUDYID = 1:5, USUBJID = LETTERS[1:5],                  DSSTDTC = rep(\"2016-01-02\", 5),                  DSDECOD = c(LETTERS[1:4], \"death\"),                  DSTERM = letters[1:5],                  stringsAsFactors = FALSE)  LB <- data.frame(STUDYID = 1:5, USUBJID = LETTERS[1:5],                  LBDTC = rep(\"2015-12-31\", 5),                  LBTESTCD = letters[1:5],                  LBORRES = 1:5,                  stringsAsFactors = FALSE)  check_lb_lbdtc_after_dd(AE, DS, LB) #> [1] TRUE  LB$LBDTC[1] <- \"2016-01-03\" LB$USUBJID[1] <- LB$USUBJID[5]  check_lb_lbdtc_after_dd(AE, DS, LB) #> [1] FALSE #> attr(,\"msg\") #> [1] \"Patient(s) with LB occurring after death date. \" #> attr(,\"data\") #>   USUBJID      LBDTC LBTESTCD   AEDTHDTC    DSSTDTC EARLIEST_DTHDTC #> 1       E 2016-01-03        a 2016-01-01 2016-01-02      2016-01-01"},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_lb_lbdtc_visit_ordinal_error.html","id":null,"dir":"Reference","previous_headings":"","what":"Check that all LB dates are duplicated or earlier than last\nvisit's (possible datetime data entry error) — check_lb_lbdtc_visit_ordinal_error","title":"Check that all LB dates are duplicated or earlier than last\nvisit's (possible datetime data entry error) — check_lb_lbdtc_visit_ordinal_error","text":"check identifies LBDTC values duplicated earlier last visit's. Records LBSTAT == 'DONE' unscheduled visits (VISIT string \"UNSCHEDU\") treatment discon visits (VISIT string \"TREATMENT OBSERVATION FU COMP EARLY DISC\") excluded.","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_lb_lbdtc_visit_ordinal_error.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check that all LB dates are duplicated or earlier than last\nvisit's (possible datetime data entry error) — check_lb_lbdtc_visit_ordinal_error","text":"","code":"check_lb_lbdtc_visit_ordinal_error(LB)"},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_lb_lbdtc_visit_ordinal_error.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check that all LB dates are duplicated or earlier than last\nvisit's (possible datetime data entry error) — check_lb_lbdtc_visit_ordinal_error","text":"LB SDTM dataset variables USUBJID, VISITNUM, VISIT, LBDTC, LBTESTCD, LBSTAT","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_lb_lbdtc_visit_ordinal_error.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check that all LB dates are duplicated or earlier than last\nvisit's (possible datetime data entry error) — check_lb_lbdtc_visit_ordinal_error","text":"boolean value check failed passed 'msg' attribute test failed","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_lb_lbdtc_visit_ordinal_error.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Check that all LB dates are duplicated or earlier than last\nvisit's (possible datetime data entry error) — check_lb_lbdtc_visit_ordinal_error","text":"Simon Luo","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_lb_lbdtc_visit_ordinal_error.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check that all LB dates are duplicated or earlier than last\nvisit's (possible datetime data entry error) — check_lb_lbdtc_visit_ordinal_error","text":"","code":"# no case LB1 <- data.frame(USUBJID = c(rep(\"101\", 5), rep(\"102\", 5)),                 LBCAT = \"Hematology\",                 LBDTC = rep(c(                 \"2017-01-01T08:25\",                 \"2017-01-05T09:25\",                 \"2017-01-15T10:25\",                 \"2017-01-20T08:25\",                 \"2017-01-25T08:25\"), 2),                 VISITNUM = rep(1:5,2),                 VISIT = rep(c(                 \"Visit 1\",                 \"Visit 2\",                 \"Visit 3\",                 \"UNSCheduled!!!\",                 \"VIsit 5\"), 2),                 LBSTAT = c(rep(\"\", 9), \"NOT DONE\"),                 stringsAsFactors = FALSE)  check_lb_lbdtc_visit_ordinal_error(LB1) #> [1] TRUE  LB2 = LB1 LB2$LBCAT = \"Virology\" LB3 <- rbind(LB1, LB2) check_lb_lbdtc_visit_ordinal_error(LB3) #> [1] TRUE  # adding cases with earlier date LB3$LBDTC[LB3$USUBJID == 101 & LB3$VISIT == \"Visit 3\"] <- \"2016-01-10T08:25\" LB3$LBDTC[LB3$USUBJID == 102 & LB3$VISIT == \"Visit 2\"] <- \"2016-01-01T06:25\" check_lb_lbdtc_visit_ordinal_error(LB = LB3) #> [1] FALSE #> attr(,\"msg\") #> [1] \"LB has 2 record(s) with Possible LBDTC data entry error. \" #> attr(,\"data\") #>   USUBJID VISITNUM   VISIT            LBDTC LBSTAT     last.vis.dtc last.vis #> 1     101        3 Visit 3 2016-01-10T08:25        2017-01-05T09:25  Visit 2 #> 2     102        2 Visit 2 2016-01-01T06:25        2017-01-01T08:25  Visit 1 #>   visit.order                       check.flag #> 1           3 Datetime earlier than last Visit #> 2           2 Datetime earlier than last Visit  # adding cases with duplicated date LB3$LBDTC[LB3$USUBJID == 102 & LB3$VISIT == \"Visit 3\"] <- \"2017-01-15T10:25\" LB3 <- LB3[order(LB3$USUBJID, LB3$VISITNUM, LB3$LBDTC),] check_lb_lbdtc_visit_ordinal_error(LB = LB3) #> [1] FALSE #> attr(,\"msg\") #> [1] \"LB has 2 record(s) with Possible LBDTC data entry error. \" #> attr(,\"data\") #>   USUBJID VISITNUM   VISIT            LBDTC LBSTAT     last.vis.dtc last.vis #> 1     101        3 Visit 3 2016-01-10T08:25        2017-01-05T09:25  Visit 2 #> 2     102        2 Visit 2 2016-01-01T06:25        2017-01-01T08:25  Visit 1 #>   visit.order                       check.flag #> 1           3 Datetime earlier than last Visit #> 2           2 Datetime earlier than last Visit  # check if all NOT DONE LB4 = LB3 LB4$LBSTAT = \"NOT DONE\" check_lb_lbdtc_visit_ordinal_error(LB = LB4) #> [1] FALSE #> attr(,\"msg\") #> [1] \"No lab records when subset to exclude NOT DONE.\"  # check dropping a required variable LB4$LBSTAT = NULL check_lb_lbdtc_visit_ordinal_error(LB = LB4) #> [1] FALSE #> attr(,\"msg\") #> [1] \"LB is missing the variable: LBSTAT\""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_lb_lbstnrlo_lbstnrhi.html","id":null,"dir":"Reference","previous_headings":"","what":"Check for missing lab reference ranges (LBSTNRLO, LBSTNRHI) — check_lb_lbstnrlo_lbstnrhi","title":"Check for missing lab reference ranges (LBSTNRLO, LBSTNRHI) — check_lb_lbstnrlo_lbstnrhi","text":"check looks missing lab reference ranges (LBSTNRLO, LBSTNRHI) standard units numeric result standard unit (LBSTRESN) missing returns data frame","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_lb_lbstnrlo_lbstnrhi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check for missing lab reference ranges (LBSTNRLO, LBSTNRHI) — check_lb_lbstnrlo_lbstnrhi","text":"","code":"check_lb_lbstnrlo_lbstnrhi(DM, LB)"},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_lb_lbstnrlo_lbstnrhi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check for missing lab reference ranges (LBSTNRLO, LBSTNRHI) — check_lb_lbstnrlo_lbstnrhi","text":"DM DM SDTM dataset variable USUBJID, SITEID LB Lab SDTM dataset variables USUBJID, LBTEST, LBSTRESN, LBSTNRLO, LBSTNRHI","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_lb_lbstnrlo_lbstnrhi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check for missing lab reference ranges (LBSTNRLO, LBSTNRHI) — check_lb_lbstnrlo_lbstnrhi","text":"boolean value check failed passed 'msg' attribute test failed","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_lb_lbstnrlo_lbstnrhi.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Check for missing lab reference ranges (LBSTNRLO, LBSTNRHI) — check_lb_lbstnrlo_lbstnrhi","text":"Lei Zhao","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_lb_lbstnrlo_lbstnrhi.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check for missing lab reference ranges (LBSTNRLO, LBSTNRHI) — check_lb_lbstnrlo_lbstnrhi","text":"","code":"LB <- data.frame( USUBJID = \"1\", LBTEST = \"Albumin\", LBSTRESN = 1:10, LBSTNRLO = 1:10, LBSTNRHI = 1:10, stringsAsFactors=FALSE )  LB$LBSTNRLO[1]=\"\" LB$LBSTNRLO[2]=\"NA\" LB$LBSTNRLO[3]=NA LB$LBSTNRHI[3]=\"\" LB$LBSTNRHI[4]=\"NA\" LB$LBSTNRHI[5]=NA  DM <- data.frame( USUBJID = \"1\", SITEID = \"123456\", stringsAsFactors=FALSE )  check_lb_lbstnrlo_lbstnrhi(DM, LB) #> [1] FALSE #> attr(,\"msg\") #> [1] \"Lab tests with missing reference range in standard units when standard numeric result is not missing: 1 LBTEST(s) across 1 unique SITEID(s). \" #> attr(,\"data\") #>   SITEID  LBTEST Freq #> 1 123456 Albumin    5"},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_lb_lbstresc_char.html","id":null,"dir":"Reference","previous_headings":"","what":"Check LBORRES/LBSTRESC populated with number beginning with\ncharacter '>' or '<', which will yield missing AVAL in ADaM and records will be omitted in analyses such as Hy's Law — check_lb_lbstresc_char","title":"Check LBORRES/LBSTRESC populated with number beginning with\ncharacter '>' or '<', which will yield missing AVAL in ADaM and records will be omitted in analyses such as Hy's Law — check_lb_lbstresc_char","text":"check looks missing numeric standardized finding (LBSTRESN) original finding (LBORRES) character standardized finding (LBSTRESC) missing LBORRES/LBSTRESC populated number beginning character '>' '<'","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_lb_lbstresc_char.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check LBORRES/LBSTRESC populated with number beginning with\ncharacter '>' or '<', which will yield missing AVAL in ADaM and records will be omitted in analyses such as Hy's Law — check_lb_lbstresc_char","text":"","code":"check_lb_lbstresc_char(LB)"},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_lb_lbstresc_char.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check LBORRES/LBSTRESC populated with number beginning with\ncharacter '>' or '<', which will yield missing AVAL in ADaM and records will be omitted in analyses such as Hy's Law — check_lb_lbstresc_char","text":"LB Lab SDTM dataset variables USUBJID, LBTEST, LBDTC, LBORRES, LBORRESU, LBSTRESN, LBSTRESC","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_lb_lbstresc_char.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check LBORRES/LBSTRESC populated with number beginning with\ncharacter '>' or '<', which will yield missing AVAL in ADaM and records will be omitted in analyses such as Hy's Law — check_lb_lbstresc_char","text":"boolean value check failed passed 'msg' attribute test failed","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_lb_lbstresc_char.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Check LBORRES/LBSTRESC populated with number beginning with\ncharacter '>' or '<', which will yield missing AVAL in ADaM and records will be omitted in analyses such as Hy's Law — check_lb_lbstresc_char","text":"Vira Vrakina","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_lb_lbstresc_char.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check LBORRES/LBSTRESC populated with number beginning with\ncharacter '>' or '<', which will yield missing AVAL in ADaM and records will be omitted in analyses such as Hy's Law — check_lb_lbstresc_char","text":"","code":"LB <- data.frame(  USUBJID = c(\"Patient 1\",\"Patient 2\",\"Patient 3\"),  LBTEST   = \"Test A\",  LBDTC   = \"2017-01-01\",  LBORRES = c(\"5\",\"3\",\"7\"),  LBORRESU = rep(\"mg\",3),  LBSTRESC  = c(\"5\",\"3\",\"7\"),  LBSTRESN  = c(5,3,7),  stringsAsFactors = FALSE )  check_lb_lbstresc_char(LB) #> [1] TRUE   LB <- data.frame(  USUBJID = c(\"Patient 1\",\"Patient 2\",\"Patient 3\"),  LBTEST   = rep(\"Test A\", 3),  LBDTC   = \"2017-01-01\",  LBORRES = c(\"5\",\"3\",\"<7\"),  LBORRESU = rep(\"mg\",3),  LBSTRESC  = c(\"5\",\"3\",\"<7\"),  LBSTRESN  = c(5,3,NA),  stringsAsFactors = FALSE )  check_lb_lbstresc_char(LB) #> [1] FALSE #> attr(,\"msg\") #> [1] \"LBSTRESN missing but LBORRES/LBSTRESC populated with number beginning with character > or < for 1 record(s). \" #> attr(,\"data\") #>     USUBJID LBTEST      LBDTC LBORRES LBORRESU LBSTRESN LBSTRESC #> 3 Patient 3 Test A 2017-01-01      <7       mg       NA       <7  LB <- data.frame(  USUBJID = c(\"Patient 1\",\"Patient 2\",\"Patient 3\"),  LBTEST   = rep(\"Test A\", 3),  LBDTC   = rep(\"2017-01-01\", 3),  LBORRES = c(\"5\",\"BLQ\",\"<7\"),  LBORRESU = rep(\"mg\",3),  LBSTRESC  = c(\"5\",\"BLQ\",\"<7\"),  LBSTRESN  = c(5,NA,NA),  stringsAsFactors = FALSE )  check_lb_lbstresc_char(LB) #> [1] FALSE #> attr(,\"msg\") #> [1] \"LBSTRESN missing but LBORRES/LBSTRESC populated with number beginning with character > or < for 1 record(s). \" #> attr(,\"data\") #>     USUBJID LBTEST      LBDTC LBORRES LBORRESU LBSTRESN LBSTRESC #> 3 Patient 3 Test A 2017-01-01      <7       mg       NA       <7"},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_lb_lbstresn_missing.html","id":null,"dir":"Reference","previous_headings":"","what":"Check missing standard lab values (LBSTRESN/LBSTRESC) — check_lb_lbstresn_missing","title":"Check missing standard lab values (LBSTRESN/LBSTRESC) — check_lb_lbstresn_missing","text":"check looks missing standardized finding (LBSTRESN/LBSTRESC) original finding (LBORRES) missing","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_lb_lbstresn_missing.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check missing standard lab values (LBSTRESN/LBSTRESC) — check_lb_lbstresn_missing","text":"","code":"check_lb_lbstresn_missing(LB, preproc = identity, ...)"},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_lb_lbstresn_missing.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check missing standard lab values (LBSTRESN/LBSTRESC) — check_lb_lbstresn_missing","text":"LB Lab SDTM dataset variables USUBJID, LBTESTCD, LBDTC, LBORRES, LBORRESU, LBSTRESN, LBSTRESC, VISIT (optional), LBSPID (optional) preproc optional company specific preprocessing script ... arguments passed methods","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_lb_lbstresn_missing.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check missing standard lab values (LBSTRESN/LBSTRESC) — check_lb_lbstresn_missing","text":"boolean value check failed passed 'msg' attribute test failed","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_lb_lbstresn_missing.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Check missing standard lab values (LBSTRESN/LBSTRESC) — check_lb_lbstresn_missing","text":"Madeleine Ma","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_lb_lbstresn_missing.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check missing standard lab values (LBSTRESN/LBSTRESC) — check_lb_lbstresn_missing","text":"","code":"LB <- data.frame(  USUBJID = c(\"Patient 1\",\"Patient 2\",\"Patient 3\"),  LBTEST   = \"Test A\",  LBTESTCD   = \"TA\",  LBDTC   = \"2017-01-01\",  LBORRES = c(\"5\",\"6\",\"7\"),  LBSTRESC = c(\"5\",\"6\",\"7\"),  LBORRESU = rep(\"mg\",3),  LBSTRESN  = c(5,6,NA),  stringsAsFactors=FALSE  )  check_lb_lbstresn_missing(LB) #> [1] TRUE  LB$LBSTRESC[3] = \"\" check_lb_lbstresn_missing(LB) #> [1] FALSE #> attr(,\"msg\") #> [1] \"1 unique patient(s) with 1 lab record(s) with result reported without standard value. \" #> attr(,\"data\") #>     USUBJID LBTESTCD      LBDTC LBORRES LBORRESU LBSTRESN LBSTRESC #> 3 Patient 3       TA 2017-01-01       7       mg       NA           LB$LBSTRESC[1] = \"\" check_lb_lbstresn_missing(LB) #> [1] FALSE #> attr(,\"msg\") #> [1] \"1 unique patient(s) with 1 lab record(s) with result reported without standard value. \" #> attr(,\"data\") #>     USUBJID LBTESTCD      LBDTC LBORRES LBORRESU LBSTRESN LBSTRESC #> 3 Patient 3       TA 2017-01-01       7       mg       NA           LB$VISIT = \"SCREENING\" check_lb_lbstresn_missing(LB) #> [1] FALSE #> attr(,\"msg\") #> [1] \"1 unique patient(s) with 1 lab record(s) with result reported without standard value. \" #> attr(,\"data\") #>     USUBJID LBTESTCD      LBDTC LBORRES LBORRESU LBSTRESN LBSTRESC     VISIT #> 3 Patient 3       TA 2017-01-01       7       mg       NA          SCREENING  LB$LBSPID= \"FORMNAME-R:2/L:2XXXX\" check_lb_lbstresn_missing(LB,preproc=roche_derive_rave_row) #> [1] FALSE #> attr(,\"msg\") #> [1] \"1 unique patient(s) with 1 lab record(s) with result reported without standard value. \" #> attr(,\"data\") #>     USUBJID LBTESTCD      LBDTC LBORRES LBORRESU LBSTRESN LBSTRESC         RAVE #> 3 Patient 3       TA 2017-01-01       7       mg       NA          FORMNAME-R:2 #>       VISIT #> 3 SCREENING  LB$LBSTRESN = NULL check_lb_lbstresn_missing(LB) #> [1] FALSE #> attr(,\"msg\") #> [1] \"LB is missing the variable: LBSTRESN\"  LB$LBSTRESC = NULL check_lb_lbstresn_missing(LB) #> [1] FALSE #> attr(,\"msg\") #> [1] \"LB is missing the variables: LBSTRESN, LBSTRESC\""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_lb_lbstresu.html","id":null,"dir":"Reference","previous_headings":"","what":"Check for missing lab units (LBSTRESU) — check_lb_lbstresu","title":"Check for missing lab units (LBSTRESU) — check_lb_lbstresu","text":"check identifies records original lab values (LBORRES) exist standard lab units (LBSTRESU) populated, excluding qualitative results (LBMETHOD) excluding records LBTESTCD (\"PH\" \"SPGRAV\")","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_lb_lbstresu.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check for missing lab units (LBSTRESU) — check_lb_lbstresu","text":"","code":"check_lb_lbstresu(LB, preproc = identity, ...)"},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_lb_lbstresu.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check for missing lab units (LBSTRESU) — check_lb_lbstresu","text":"LB Lab SDTM dataset variables USUBJID, LBSTRESC, LBSTRESN, LBORRES, LBSTRESU, LBTESTCD, LBDTC, LBMETHOD (optional), LBSPID (optional), VISIT (optional) preproc optional company specific preprocessing script ... arguments passed methods","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_lb_lbstresu.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check for missing lab units (LBSTRESU) — check_lb_lbstresu","text":"boolean value check failed passed 'msg' attribute test failed","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_lb_lbstresu.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Check for missing lab units (LBSTRESU) — check_lb_lbstresu","text":"Iris Zhao","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_lb_lbstresu.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check for missing lab units (LBSTRESU) — check_lb_lbstresu","text":"","code":"LB <- data.frame( USUBJID = 1:10, LBSTRESC = \"5\", LBSTRESN = 1:10, LBORRES = \"5\", LBSTRESU = \"g/L\", LBTESTCD = \"ALB\", LBDTC = 1:10, stringsAsFactors=FALSE )  check_lb_lbstresu(LB) #> [1] TRUE  LB$LBSTRESU[1]=\"\" check_lb_lbstresu(LB) #> [1] FALSE #> attr(,\"msg\") #> [1] \"1 unique patient(s) with 1 record(s) with missing lab units and non-missing test results. \" #> attr(,\"data\") #>   USUBJID LBTESTCD LBORRES LBSTRESU LBSTRESC LBDTC #> 1       1      ALB       5                 5     1  LB$LBSTRESU[2]=\"NA\" check_lb_lbstresu(LB) #> [1] FALSE #> attr(,\"msg\") #> [1] \"2 unique patient(s) with 2 record(s) with missing lab units and non-missing test results. \" #> attr(,\"data\") #>   USUBJID LBTESTCD LBORRES LBSTRESU LBSTRESC LBDTC #> 1       1      ALB       5                 5     1 #> 2       2      ALB       5       NA        5     2  LB$LBSTRESU[3]=NA check_lb_lbstresu(LB) #> [1] FALSE #> attr(,\"msg\") #> [1] \"3 unique patient(s) with 3 record(s) with missing lab units and non-missing test results. \" #> attr(,\"data\") #>   USUBJID LBTESTCD LBORRES LBSTRESU LBSTRESC LBDTC #> 1       1      ALB       5                 5     1 #> 2       2      ALB       5       NA        5     2 #> 3       3      ALB       5     <NA>        5     3  LB$LBSPID= \"FORMNAME-R:2/L:2XXXX\" check_lb_lbstresu(LB,preproc=roche_derive_rave_row) #> [1] FALSE #> attr(,\"msg\") #> [1] \"3 unique patient(s) with 3 record(s) with missing lab units and non-missing test results. \" #> attr(,\"data\") #>   USUBJID LBTESTCD LBORRES LBSTRESU LBSTRESC LBDTC         RAVE #> 1       1      ALB       5                 5     1 FORMNAME-R:2 #> 2       2      ALB       5       NA        5     2 FORMNAME-R:2 #> 3       3      ALB       5     <NA>        5     3 FORMNAME-R:2  LB$VISIT= \"SCREENING\" check_lb_lbstresu(LB) #> [1] FALSE #> attr(,\"msg\") #> [1] \"3 unique patient(s) with 3 record(s) with missing lab units and non-missing test results. \" #> attr(,\"data\") #>   USUBJID LBTESTCD LBORRES LBSTRESU LBSTRESC LBDTC     VISIT #> 1       1      ALB       5                 5     1 SCREENING #> 2       2      ALB       5       NA        5     2 SCREENING #> 3       3      ALB       5     <NA>        5     3 SCREENING  LB$LBSTRESU=NULL check_lb_lbstresu(LB) #> [1] FALSE #> attr(,\"msg\") #> [1] \"LB is missing the variable: LBSTRESU\""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_lb_missing_month.html","id":null,"dir":"Reference","previous_headings":"","what":"Check for lab dates with year and day known but month unknown — check_lb_missing_month","title":"Check for lab dates with year and day known but month unknown — check_lb_missing_month","text":"Check missing month lab specimen collection date (LBDTC) known year day","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_lb_missing_month.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check for lab dates with year and day known but month unknown — check_lb_missing_month","text":"","code":"check_lb_missing_month(LB)"},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_lb_missing_month.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check for lab dates with year and day known but month unknown — check_lb_missing_month","text":"LB Laboratory data SDTM dataset variables USUBJID,LBTEST,LBDTC,VISIT","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_lb_missing_month.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check for lab dates with year and day known but month unknown — check_lb_missing_month","text":"boolean value check failed passed 'msg' attribute test failed","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_lb_missing_month.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Check for lab dates with year and day known but month unknown — check_lb_missing_month","text":"Sara Bodach","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_lb_missing_month.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check for lab dates with year and day known but month unknown — check_lb_missing_month","text":"","code":"LB <- data.frame(  USUBJID = 1:4,  LBTEST = c(\"TEST1\",\"TEST2\",\"TEST3\",\"TEST3\"),  LBDTC = c(\"2017-01-01\",\"2017-02-01\",\"2017---01\", \"2017----01\"),  VISIT = c(\"VISIT1\",\"VISIT2\",\"VISIT3\",\"VISIT3\"),  stringsAsFactors=FALSE )  check_lb_missing_month(LB) #> [1] FALSE #> attr(,\"msg\") #> [1] \"There are 2 patients with a lab date that has year and day present but missing month. \" #> attr(,\"data\") #>   USUBJID LBTEST      LBDTC  VISIT #> 1       3  TEST3  2017---01 VISIT3 #> 2       4  TEST3 2017----01 VISIT3  LB$LBDTC = NULL  check_lb_missing_month(LB) #> [1] FALSE #> attr(,\"msg\") #> [1] \"LB is missing the variable: LBDTC\""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_mh_missing_month.html","id":null,"dir":"Reference","previous_headings":"","what":"Check for MH dates with year and day known but month unknown — check_mh_missing_month","title":"Check for MH dates with year and day known but month unknown — check_mh_missing_month","text":"check looks partial missing dates medical history start end dates. , month missing year day known","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_mh_missing_month.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check for MH dates with year and day known but month unknown — check_mh_missing_month","text":"","code":"check_mh_missing_month(MH)"},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_mh_missing_month.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check for MH dates with year and day known but month unknown — check_mh_missing_month","text":"MH Medical History SDTM dataset variables USUBJID, MHTERM MHSTDTC","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_mh_missing_month.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check for MH dates with year and day known but month unknown — check_mh_missing_month","text":"Boolean value whether check passed failed, 'msg' attribute check failed","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_mh_missing_month.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Check for MH dates with year and day known but month unknown — check_mh_missing_month","text":"Chandra Mannem","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_mh_missing_month.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check for MH dates with year and day known but month unknown — check_mh_missing_month","text":"","code":"MH <- data.frame(USUBJID = LETTERS[1:5],                  MHTERM = LETTERS[5:1],                  MHSTDTC = c(\"2014\", NA, \"2014-01\", \"\", \"2014---02\"),                  stringsAsFactors = FALSE)  check_mh_missing_month(MH) #> [1] FALSE #> attr(,\"msg\") #> [1] \"MH has date(s) with known year and day but missing month. \" #> attr(,\"data\") #>   USUBJID MHTERM   MHSTDTC #> 1       E      A 2014---02"},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_mi_mispec.html","id":null,"dir":"Reference","previous_headings":"","what":"Check for missing values in the MISPEC variable — check_mi_mispec","title":"Check for missing values in the MISPEC variable — check_mi_mispec","text":"check looks missing values MISPEC variable, required. flagged P21. may reflect mapping issue.","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_mi_mispec.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check for missing values in the MISPEC variable — check_mi_mispec","text":"","code":"check_mi_mispec(MI)"},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_mi_mispec.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check for missing values in the MISPEC variable — check_mi_mispec","text":"MI Microscopic Findings variables USUBJID, MISPEC, MITESTCD, MIDTC","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_mi_mispec.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check for missing values in the MISPEC variable — check_mi_mispec","text":"boolean value check failed passed 'msg' attribute test failed","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_mi_mispec.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Check for missing values in the MISPEC variable — check_mi_mispec","text":"Stella Banjo (HackR 2021)","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_mi_mispec.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check for missing values in the MISPEC variable — check_mi_mispec","text":"","code":"MI <- data.frame(   USUBJID = c(\"1\",\"2\", \"3\"),   DOMAIN = \"MI\",   MISEQ = c(1, 2, 1),   MISPEC = c(\"\",\"BLOCK SLIDE\",NA),   MITESTCD = \"TESTCD1\",   MIDTC = \"2020-01-01\", stringAsFactors = FALSE )   check_mi_mispec(MI) #> [1] FALSE #> attr(,\"msg\") #> [1] \"2 record(s) with required variable MISPEC not populated. \" #> attr(,\"data\") #>   USUBJID MITESTCD MISPEC      MIDTC #> 1       1  TESTCD1        2020-01-01 #> 2       3  TESTCD1   <NA> 2020-01-01  ## No errors, MISPEC values present MI2 <- data.frame(  USUBJID = c(\"1\",\"2\", \"3\"),  DOMAIN = \"MI\",  MISEQ = 1,  MISPEC = c(\"SLIDE\", \"TUMOR TISSUE\", \"BLOCK SLIDE\"),  MITESTCD = \"TESTCD1\",  MIDTC = \"\",  stringsAsFactors = FALSE )   check_mi_mispec(MI2) #> [1] TRUE"},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_oe_bcva_1m_late_early_tot.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if 1m BCVA test stops too late, too early and has correct total — check_oe_bcva_1m_late_early_tot","title":"Check if 1m BCVA test stops too late, too early and has correct total — check_oe_bcva_1m_late_early_tot","text":"ophthalmology check BCVA 1m test. checks three conditions: <1> BCVA test stops late, meaning lines read number correct letters <= 3. <2> BCVA test stops early, meaning lines read numbers correct letters > 3. <3> BCVA total score correct, meaning sum number correct 1 meter match recorded eCRF (BCVA Scores eCRF Page - C. Total number correct 1m). Please note check works USUBJID, VISIT, VISITNUM, OELOC, OELAT combination unique dates (OEDTC). datasets situations like 1) unscheduled visits happening different dates 2) BCVA TOTAL happens different date BCVA row tests, combinations removed check. Please note check excludes forms BCVA Low Vision Test (BCV5), BCVA Scores (BCV7), BCVA Low Luminance Scores (BCVLL5), BCVA Combined Assessments (BCVAC), BCVA Low Luminance Combined Assessments (BCVACLL) running check forms include Row numbers.","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_oe_bcva_1m_late_early_tot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if 1m BCVA test stops too late, too early and has correct total — check_oe_bcva_1m_late_early_tot","text":"","code":"check_oe_bcva_1m_late_early_tot(OE)"},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_oe_bcva_1m_late_early_tot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if 1m BCVA test stops too late, too early and has correct total — check_oe_bcva_1m_late_early_tot","text":"OE Ophtho Dataset variables USUBJID, OESPID, OECAT, OESCAT, OETSTDTL, OESTRESN, OESTAT, OELOC, OELAT, OERESCAT, VISIT, VISITNUM, OEDTC, OEDY","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_oe_bcva_1m_late_early_tot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if 1m BCVA test stops too late, too early and has correct total — check_oe_bcva_1m_late_early_tot","text":"boolean value check failed passed 'msg' attribute test failed","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_oe_bcva_1m_late_early_tot.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Check if 1m BCVA test stops too late, too early and has correct total — check_oe_bcva_1m_late_early_tot","text":"Rosemary Li (HackR 2021 Team Eye)","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_oe_bcva_1m_late_early_tot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if 1m BCVA test stops too late, too early and has correct total — check_oe_bcva_1m_late_early_tot","text":"","code":"OE_too_late <- data.frame(   USUBJID = \"1\",   OESPID = \"FORMNAME-R:2/L:2XXXX\",   OECAT = \"BEST CORRECTED VISUAL ACUITY\",   OETSTDTL = \"TESTING DISTANCE: 1M\",   OESCAT = c(rep(\"\", 6), \"TOTAL\"),   OESTAT = \"\",   OERESCAT = c(\"ROW 1 - SNELLEN 20/200\",                 \"ROW 2 - SNELLEN 20/160\",                 \"ROW 4 - SNELLEN 20/100\",                \"ROW 3 - SNELLEN 20/125\",                 \"ROW 5 - SNELLEN 20/80\",                 \"ROW 6 - SNELLEN 20/63\",                 \"\"),   VISIT = \"WEEK 1\",   VISITNUM = 5,   OEDTC = \"2020-06-01\",   OEDY = 8,   OELOC = \"EYE\",   OELAT = \"LEFT\",   OESTRESN = c(5, 5, 5, 4, 3, 2, 24) ) check_oe_bcva_1m_late_early_tot(OE_too_late) #> [1] FALSE #> attr(,\"msg\") #> [1] \"1 BCVA 1m test record(s) failed with 1) test stops too late 2) test stops too early 3) total incorrect. \" #> attr(,\"data\") #>   USUBJID             OETSTDTL  VISIT      OEDTC OELAT OESTRESN TOTAL #> 1       1 TESTING DISTANCE: 1M WEEK 1 2020-06-01  LEFT        2    NA #>                          issue #> 1 BCVA 1m check stops too late  OE_too_early <- data.frame(   USUBJID = \"1\",   OESPID = \"FORMNAME-R:2/L:2XXXX\",   OECAT = \"BEST CORRECTED VISUAL ACUITY\",   OETSTDTL = \"TESTING DISTANCE: 1M\",   OESCAT = c(rep(\"\", 5), \"TOTAL\"),   OESTAT = \"\",   OERESCAT = c(\"ROW 1 - SNELLEN 20/200\",                 \"ROW 2 - SNELLEN 20/160\",                 \"ROW 4 - SNELLEN 20/100\",                \"ROW 3 - SNELLEN 20/125\",                 \"ROW 5 - SNELLEN 20/80\",                 \"\"),   VISIT = \"WEEK 1\",   VISITNUM = 5,   OEDTC = \"2020-06-01\",   OEDY = 8,   OELOC = \"EYE\",   OELAT = \"LEFT\",   OESTRESN = c(5, 5, 5, 4, 4, 23) ) check_oe_bcva_1m_late_early_tot(OE_too_early) #> [1] FALSE #> attr(,\"msg\") #> [1] \"1 BCVA 1m test record(s) failed with 1) test stops too late 2) test stops too early 3) total incorrect. \" #> attr(,\"data\") #> # A tibble: 1 × 8 #>   USUBJID OETSTDTL             VISIT  OEDTC      OELAT OESTRESN TOTAL issue      #>   <chr>   <chr>                <chr>  <chr>      <chr>    <dbl> <lgl> <chr>      #> 1 1       TESTING DISTANCE: 1M WEEK 1 2020-06-01 LEFT         4 NA    BCVA 1m c…  OE_total_incorrect <- data.frame(   USUBJID = \"1\",   OESPID = \"FORMNAME-R:2/L:2XXXX\",   OECAT = \"BEST CORRECTED VISUAL ACUITY\",   OETSTDTL = \"TESTING DISTANCE: 1M\",   OESCAT = c(rep(\"\", 6), \"TOTAL\"),   OESTAT = \"\",   OERESCAT = c(\"ROW 1 - SNELLEN 20/200\",                 \"ROW 2 - SNELLEN 20/160\",                 \"ROW 4 - SNELLEN 20/100\",                \"ROW 3 - SNELLEN 20/125\",                 \"ROW 5 - SNELLEN 20/80\",                 \"ROW 6 - SNELLEN 20/63\",                 \"\"),   VISIT = \"WEEK 1\",   VISITNUM = 5,   OEDTC = \"2020-06-01\",   OEDY = 8,   OELOC = \"EYE\",   OELAT = \"LEFT\",   OESTRESN = c(5, 5, 5, 4, 4, 2, 28) ) check_oe_bcva_1m_late_early_tot(OE_total_incorrect) #> [1] FALSE #> attr(,\"msg\") #> [1] \"1 BCVA 1m test record(s) failed with 1) test stops too late 2) test stops too early 3) total incorrect. \" #> attr(,\"data\") #>   USUBJID             OETSTDTL  VISIT      OEDTC OELAT OESTRESN TOTAL #> 1       1 TESTING DISTANCE: 1M WEEK 1 2020-06-01  LEFT       28    25 #>                     issue #> 1 BCVA 1m score incorrect"},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_oe_bcva_4m_late_early_tot.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if 4m BCVA test stops too late, too early and has correct total — check_oe_bcva_4m_late_early_tot","title":"Check if 4m BCVA test stops too late, too early and has correct total — check_oe_bcva_4m_late_early_tot","text":"ophthalmology check BCVA 4m test. checks three conditions: <1> BCVA test stops late, meaning lines read number correct letters <= 3. <2> BCVA test stops early, meaning lines read numbers correct letters > 3. <3> BCVA total score correct, meaning sum number correct 4 meters match recorded eCRF (BCVA Scores eCRF Page - . Total number correct 4m). Please note check works USUBJID, VISIT, VISITNUM, OELOC, OELAT combination unique dates (OEDTC). datasets situations like 1) unscheduled visits happening different dates 2) BCVA TOTAL happens different date BCVA row tests, combinations removed check. Please note check excludes forms BCVA Low Vision Test (BCV5), BCVA Scores (BCV7), BCVA Low Luminance Scores (BCVLL5), BCVA Combined Assessments (BCVAC), BCVA Low Luminance Combined Assessments (BCVACLL) running check forms include Row numbers.","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_oe_bcva_4m_late_early_tot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if 4m BCVA test stops too late, too early and has correct total — check_oe_bcva_4m_late_early_tot","text":"","code":"check_oe_bcva_4m_late_early_tot(OE)"},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_oe_bcva_4m_late_early_tot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if 4m BCVA test stops too late, too early and has correct total — check_oe_bcva_4m_late_early_tot","text":"OE Ophtho Dataset variables USUBJID, OESPID, OECAT, OESCAT, OETSTDTL, OESTRESN, OESTAT, OELOC, OELAT, OERESCAT, VISIT, VISITNUM, OEDTC, OEDY","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_oe_bcva_4m_late_early_tot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if 4m BCVA test stops too late, too early and has correct total — check_oe_bcva_4m_late_early_tot","text":"boolean value check failed passed 'msg' attribute test failed","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_oe_bcva_4m_late_early_tot.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Check if 4m BCVA test stops too late, too early and has correct total — check_oe_bcva_4m_late_early_tot","text":"Rosemary Li (HackR 2021 Team Eye)","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_oe_bcva_4m_late_early_tot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if 4m BCVA test stops too late, too early and has correct total — check_oe_bcva_4m_late_early_tot","text":"","code":"OE_too_late <- data.frame(   USUBJID = \"1\",   OESPID = \"FORMNAME-R:2/L:2XXXX\",   OECAT = \"BEST CORRECTED VISUAL ACUITY\",   OETSTDTL = \"TESTING DISTANCE: 4M\",   OESCAT = c(rep(\"\", 6), \"TOTAL\"),   OESTAT = \"\",   OERESCAT = c(\"ROW 1 - SNELLEN 20/200\",                 \"ROW 2 - SNELLEN 20/160\",                 \"ROW 4 - SNELLEN 20/100\",                \"ROW 3 - SNELLEN 20/125\",                 \"ROW 5 - SNELLEN 20/80\",                 \"ROW 6 - SNELLEN 20/63\",                 \"\"),   VISIT = \"WEEK 1\",   VISITNUM = 5,   OEDTC = \"2020-06-01\",   OEDY = 8,   OELOC = \"EYE\",   OELAT = \"LEFT\",   OESTRESN = c(5, 5, 5, 4, 3, 2, 24) ) check_oe_bcva_4m_late_early_tot(OE_too_late) #> [1] FALSE #> attr(,\"msg\") #> [1] \"1 BCVA 4m test record(s) failed with 1) test stops too late 2) test stops too early 3) total incorrect. \" #> attr(,\"data\") #>   USUBJID             OETSTDTL  VISIT      OEDTC OELAT OESTRESN TOTAL #> 1       1 TESTING DISTANCE: 4M WEEK 1 2020-06-01  LEFT        2    NA #>                          issue #> 1 BCVA 4m check stops too late  OE_too_early <- data.frame(   USUBJID = \"1\",   OESPID = \"FORMNAME-R:2/L:2XXXX\",   OECAT = \"BEST CORRECTED VISUAL ACUITY\",   OETSTDTL = \"TESTING DISTANCE: 4M\",   OESCAT = c(rep(\"\", 6), \"TOTAL\"),   OESTAT = \"\",   OERESCAT = c(\"ROW 1 - SNELLEN 20/200\",                 \"ROW 2 - SNELLEN 20/160\",                 \"ROW 4 - SNELLEN 20/100\",                \"ROW 3 - SNELLEN 20/125\",                 \"ROW 5 - SNELLEN 20/80\",                 \"ROW 6 - SNELLEN 20/63\",                 \"\"),   VISIT = \"WEEK 1\",   VISITNUM = 5,   OEDTC = \"2020-06-01\",   OEDY = 8,   OELOC = \"EYE\",   OELAT = \"LEFT\",   OESTRESN = c(5, 5, 5, 4, 4, 5, 28) ) check_oe_bcva_4m_late_early_tot(OE_too_early) #> [1] FALSE #> attr(,\"msg\") #> [1] \"1 BCVA 4m test record(s) failed with 1) test stops too late 2) test stops too early 3) total incorrect. \" #> attr(,\"data\") #> # A tibble: 1 × 8 #>   USUBJID OETSTDTL             VISIT  OEDTC      OELAT OESTRESN TOTAL issue      #>   <chr>   <chr>                <chr>  <chr>      <chr>    <dbl> <lgl> <chr>      #> 1 1       TESTING DISTANCE: 4M WEEK 1 2020-06-01 LEFT         5 NA    BCVA 4m c…  OE_total_incorrect <- data.frame(   USUBJID = \"1\",   OESPID = \"FORMNAME-R:2/L:2XXXX\",   OECAT = \"BEST CORRECTED VISUAL ACUITY\",   OETSTDTL = \"TESTING DISTANCE: 4M\",   OESCAT = c(rep(\"\", 6), \"TOTAL\"),   OESTAT = \"\",   OERESCAT = c(\"ROW 1 - SNELLEN 20/200\",                 \"ROW 2 - SNELLEN 20/160\",                 \"ROW 4 - SNELLEN 20/100\",                \"ROW 3 - SNELLEN 20/125\",                 \"ROW 5 - SNELLEN 20/80\",                 \"ROW 6 - SNELLEN 20/63\",                 \"\"),   VISIT = \"WEEK 1\",   VISITNUM = 5,   OEDTC = \"2020-06-01\",   OEDY = 8,   OELOC = \"EYE\",   OELAT = \"LEFT\",   OESTRESN = c(5, 5, 5, 4, 4, 2, 28) ) check_oe_bcva_4m_late_early_tot(OE_total_incorrect) #> [1] FALSE #> attr(,\"msg\") #> [1] \"1 BCVA 4m test record(s) failed with 1) test stops too late 2) test stops too early 3) total incorrect. \" #> attr(,\"data\") #>   USUBJID             OETSTDTL  VISIT      OEDTC OELAT OESTRESN TOTAL #> 1       1 TESTING DISTANCE: 4M WEEK 1 2020-06-01  LEFT       28    25 #>                     issue #> 1 BCVA 4m score incorrect"},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_oe_bcva_4m_vs_1m_req.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if 1m BCVA test is completed per BCVA 4m result — check_oe_bcva_4m_vs_1m_req","title":"Check if 1m BCVA test is completed per BCVA 4m result — check_oe_bcva_4m_vs_1m_req","text":"ophthalmology function check BCVA 1m test done per BCVA 4m result. Patient, Visits, Laterality Low Vision Tests done excluded check. 1> 4m test total <= 19 1m test done. 2> 4m test total >= 20 1m test performed two conditions outputted final result data frame, includes USUBJID, VISIT, OEDTC, OELAT, BCVA_4M_TOTAL, BCVA_1M_TOTAL, ISSUE. Please note check assume BCVA 1m 4m total accurate happen day. happening different dates, records removed checked.","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_oe_bcva_4m_vs_1m_req.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if 1m BCVA test is completed per BCVA 4m result — check_oe_bcva_4m_vs_1m_req","text":"","code":"check_oe_bcva_4m_vs_1m_req(OE)"},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_oe_bcva_4m_vs_1m_req.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if 1m BCVA test is completed per BCVA 4m result — check_oe_bcva_4m_vs_1m_req","text":"OE Ophtho Dataset variables USUBJID, OECAT, OESCAT, OETSTDTL, OESTRESN, OESTAT, OELAT, OERESCAT, VISIT, OEDTC, OEDY","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_oe_bcva_4m_vs_1m_req.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Check if 1m BCVA test is completed per BCVA 4m result — check_oe_bcva_4m_vs_1m_req","text":"Rosemary Li (HackR 2021 Team Eye)","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_oe_bcva_4m_vs_1m_req.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if 1m BCVA test is completed per BCVA 4m result — check_oe_bcva_4m_vs_1m_req","text":"","code":"OE_1m_done <- data.frame(   USUBJID = \"1\",   OECAT = \"BEST CORRECTED VISUAL ACUITY\",   OETSTDTL = c(rep(\"TESTING DISTANCE: 4M\", 4), rep(\"TESTING DISTANCE: 1M\", 3)),   OESCAT = c(rep(\"\", 3), \"TOTAL\", rep(\"\", 2), \"TOTAL\"),   OESTAT = rep(\"\", 7),   OERESCAT = c(\"ROW 1 - SNELLEN 20/200\",                 \"ROW 2 - SNELLEN 20/160\",                 \"ROW 3 - SNELLEN 20/125\",                 \"\",                \"ROW 1 - SNELLEN 20/200\",                 \"ROW 2 - SNELLEN 20/160\",                 \"\"),   VISIT = \"WEEK 1\",   VISITNUM = 5,   OEDTC = \"2020-06-01\",   OEDY = 8,   OELOC = \"EYE\",   OELAT = \"LEFT\",   OESTRESN = c(9, 9, 3, 21, 3, 2, 5) ) check_oe_bcva_4m_vs_1m_req(OE_1m_done) #> [1] FALSE #> attr(,\"msg\") #> [1] \"1 BCVA 1m test result(s) not done properly based on 4m result. \" #> attr(,\"data\") #>   USUBJID  VISIT      OEDTC OELAT BCVA_4M_TOTAL BCVA_1M_TOTAL #> 1       1 WEEK 1 2020-06-01  LEFT            21             5 #>                           ISSUE #> 1 1m Test Done but Not Required  OE_1m_not_done <- data.frame(   USUBJID = \"1\",   OECAT = \"BEST CORRECTED VISUAL ACUITY\",   OETSTDTL = \"TESTING DISTANCE: 4M\",   OESCAT = c(rep(\"\", 3), \"TOTAL\"),   OESTAT = \"\",   OERESCAT = c(\"ROW 1 - SNELLEN 20/200\",                 \"ROW 2 - SNELLEN 20/160\",                 \"ROW 3 - SNELLEN 20/125\",                 \"\"),   VISIT = \"WEEK 1\",   VISITNUM = 5,   OEDTC = \"2020-06-01\",   OEDY = 8,   OELOC = \"EYE\",   OELAT = \"LEFT\",   OESTRESN = c(5, 5, 2, 12) ) check_oe_bcva_4m_vs_1m_req(OE_1m_not_done) #> [1] FALSE #> attr(,\"msg\") #> [1] \"1 BCVA 1m test result(s) not done properly based on 4m result. \" #> attr(,\"data\") #>   USUBJID  VISIT      OEDTC OELAT BCVA_4M_TOTAL BCVA_1M_TOTAL #> 1       1 WEEK 1 2020-06-01  LEFT            12            NA #>                           ISSUE #> 1 1m Test Not Done but Required"},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_oe_bcva_tot_mismatch.html","id":null,"dir":"Reference","previous_headings":"","what":"Check mismatch between Derived BCVA Total Score & Total BCVA Score from Data — check_oe_bcva_tot_mismatch","title":"Check mismatch between Derived BCVA Total Score & Total BCVA Score from Data — check_oe_bcva_tot_mismatch","text":"ophthalmology check looks mismatch Derived Best Corrected Visual Acuity (BCVA) Total Score & reported Total BCVA Score Data based OETESTCD = \"LOGSCORE\" older studies OETESTCD = \"VACSCORE\" newer studies","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_oe_bcva_tot_mismatch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check mismatch between Derived BCVA Total Score & Total BCVA Score from Data — check_oe_bcva_tot_mismatch","text":"","code":"check_oe_bcva_tot_mismatch(OE)"},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_oe_bcva_tot_mismatch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check mismatch between Derived BCVA Total Score & Total BCVA Score from Data — check_oe_bcva_tot_mismatch","text":"OE Ophtho Dataset variables USUBJID, OETESTCD, OECAT, OESCAT, OETSTDTL, OESTRESN, OESTAT (present), OELAT, VISIT, OEDTC","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_oe_bcva_tot_mismatch.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Check mismatch between Derived BCVA Total Score & Total BCVA Score from Data — check_oe_bcva_tot_mismatch","text":"Monarch Shah (HackR 2021 Team Eye)","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_oe_bcva_tot_mismatch.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check mismatch between Derived BCVA Total Score & Total BCVA Score from Data — check_oe_bcva_tot_mismatch","text":"","code":"#Using Old Standard, FAIL Case (4m <=19, so 4m + 1m to match with Rave Total) OE <- data.frame(    USUBJID = 1,    OETESTCD = c(\"NUMLCOR\", \"NUMLCOR\", \"LCORCON\", \"LOGSCORE\"),    OECAT   = rep(\"BEST CORRECTED VISUAL ACUITY\", 4),    OESCAT   = c(\"TOTAL\", \"TOTAL\",\"\", \"\"),    OETSTDTL  = c(\"TESTING DISTANCE: 4M\", \"TESTING DISTANCE: 1M\", \"\", \"\"),    OESTRESN = c(18, 0, 30, 48),    OESTAT= rep(\"\", 4),    OELOC   = rep(\"EYE\", 4),    OELAT   = rep(\"LEFT\", 4),    VISIT   = rep(\"SCREENING\", 4),    VISITNUM   = rep(99, 4),    OEDTC = rep(\"2021-05-19\", 4),    OEDY  = rep(1, 4),    stringsAsFactors = FALSE)  check_oe_bcva_tot_mismatch(OE) #> [1] FALSE #> attr(,\"msg\") #> [1] \"1 record(s) with BCVA Total Score Derived and from RAVE/eCRF with mismatch. \" #> attr(,\"data\") #>   USUBJID OELAT     VISIT      OEDTC TOT_4M TOT_1M PARTB_CONST BCVATOT_CRF #> 1       1  LEFT SCREENING 2021-05-19     18      0          30          48 #>   BCVATOT_DERIVED #> 1              18   #Using New Standard, PASS Case  OE <- data.frame(    USUBJID = 1,    OETESTCD = c(\"NUMLCOR\", \"NUMLCOR\", \"LCORCON\", \"VACSCORE\"),    OECAT   = rep(\"BEST CORRECTED VISUAL ACUITY\", 4),    OESCAT   = c(\"NORMAL LIGHTING SCORE\", \"NORMAL LIGHTING SCORE\",\"\", \"\"),    OETSTDTL  = c(\"TESTING DISTANCE: 4M\", \"TESTING DISTANCE: 1M\", \"\", \"\"),    OESTRESN = c(22, 0, 30, 52),    OESTAT= rep(\"\", 4),    OELOC   = rep(\"EYE\", 4),    OELAT   = rep(\"LEFT\", 4),    VISIT   = rep(\"SCREENING\", 4),    VISITNUM   = rep(99, 4),    OEDTC = rep(\"2021-05-19\", 4),    OEDY  = rep(1, 4),    stringsAsFactors = FALSE) check_oe_bcva_tot_mismatch(OE) #> [1] TRUE   #Using New Standard, FAIL Case (Total 4m + 1m (As 4m <=19) not equal to CRF Total Score)  OE <- data.frame(    USUBJID = 1,    OETESTCD = c(\"NUMLCOR\", \"NUMLCOR\", \"LCORCON\", \"VACSCORE\"),    OECAT   = \"BEST CORRECTED VISUAL ACUITY\",    OESCAT   = c(\"NORMAL LIGHTING SCORE\", \"NORMAL LIGHTING SCORE\",\"\", \"\"),    OETSTDTL  = c(\"TESTING DISTANCE: 4M\", \"TESTING DISTANCE: 1M\", \"\", \"\"),    OESTRESN = c(17, 12, 0, 27),    OESTAT= \"\",    OELOC   = \"EYE\",    OELAT   = \"LEFT\",    VISIT   = \"SCREENING\",    VISITNUM   = 99,    OEDTC = \"2021-05-19\",    OEDY  = 1,    stringsAtors = FALSE) check_oe_bcva_tot_mismatch(OE) #> [1] FALSE #> attr(,\"msg\") #> [1] \"1 record(s) with BCVA Total Score Derived and from RAVE/eCRF with mismatch. \" #> attr(,\"data\") #>   USUBJID OELAT     VISIT      OEDTC TOT_4M TOT_1M PARTB_CONST BCVATOT_CRF #> 1       1  LEFT SCREENING 2021-05-19     17     12           0          27 #>   BCVATOT_DERIVED #> 1              29   #FAIL Case without optional variable, OESTAT  OE$OESTAT <- NULL check_oe_bcva_tot_mismatch(OE) #> [1] FALSE #> attr(,\"msg\") #> [1] \"1 record(s) with BCVA Total Score Derived and from RAVE/eCRF with mismatch. \" #> attr(,\"data\") #>   USUBJID OELAT     VISIT      OEDTC TOT_4M TOT_1M PARTB_CONST BCVATOT_CRF #> 1       1  LEFT SCREENING 2021-05-19     17     12           0          27 #>   BCVATOT_DERIVED #> 1              29   #missing required variable, OETESTCD  OE$OETESTCD <- NULL check_oe_bcva_tot_mismatch(OE) #> [1] FALSE #> attr(,\"msg\") #> [1] \"OE is missing the variable: OETESTCD\""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_oe_sc_lat_count_fingers.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if Post Treatment Count Fingers in Study Eye laterality does not match with Subject Characteristics Study Eye laterality — check_oe_sc_lat_count_fingers","title":"Check if Post Treatment Count Fingers in Study Eye laterality does not match with Subject Characteristics Study Eye laterality — check_oe_sc_lat_count_fingers","text":"Check Post Treatment Count Fingers Study Eye done actual Study eye comparing laterality OE domain SC domain. Check ignored Post Treatment Count Fingers collected study quite common EP studies","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_oe_sc_lat_count_fingers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if Post Treatment Count Fingers in Study Eye laterality does not match with Subject Characteristics Study Eye laterality — check_oe_sc_lat_count_fingers","text":"","code":"check_oe_sc_lat_count_fingers(OE, SC)"},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_oe_sc_lat_count_fingers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if Post Treatment Count Fingers in Study Eye laterality does not match with Subject Characteristics Study Eye laterality — check_oe_sc_lat_count_fingers","text":"OE Ophthalmic Examination Dataset Ophtho Study variables USUBJID, OECAT, OELAT, VISIT, OEDTC, OETEST, OELOC, OESTAT (present) SC Subject Characteristics Dataset Ophtho Study variables USUBJID, SCTEST, SCTESTCD, SCCAT, SCORRES, SCDTC","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_oe_sc_lat_count_fingers.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Check if Post Treatment Count Fingers in Study Eye laterality does not match with Subject Characteristics Study Eye laterality — check_oe_sc_lat_count_fingers","text":"Monarch Shah (HackR 2021 Team Eye)","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_oe_sc_lat_count_fingers.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if Post Treatment Count Fingers in Study Eye laterality does not match with Subject Characteristics Study Eye laterality — check_oe_sc_lat_count_fingers","text":"","code":"sc <- data.frame(USUBJID  = c(1,1,1,2,2,2),                  SCTEST   = c(\"Eye Meeting Eligibility Criteria\",                                \"Focus of Study-Specific Interest\",                                \" \",                               \"Eye Meeting Eligibility Criteria\",                                \"Focus of Study-Specific Interest\",                                \" \"),                  SCTESTCD = c(\"ELIGEYE\", \"FOCID\", \"\", \"ELIGEYE\", \"FOCID\", \"\"),                  SCCAT    = c(\"STUDY EYE SELECTION\", \"STUDY EYE SELECTION\", \"\",                                \"STUDY EYE SELECTION\", \"STUDY EYE SELECTION\", \"\"),                  SCORRES  = c(\"LEFT\", \"OS\", \"\", \"RIGHT\", \"OD\", \"\"),                  SCDTC    = rep(\"2021-01-01\", 6),                  stringsAsFactors = FALSE)  oe <- data.frame(USUBJID = c(1,1,1,1,1,2,2,2,2,2,2),                  OECAT  = rep(\"SAFETY ASSESSMENT OF LOW VISION\", 11),                  OELOC   = rep(\"Eye\", 11),                  OELAT   = c(\"LEFT\", \"Left\", \"left\", \"LEFT\", \"LEFT\",                               \"RIGHT\", \"right\", \"right\", \"RIGHT\", \"RIGHT\", \"right\"),                  OEDY  = c(1, 28, 56, 84, 112, 1, 28, 56, 84, 112, 140),                  VISIT   = c(\"Week 1\", \"Week 4\", \"Week 8\", \"Week 12\", \"Week 16\",                               \"Week 1\", \"Week 4\", \"Week 8\", \"Week 12\", \"Week 16\", \"Week 20\"),                  OEDTC = c(\"2021-01-01\", \"2021-02-01\", \"2021-03-01\", \"2021-04-01\", \"2021-05-01\",                             \"2021-01-01\", \"2021-02-01\", \"2021-03-01\", \"2021-04-01\", \"2021-05-01\",                             \"2021-06-01\"),                  OETEST = c(\"A\", \"B\", \"C\", \"D\", \"E\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"),                  stringsAsFactors=FALSE)  check_oe_sc_lat_count_fingers(SC=sc, OE=oe) #> [1] TRUE  sc <- data.frame(USUBJID  = c(1,1,1,2,2,2),                  SCTEST   = c(\"Eye Meeting Eligibility Criteria\",                                \"Focus of Study-Specific Interest\",                                \" \",                               \"Eye Meeting Eligibility Criteria\",                                \"Focus of Study-Specific Interest\",                                \" \"),                  SCTESTCD = c(\"ELIGEYE\", \"FOCID\", \"\", \"ELIGEYE\", \"FOCID\", \"\"),                  SCCAT    = c(\"STUDY EYE SELECTION\", \"STUDY EYE SELECTION\", \"\",                                \"STUDY EYE SELECTION\", \"STUDY EYE SELECTION\", \"\"),                  SCORRES  = c(\"LEFT\", \"OS\", \"\", \"RIGHT\", \"OD\", \"\"),                  SCDTC    = rep(\"2021-01-01\", 6),                  stringsAsFactors = FALSE)  oe <- data.frame(USUBJID = c(1,1,1,1,1,2,2,2,2,2,2),                  OECAT  = rep(\"SAFETY ASSESSMENT OF LOW VISION\", 11),                  OELOC   = rep(\"Eye\", 11),                  OELAT   = c(\"LEFT\", \"Left\", \"left\", \"LEFT\", \"right\", \"RIGHT\",                               \"right\", \"right\", \"RIGHT\", \"RIGHT\", \"left\"),                  OEDY  = c(1, 28, 56, 84, 112, 1, 28, 56, 84, 112, 140),                  VISIT   = c(\"Week 1\", \"Week 4\", \"Week 8\", \"Week 12\", \"Week 16\",                               \"Week 1\", \"Week 4\", \"Week 8\", \"Week 12\", \"Week 16\",                               \"Week 20\"),                  OEDTC = c(\"2021-01-01\", \"2021-02-01\", \"2021-03-01\", \"2021-04-01\", \"2021-05-01\",                             \"2021-01-01\", \"2021-02-01\", \"2021-03-01\", \"2021-04-01\", \"2021-05-01\",                             \"2021-06-01\"),                  OETEST = c(\"A\", \"B\", \"C\", \"D\", \"E\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"),                  stringsAsFactors=FALSE)  check_oe_sc_lat_count_fingers(SC=sc, OE=oe) #> [1] FALSE #> attr(,\"msg\") #> [1] \"2 record(s) with Post Treatment Count Fingers - Study Eye laterality does not match with Subject Characteristics Study Eye laterality. \" #> attr(,\"data\") #>   USUBJID      SCDTC SC_STUDYEYE OELAT   VISIT      OEDTC OETEST #> 1       1 2021-01-01        LEFT right Week 16 2021-05-01      E #> 2       2 2021-01-01       RIGHT  left Week 20 2021-06-01      F  sc <- data.frame(USUBJID  = c(1,1,1,2,2,2,3),                  SCTEST   = c(\"Eye Meeting Eligibility Criteria\",                                \"Focus of Study-Specific Interest\",                                \" \",                               \"Eye Meeting Eligibility Criteria\",                                \"Focus of Study-Specific Interest\",                                \" \",                               \"Focus of Study-Specific Interest\"),                  SCTESTCD = c(\"ELIGEYE\", \"FOCID\", \"\", \"ELIGEYE\", \"FOCID\", \"\", \"FOCID\"),                  SCCAT    = c(\"STUDY EYE SELECTION\", \"STUDY EYE SELECTION\", \"\",                                \"STUDY EYE SELECTION\", \"STUDY EYE SELECTION\",                                \"\", \"STUDY EYE SELECTION\"),                  SCORRES  = c(\"LEFT\", \"OS\", \"\", \"RIGHT\", \"OD\", \"\", \"OS\"),                  SCDTC    = \"2021-01-01\",                  stringsAsFactors = FALSE)  oe <- data.frame(USUBJID = c(1,1,1,1,1,2,2,2,2,2,2),                  OESTAT  = c(\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\", \"not DONE\"),                  OECAT  = \"SAFETY ASSESSMENT OF LOW VISION\",                  OELOC   = \"Eye\",                  OELAT   = c(\"LEFT\", \"Left\", \"left\", \"LEFT\", \"right\", \"RIGHT\",                               \"right\", \"right\", \"RIGHT\", \"RIGHT\", \"left\"),                  OEDY  = c(1, 28, 56, 84, 112, 1, 28, 56, 84, 112, 140),                  VISIT   = c(\"Week 1\", \"Week 4\", \"Week 8\", \"Week 12\", \"Week 16\",                               \"Week 1\", \"Week 4\", \"Week 8\", \"Week 12\", \"Week 16\",                               \"Week 20\"),                  OEDTC = c(\"2021-01-01\", \"2021-02-01\", \"2021-03-01\", \"2021-04-01\", \"2021-05-01\",                             \"2021-01-01\", \"2021-02-01\", \"2021-03-01\", \"2021-04-01\", \"2021-05-01\",                             \"2021-06-01\"),                  OETEST = c(\"A\", \"B\", \"C\", \"D\", \"E\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"),                  stringsAsFactors=FALSE)  check_oe_sc_lat_count_fingers(SC=sc, OE=oe) #> [1] FALSE #> attr(,\"msg\") #> [1] \"2 record(s) with Post Treatment Count Fingers - Study Eye laterality does not match with Subject Characteristics Study Eye laterality. \" #> attr(,\"data\") #>   USUBJID      SCDTC SC_STUDYEYE OELAT   VISIT      OEDTC OETEST #> 1       1 2021-01-01        LEFT right Week 16 2021-05-01      E #> 2       3 2021-01-01        LEFT  <NA>    <NA>       <NA>   <NA>"},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_pr_missing_month.html","id":null,"dir":"Reference","previous_headings":"","what":"Check for procedure dates with year and day known but month unknown — check_pr_missing_month","title":"Check for procedure dates with year and day known but month unknown — check_pr_missing_month","text":"check looks partial missing dates PR Procedures start date end date, end date exists. day month known, month known.","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_pr_missing_month.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check for procedure dates with year and day known but month unknown — check_pr_missing_month","text":"","code":"check_pr_missing_month(PR, preproc = identity, ...)"},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_pr_missing_month.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check for procedure dates with year and day known but month unknown — check_pr_missing_month","text":"PR Procedures SDTM dataset variables USUBJID, PRTRT, PRSTDTC, PRENDTC (optional), PRSPID (optional) preproc optional company specific preprocessing script ... arguments passed methods","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_pr_missing_month.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check for procedure dates with year and day known but month unknown — check_pr_missing_month","text":"boolean value check failed passed 'msg' attribute test failed","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_pr_missing_month.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check for procedure dates with year and day known but month unknown — check_pr_missing_month","text":"","code":"PR <- data.frame(  USUBJID = 1:3,  PRTRT = c(\"Surgery Name\",\"Procedure Name\",\"Procedure\"),  PRSTDTC = c(\"2017-01-01\",\"2017---01\",\"2017-01-02\"),  PRENDTC = c(\"2017-02-01\",\"2017-03-01\",\"2017---01\"),  PRSPID = \"/F:SURG-D:12345-R:1\",  PRCAT = \"Form 1\",  stringsAsFactors=FALSE )  check_pr_missing_month(PR) #> [1] FALSE #> attr(,\"msg\") #> [1] \"2 patient(s) with a PR procedure date with known year and day but unknown month. \" #> attr(,\"data\") #>   USUBJID          PRTRT    PRSTDTC    PRENDTC #> 1       2 Procedure Name  2017---01 2017-03-01 #> 2       3      Procedure 2017-01-02  2017---01  check_pr_missing_month(PR,preproc=roche_derive_rave_row) #> [1] FALSE #> attr(,\"msg\") #> [1] \"2 patient(s) with a PR procedure date with known year and day but unknown month. \" #> attr(,\"data\") #>   USUBJID          PRTRT    PRSTDTC    PRENDTC   RAVE #> 1       2 Procedure Name  2017---01 2017-03-01 SURG#1 #> 2       3      Procedure 2017-01-02  2017---01 SURG#1  PR$PRENDTC = NULL check_pr_missing_month(PR) #> [1] FALSE #> attr(,\"msg\") #> [1] \"1 patient(s) with a PR procedure date with known year and day but unknown month. \" #> attr(,\"data\") #>   USUBJID          PRTRT   PRSTDTC #> 1       2 Procedure Name 2017---01"},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_pr_prlat.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if ocular procedures/surgeries has laterality missing for CRF pages which contain the word ","title":"Check if ocular procedures/surgeries has laterality missing for CRF pages which contain the word ","text":"check assesses observations PRCAT contains word OCULAR flags records missing/inconsistent laterality","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_pr_prlat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if ocular procedures/surgeries has laterality missing for CRF pages which contain the word ","text":"","code":"check_pr_prlat(PR, preproc = identity, ...)"},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_pr_prlat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if ocular procedures/surgeries has laterality missing for CRF pages which contain the word ","text":"PR Procedure/Surgery Dataset Ophtho Study variables USUBJID, PRCAT, PRLAT, PRTRT, PROCCUR, PRPRESP PRSPID (Present), PRSTDTC (Present), PRINDC (Present) preproc optional company specific preprocessing script ... arguments passed methods","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_pr_prlat.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Check if ocular procedures/surgeries has laterality missing for CRF pages which contain the word ","text":"Tim Barnett (HackR 2021 Team Eye) Monarch Shah (Added Concurrent Ocular Procedure check) (copied check_cm_cmlat)","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_pr_prlat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if ocular procedures/surgeries has laterality missing for CRF pages which contain the word ","text":"","code":"PR <- data.frame(    USUBJID = 1:5,    PRCAT = \"PRIOR OCULAR SURGERIES AND PROCEDURES\",    PRSTDTC = 1:5,    PRLAT   = c(\"Left\", \"\",\"Bilateral\", \"\", \"\"),    PRTRT   = c(\"A\", \"B\", \"A\", \"B\", \"A\"),    PROCCUR = c(\"Y\", \"N\", \"N\", \"Y\", \"Y\"),    PRPRESP = \"Y\",    PRSPID  = \"FORMNAME-R:2/L:2XXXX\",    stringsAsFactors = FALSE) check_pr_prlat(PR,preproc=roche_derive_rave_row) #> [1] FALSE #> attr(,\"msg\") #> [1] \"2 record(s) with PRLAT Missing from records with PRCAT containing the word OCULAR when expected to be populated. \" #> attr(,\"data\") #>   USUBJID                                 PRCAT PRSTDTC         RAVE PRLAT #> 1       4 PRIOR OCULAR SURGERIES AND PROCEDURES       4 FORMNAME-R:2       #> 2       5 PRIOR OCULAR SURGERIES AND PROCEDURES       5 FORMNAME-R:2       #>   PRTRT #> 1     B #> 2     A  PR <- data.frame(    USUBJID = 1:5,    PRCAT = \"CONCURRENT OCULAR PROCEDURE\",    PRSTDTC = 1:5,    PRLAT   = c(\"Left\", \"LEFT\",\"Bilateral\", \"RIGHT\", \"RIgHT\"),    PRTRT  = c(\"A\", \"B\", \"A\", \"B\", \"A\"),    PROCCUR = NA,    PRPRESP = NA,    stringsAsFactors = FALSE) check_pr_prlat(PR) #> [1] TRUE  PR <- data.frame(    USUBJID = 1:5,    PRCAT = \"CONCURRENT OCULAR PROCEDURE\",    PRSTDTC = 1:5,    PRLAT   = c(\"Left\", \"LEFT\",\"Bilateral\", \"RIGHT\", \"\"),    PRTRT  = c(\"A\", \"B\", \"A\", \"B\", \"A\"),    PROCCUR = NA,    PRPRESP = NA,    stringsAsFactors = FALSE) check_pr_prlat(PR) #> [1] FALSE #> attr(,\"msg\") #> [1] \"1 record(s) with PRLAT Missing from records with PRCAT containing the word OCULAR when expected to be populated. \" #> attr(,\"data\") #>   USUBJID                       PRCAT PRSTDTC PRLAT PRTRT #> 1       5 CONCURRENT OCULAR PROCEDURE       5           A  PR <- data.frame(    USUBJID = 1:5,    PRCAT = \"CONCURRENT OCULAR PROCEDURE\",    PRSTDTC = 1:5,    PRLAT   = c(\"Left\", \"\",\"Bilateral\", \"RIGHT\", \"\"),    PRTRT  = c(\"A\", \"B\", \"A\", \"B\", \"A\"),    PROCCUR = c(\"Y\", \"N\", \"N\", \"Y\", \"Y\"),    PRPRESP = \"Y\",    stringsAsFactors = FALSE) check_pr_prlat(PR) #> [1] FALSE #> attr(,\"msg\") #> [1] \"1 record(s) with PRLAT Missing from records with PRCAT containing the word OCULAR when expected to be populated. \" #> attr(,\"data\") #>   USUBJID                       PRCAT PRSTDTC PRLAT PRTRT #> 1       5 CONCURRENT OCULAR PROCEDURE       5           A  PR <- data.frame(    USUBJID = 1:5,    PRCAT = c(rep(\"CONCURRENT NON-OCULAR PROCEDURE\",3),rep(\"CONCURRENT OCULAR PROCEDURE\",2)),    PRSTDTC = 1:5,    PRLAT   = c(\"\", \"\",\"\", \"RIGHT\", \"\"),    PRTRT  = c(\"A\", \"B\", \"A\", \"B\", \"A\"),    PROCCUR = c(\"Y\", \"N\", \"N\", \"Y\", \"Y\"),    PRPRESP = \"Y\",    stringsAsFactors = FALSE) check_pr_prlat(PR) #> [1] FALSE #> attr(,\"msg\") #> [1] \"1 record(s) with PRLAT Missing from records with PRCAT containing the word OCULAR when expected to be populated. \" #> attr(,\"data\") #>   USUBJID                       PRCAT PRSTDTC PRLAT PRTRT #> 1       5 CONCURRENT OCULAR PROCEDURE       5           A"},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_qs_dup.html","id":null,"dir":"Reference","previous_headings":"","what":"Check for multiple dates at the same visit in QS — check_qs_dup","title":"Check for multiple dates at the same visit in QS — check_qs_dup","text":"Identifies multiple dates visit QS","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_qs_dup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check for multiple dates at the same visit in QS — check_qs_dup","text":"","code":"check_qs_dup(QS)"},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_qs_dup.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check for multiple dates at the same visit in QS — check_qs_dup","text":"QS QS SDTM dataset variables USUBJID, QSCAT, VISIT, QSDTC","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_qs_dup.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check for multiple dates at the same visit in QS — check_qs_dup","text":"Boolean value whether check passed failed, 'msg' attribute test failed","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_qs_dup.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Check for multiple dates at the same visit in QS — check_qs_dup","text":"Yuliia Bahatska","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_qs_dup.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check for multiple dates at the same visit in QS — check_qs_dup","text":"","code":"QS1 <- data.frame(USUBJID = c(rep(101, 5), rep(102, 5)),                 QSCAT = \"DLQI\",                 QSDTC = rep(c(\"2017-01-01T08:25\", \"2017-01-05T09:25\",                  \"2017-01-15T10:25\",\"2017-01-20T08:25\",\"2017-01-25T08:25\"), 2),                 VISITNUM = rep(1:5,2),                 VISIT = rep(c( \"Visit 1\", \"Visit 2\", \"Visit 3\", \"UNSCheduled!!!\",\"VIsit 5\"), 2),                 stringsAsFactors = FALSE) check_qs_dup(QS = QS1) #> [1] TRUE  # multiple dates for the same visit in QS QS2 <- QS1 QS2$VISIT[QS2$USUBJID == 101] <- \"Visit 1\" check_qs_dup(QS = QS2) #> [1] FALSE #> attr(,\"msg\") #> [1] \"Multiple dates for the same visit in QS. \" #> attr(,\"data\") #> # A tibble: 5 × 4 #> # Groups:   USUBJID, QSCAT, VISIT [1] #>   USUBJID QSCAT QSDTC      VISIT   #>     <dbl> <chr> <chr>      <chr>   #> 1     101 DLQI  2017-01-01 Visit 1 #> 2     101 DLQI  2017-01-05 Visit 1 #> 3     101 DLQI  2017-01-15 Visit 1 #> 4     101 DLQI  2017-01-20 Visit 1 #> 5     101 DLQI  2017-01-25 Visit 1  # multiple visit labels for the same date QS3 <- QS1 QS3$QSDTC[QS3$USUBJID == 101] <- \"2017-01-01\" QS3 #>    USUBJID QSCAT            QSDTC VISITNUM          VISIT #> 1      101  DLQI       2017-01-01        1        Visit 1 #> 2      101  DLQI       2017-01-01        2        Visit 2 #> 3      101  DLQI       2017-01-01        3        Visit 3 #> 4      101  DLQI       2017-01-01        4 UNSCheduled!!! #> 5      101  DLQI       2017-01-01        5        VIsit 5 #> 6      102  DLQI 2017-01-01T08:25        1        Visit 1 #> 7      102  DLQI 2017-01-05T09:25        2        Visit 2 #> 8      102  DLQI 2017-01-15T10:25        3        Visit 3 #> 9      102  DLQI 2017-01-20T08:25        4 UNSCheduled!!! #> 10     102  DLQI 2017-01-25T08:25        5        VIsit 5 check_qs_dup(QS = QS3) #> [1] TRUE"},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_qs_qsdtc_after_dd.html","id":null,"dir":"Reference","previous_headings":"","what":"Check for QS dates occurring after death date — check_qs_qsdtc_after_dd","title":"Check for QS dates occurring after death date — check_qs_qsdtc_after_dd","text":"check looks QS dates occur death date","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_qs_qsdtc_after_dd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check for QS dates occurring after death date — check_qs_qsdtc_after_dd","text":"","code":"check_qs_qsdtc_after_dd(AE, DS, QS)"},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_qs_qsdtc_after_dd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check for QS dates occurring after death date — check_qs_qsdtc_after_dd","text":"AE Adverse Event SDTM dataset variables USUBJID, AEDTHDTC, AESTDTC, AEDECOD, AETERM DS DS Disposition SDTM dataset variables USUBJID, DSSTDTC, DSDECOD, DSTERM QS Questionnaire Test Findings SDTM dataset variables USUBJID, QSDTC, QSCAT, QSORRES","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_qs_qsdtc_after_dd.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Check for QS dates occurring after death date — check_qs_qsdtc_after_dd","text":"Monarch Shah","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_qs_qsdtc_after_dd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check for QS dates occurring after death date — check_qs_qsdtc_after_dd","text":"","code":"AE <- data.frame(USUBJID = c(1,1,1,2,2,2),                  AEDTHDTC = c(\"\", \"\", \"2016-01-01\", \"\", \"2016-01\", \"2016-01-01\"),                  AESTDTC = \"2016-01-01\",                  AEDECOD = LETTERS[1:6],                   AETERM = LETTERS[1:6],                  stringsAsFactors = FALSE)  DS <- data.frame(USUBJID = c(1,1,1,2,2,2),                  DSSTDTC = \"2016-01-01\",                  DSDECOD = c(\"A\", \"B\", \"death\", \"AC\", \"BC\", \"death\"),                  DSTERM = letters[1:6],                  stringsAsFactors = FALSE)  QS <- data.frame(USUBJID = c(1,1,1,2,2,2),                  QSDTC   = c(\"2015-06-30\", \"2015-09-30\", \"2015-12-30\",                               \"2015-06-30\", \"2015-09-30\", \"2015-12-30\"),                  QSCAT   = \"A\",                  QSORRES =  LETTERS[1:6],                  QSSTAT  = \"\",                  VISIT  =  c(\"Week 1\", \"Week 12\", \"Week 24\", \"Week 1\", \"Week 12\", \"Week 24\"),                  QSSTRESC = LETTERS[1:6],                  stringsAsFactors = FALSE)  check_qs_qsdtc_after_dd(AE, DS, QS) #> [1] TRUE  QS$QSDTC[3:5] <- \"2016-01-03\" check_qs_qsdtc_after_dd(AE, DS, QS) #> [1] FALSE #> attr(,\"msg\") #> [1] \"2 unique patient(s) with 5 QS record(s) occurring after death date. \" #> attr(,\"data\") #>   USUBJID      QSDTC   VISIT QSCAT   AEDTHDTC    DSSTDTC EARLIEST_DTHDTC #> 1       1 2016-01-03 Week 24     A 2016-01-01 2016-01-01      2016-01-01 #> 2       2 2016-01-03  Week 1     A    2016-01 2016-01-01      2016-01-01 #> 3       2 2016-01-03  Week 1     A 2016-01-01 2016-01-01      2016-01-01 #> 4       2 2016-01-03 Week 12     A    2016-01 2016-01-01      2016-01-01 #> 5       2 2016-01-03 Week 12     A 2016-01-01 2016-01-01      2016-01-01  QS$QSSTAT[3] <- \"Not Done\" check_qs_qsdtc_after_dd(AE, DS, QS) #> [1] FALSE #> attr(,\"msg\") #> [1] \"1 unique patient(s) with 4 QS record(s) occurring after death date. \" #> attr(,\"data\") #>   USUBJID      QSDTC   VISIT QSCAT   AEDTHDTC    DSSTDTC EARLIEST_DTHDTC #> 1       2 2016-01-03  Week 1     A    2016-01 2016-01-01      2016-01-01 #> 2       2 2016-01-03  Week 1     A 2016-01-01 2016-01-01      2016-01-01 #> 3       2 2016-01-03 Week 12     A    2016-01 2016-01-01      2016-01-01 #> 4       2 2016-01-03 Week 12     A 2016-01-01 2016-01-01      2016-01-01  DS$DSSTDTC <- NULL check_qs_qsdtc_after_dd(AE, DS, QS) #> [1] FALSE #> attr(,\"msg\") #> [1] \"DS is missing the variable: DSSTDTC\"  AE1 <- data.frame(USUBJID = 1,                   AEDTHDTC = \"\",                   AESTDTC = c(\"2015-11-01\", \"2016-02-01\"),                   AEDECOD = \"Rash\",                   AETERM = \"RASH\",                   stringsAsFactors = FALSE)  DS1 <- data.frame(USUBJID = 1,                   DSSTDTC = \"2016-01\",                   DSCAT = c(\"DISPOSITION EVENT\", \"OTHER\"),                   DSSCAT = c('STUDY COMPLETION/EARLY DISCONTINUATION', ''),                   DSDECOD = \"DEATH\",                   DSTERM = c(\"DEATH\", \"DEATH DUE TO PROGRESSIVE DISEASE\"),                   stringsAsFactors = FALSE)  QS1 <- data.frame(USUBJID = 1,                   QSDTC   = c(\"2015-06-30\", \"2016-01-15\", \"2016-01-15\"),                   QSCAT   = rep(\"EQ-5D-5L\"),                   QSORRES = \"1\",                   QSSTAT  = \"\",                   VISIT  =  c(\"Week 1\", \"Week 12\", \"Week 12\"),                   QSSTRESC = \"1\",                   stringsAsFactors = FALSE)  check_qs_qsdtc_after_dd(AE=AE1, DS=DS1, QS=QS1) #> [1] FALSE #> attr(,\"msg\") #> [1] \"1 unique patient(s) with 2 QS record(s) occurring after death date. \" #> attr(,\"data\") #>   USUBJID      QSDTC   VISIT    QSCAT AEDTHDTC DSSTDTC EARLIEST_DTHDTC #> 1       1 2016-01-15 Week 12 EQ-5D-5L     <NA> 2016-01         2016-01  AE1$AEDTHDTC[1:2] <- \"2015-07-01\" check_qs_qsdtc_after_dd(AE=AE1, DS=DS1, QS=QS1) #> [1] FALSE #> attr(,\"msg\") #> [1] \"1 unique patient(s) with 2 QS record(s) occurring after death date. \" #> attr(,\"data\") #>   USUBJID      QSDTC   VISIT    QSCAT   AEDTHDTC DSSTDTC EARLIEST_DTHDTC #> 1       1 2016-01-15 Week 12 EQ-5D-5L 2015-07-01 2016-01      2015-07-01"},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_qs_qsdtc_visit_ordinal_error.html","id":null,"dir":"Reference","previous_headings":"","what":"Check that all QS dates are duplicated or earlier than last\nvisit's (possible datetime data entry error) — check_qs_qsdtc_visit_ordinal_error","title":"Check that all QS dates are duplicated or earlier than last\nvisit's (possible datetime data entry error) — check_qs_qsdtc_visit_ordinal_error","text":"check identifies QSDTC values duplicated earlier last visit's. Unscheduled visits excluded.","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_qs_qsdtc_visit_ordinal_error.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check that all QS dates are duplicated or earlier than last\nvisit's (possible datetime data entry error) — check_qs_qsdtc_visit_ordinal_error","text":"","code":"check_qs_qsdtc_visit_ordinal_error(QS)"},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_qs_qsdtc_visit_ordinal_error.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check that all QS dates are duplicated or earlier than last\nvisit's (possible datetime data entry error) — check_qs_qsdtc_visit_ordinal_error","text":"QS SDTM dataset variables USUBJID, QSCAT, QSORRES, VISITNUM, VISIT, QSDTC","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_qs_qsdtc_visit_ordinal_error.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check that all QS dates are duplicated or earlier than last\nvisit's (possible datetime data entry error) — check_qs_qsdtc_visit_ordinal_error","text":"boolean value check failed passed 'msg' attribute test failed","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_qs_qsdtc_visit_ordinal_error.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Check that all QS dates are duplicated or earlier than last\nvisit's (possible datetime data entry error) — check_qs_qsdtc_visit_ordinal_error","text":"Simon Luo","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_qs_qsdtc_visit_ordinal_error.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check that all QS dates are duplicated or earlier than last\nvisit's (possible datetime data entry error) — check_qs_qsdtc_visit_ordinal_error","text":"","code":"# no case QS1 <- data.frame(USUBJID = c(rep(101, 5), rep(102, 5)),                 QSCAT = \"DLQI\",                 QSDTC = rep(c(\"2017-01-01T08:25\", \"2017-01-05T09:25\",                  \"2017-01-15T10:25\",\"2017-01-20T08:25\",\"2017-01-25T08:25\"), 2),                 VISITNUM = rep(1:5,2),                 VISIT = rep(c( \"Visit 1\", \"Visit 2\", \"Visit 3\", \"UNSCheduled!!!\",\"VIsit 5\"), 2),                 stringsAsFactors = FALSE)  QS2 = QS1 QS2$QSCAT = \"SKINDEX-29\"  QS <- rbind(QS1, QS2) check_qs_qsdtc_visit_ordinal_error(QS) #> [1] TRUE  # adding cases with earlier date QS$QSDTC[QS$USUBJID == 101 & QS$VISIT == \"Visit 3\"] <- \"2017-01-10T08:25\" QS$QSDTC[QS$USUBJID == 102 & QS$VISIT == \"Visit 2\"] <- \"2017-01-01T06:25\" check_qs_qsdtc_visit_ordinal_error(QS) #> [1] FALSE #> attr(,\"msg\") #> [1] \"QS has 2 records with Possible QSDTC data entry error. \" #> attr(,\"data\") #>   USUBJID      QSCAT VISITNUM   VISIT            QSDTC     last.vis.dtc #> 1     102       DLQI        2 Visit 2 2017-01-01T06:25 2017-01-01T08:25 #> 2     102 SKINDEX-29        2 Visit 2 2017-01-01T06:25 2017-01-01T08:25 #>   last.vis visit.order                       check.flag #> 1  Visit 1           2 Datetime earlier than last Visit #> 2  Visit 1           2 Datetime earlier than last Visit  # adding cases with duplicated date QS$QSDTC[QS$USUBJID == 102 & QS$VISIT == \"Visit 3\"] <- \"2017-01-01T06:25\"  check_qs_qsdtc_visit_ordinal_error(QS) #> [1] FALSE #> attr(,\"msg\") #> [1] \"QS has 4 records with Possible QSDTC data entry error. \" #> attr(,\"data\") #>   USUBJID      QSCAT VISITNUM   VISIT            QSDTC     last.vis.dtc #> 1     102       DLQI        2 Visit 2 2017-01-01T06:25 2017-01-01T08:25 #> 2     102       DLQI        3 Visit 3 2017-01-01T06:25 2017-01-01T06:25 #> 3     102 SKINDEX-29        2 Visit 2 2017-01-01T06:25 2017-01-01T08:25 #> 4     102 SKINDEX-29        3 Visit 3 2017-01-01T06:25 2017-01-01T06:25 #>   last.vis visit.order                       check.flag #> 1  Visit 1           2 Datetime earlier than last Visit #> 2  Visit 2           3                       Duplicated #> 3  Visit 1           2 Datetime earlier than last Visit #> 4  Visit 2           3                       Duplicated"},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_qs_qsstat_qsreasnd.html","id":null,"dir":"Reference","previous_headings":"","what":"Check to confirm that there is a reason for a questionnaire being marked as not done — check_qs_qsstat_qsreasnd","title":"Check to confirm that there is a reason for a questionnaire being marked as not done — check_qs_qsstat_qsreasnd","text":"code flags QSSTAT Completion Status marked DONE QSREASND Reason Performed populated. questionnaires study may collect Reason Performed information, may instances false positives data correction required. QSREASND permissible variable, scenario flagged P21.","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_qs_qsstat_qsreasnd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check to confirm that there is a reason for a questionnaire being marked as not done — check_qs_qsstat_qsreasnd","text":"","code":"check_qs_qsstat_qsreasnd(QS)"},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_qs_qsstat_qsreasnd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check to confirm that there is a reason for a questionnaire being marked as not done — check_qs_qsstat_qsreasnd","text":"QS Questionnaire SDTMv dataset USUBJID, QSCAT, QSDTC, QSSTAT, QSREASND, VISIT (optional) variables","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_qs_qsstat_qsreasnd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check to confirm that there is a reason for a questionnaire being marked as not done — check_qs_qsstat_qsreasnd","text":"boolean value check returns 0 obs, otherwise return subset dataframe.","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_qs_qsstat_qsreasnd.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Check to confirm that there is a reason for a questionnaire being marked as not done — check_qs_qsstat_qsreasnd","text":"Katie Patel, Bonita Viegas Monteiro, Tom Stone (HackR 2021 Team WeRawesome)","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_qs_qsstat_qsreasnd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check to confirm that there is a reason for a questionnaire being marked as not done — check_qs_qsstat_qsreasnd","text":"","code":"QS <- data.frame(USUBJID = c(1,1,1,2,2,2),                  QSDTC   = c(\"2015-06-30\", \"2015-09-30\", \"2015-12-30\",                               \"2015-06-30\", \"2015-09-30\", \"2015-12-30\"),                  QSCAT   = \"A\",                  VISIT  =  c(\"Week 1\", \"Week 12\", \"Week 24\", \"Week 1\", \"Week 12\", \"Week 24\"),                  QSSTAT  = c(\"Not Done\",\"NOT DONE\",\"not done\", rep(\"\",3)),                  QSREASND = c(\"Reasons\",rep(\"\",5)),                  stringsAsFactors = FALSE)   check_qs_qsstat_qsreasnd(QS) #> [1] FALSE #> attr(,\"msg\") #> [1] \"Completion status for 2 record(s) is 'NOT DONE' but Reason Not Performed not given. \" #> attr(,\"data\") #>   USUBJID      QSDTC QSCAT   VISIT   QSSTAT QSREASND #> 2       1 2015-09-30     A Week 12 NOT DONE          #> 3       1 2015-12-30     A Week 24 not done            QS$QSSTAT=NULL   check_qs_qsstat_qsreasnd(QS) #> [1] FALSE #> attr(,\"msg\") #> [1] \"QS is missing the variable: QSSTAT\""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_qs_qsstat_qsstresc.html","id":null,"dir":"Reference","previous_headings":"","what":"Check for non-missing QSSTRESC if QSSTAT is NOT DONE — check_qs_qsstat_qsstresc","title":"Check for non-missing QSSTRESC if QSSTAT is NOT DONE — check_qs_qsstat_qsstresc","text":"check studies PRO outcomes data (.e., QS domain), check within given instrument (e.g., QS.QSCAT='BFI' QS.QSCAT ='MDASI\"), QS.QSSTAT=DONE QSTESTCD=QSALL, populated responses(QS.QSSTRESC) particular visit (QS.VISIT), return dataframe otherwise","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_qs_qsstat_qsstresc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check for non-missing QSSTRESC if QSSTAT is NOT DONE — check_qs_qsstat_qsstresc","text":"","code":"check_qs_qsstat_qsstresc(QS)"},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_qs_qsstat_qsstresc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check for non-missing QSSTRESC if QSSTAT is NOT DONE — check_qs_qsstat_qsstresc","text":"QS Questionnaires SDTM dataset variables USUBJID, QSSTRESC, VISIT, QSSTAT, QSCAT, QSDTC, QSTESTCD","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_qs_qsstat_qsstresc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check for non-missing QSSTRESC if QSSTAT is NOT DONE — check_qs_qsstat_qsstresc","text":"boolean value check failed passed 'msg' attribute test failed","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_qs_qsstat_qsstresc.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Check for non-missing QSSTRESC if QSSTAT is NOT DONE — check_qs_qsstat_qsstresc","text":"Sara Bodach","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_qs_qsstat_qsstresc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check for non-missing QSSTRESC if QSSTAT is NOT DONE — check_qs_qsstat_qsstresc","text":"","code":"QS <- data.frame( STUDYID = 1, USUBJID = c(rep(1,6),rep(2,6)), QSSTRESC = 1:12, VISIT = c(rep(1,3),rep(2,3),rep(1,3),rep(2,3)), QSSTAT = rep(c(\"DONE\",\"NOT DONE\"),6), QSCAT = rep(c(\"INDIVIDUAL\",\"OVERALL\",\"BFI\"),4), QSDTC = \"2016-01-01\", QSTESTCD = \"QSALL\", stringsAsFactors = FALSE )  check_qs_qsstat_qsstresc(QS) #> [1] FALSE #> attr(,\"msg\") #> [1] \"There are non-missing QSSTRESC records for the following visits when QSSTAT=NOT DONE and QSTESTCD=QSALL.  \" #> attr(,\"data\") #>   USUBJID VISIT      QSCAT      QSDTC   QSSTAT QSSTRESC #> 1       1     1    OVERALL 2016-01-01 NOT DONE        2 #> 2       1     2        BFI 2016-01-01 NOT DONE        6 #> 3       1     2 INDIVIDUAL 2016-01-01 NOT DONE        4 #> 4       2     1    OVERALL 2016-01-01 NOT DONE        8 #> 5       2     2        BFI 2016-01-01 NOT DONE       12 #> 6       2     2 INDIVIDUAL 2016-01-01 NOT DONE       10  QS$QSSTRESC[4]=\" \" QS$QSSTRESC[6]=NA QS$QSSTRESC[8]=\".\" check_qs_qsstat_qsstresc(QS) #> [1] FALSE #> attr(,\"msg\") #> [1] \"There are non-missing QSSTRESC records for the following visits when QSSTAT=NOT DONE and QSTESTCD=QSALL.  \" #> attr(,\"data\") #>   USUBJID VISIT      QSCAT      QSDTC   QSSTAT QSSTRESC #> 1       1     1    OVERALL 2016-01-01 NOT DONE        2 #> 2       2     2        BFI 2016-01-01 NOT DONE       12 #> 3       2     2 INDIVIDUAL 2016-01-01 NOT DONE       10  QS$QSSTRESC=NULL check_qs_qsstat_qsstresc(QS) #> [1] FALSE #> attr(,\"msg\") #> [1] \"QS is missing the variable: QSSTRESC\""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_rs_rscat_rsscat.html","id":null,"dir":"Reference","previous_headings":"","what":"Check for patients with populated RSSCAT but missing RSCAT. — check_rs_rscat_rsscat","title":"Check for patients with populated RSSCAT but missing RSCAT. — check_rs_rscat_rsscat","text":"Check patients populated RSSCAT missing RSCAT RS domain help flag potential mapping issue SPA; warrant query Rave.","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_rs_rscat_rsscat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check for patients with populated RSSCAT but missing RSCAT. — check_rs_rscat_rsscat","text":"","code":"check_rs_rscat_rsscat(RS)"},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_rs_rscat_rsscat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check for patients with populated RSSCAT but missing RSCAT. — check_rs_rscat_rsscat","text":"RS Response SDTM dataset variables USUBJID, RSCAT RSSCAT.","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_rs_rscat_rsscat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check for patients with populated RSSCAT but missing RSCAT. — check_rs_rscat_rsscat","text":"boolean value check failed passed 'msg' attribute test failed","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_rs_rscat_rsscat.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Check for patients with populated RSSCAT but missing RSCAT. — check_rs_rscat_rsscat","text":"Saibah Chohan, Ashley Mao, Tina Cho (HackR 2021 Team STA-R)","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_rs_rscat_rsscat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check for patients with populated RSSCAT but missing RSCAT. — check_rs_rscat_rsscat","text":"","code":"RS <- data.frame(  USUBJID = c(\"id1\", \"id1\", \"id2\", \"id2\", \"id3\"),  RSCAT = c(\"A\", \"A\", \"B\", NA, NA),  RSSCAT = c(\"AA\", \"AA\", \"BB\", \"BB\",\"AA\")) check_rs_rscat_rsscat(RS) #> [1] FALSE #> attr(,\"msg\") #> [1] \"There are 2 patients with unpopulated RSCAT values. \" #> attr(,\"data\") #>   USUBJID RSCAT RSSCAT #> 4     id2  <NA>     BB #> 5     id3  <NA>     AA  # Test with missing RSCAT RS$RSCAT = NULL check_rs_rscat_rsscat(RS) #> [1] FALSE #> attr(,\"msg\") #> [1] \"RS is missing the variable: RSCAT\""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_rs_rsdtc_across_visit.html","id":null,"dir":"Reference","previous_headings":"","what":"Check RS Records where the same date occurs across multiple visits — check_rs_rsdtc_across_visit","title":"Check RS Records where the same date occurs across multiple visits — check_rs_rsdtc_across_visit","text":"check identifies records date RSDTC occurs across multiple visits. applies assessments investigator.","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_rs_rsdtc_across_visit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check RS Records where the same date occurs across multiple visits — check_rs_rsdtc_across_visit","text":"","code":"check_rs_rsdtc_across_visit(RS)"},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_rs_rsdtc_across_visit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check RS Records where the same date occurs across multiple visits — check_rs_rsdtc_across_visit","text":"RS Disease Response SDTM dataset variables USUBJID, RSDTC, VISIT","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_rs_rsdtc_across_visit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check RS Records where the same date occurs across multiple visits — check_rs_rsdtc_across_visit","text":"boolean value check failed passed 'msg' attribute test failed","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_rs_rsdtc_across_visit.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Check RS Records where the same date occurs across multiple visits — check_rs_rsdtc_across_visit","text":"Harris","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_rs_rsdtc_across_visit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check RS Records where the same date occurs across multiple visits — check_rs_rsdtc_across_visit","text":"","code":"RS <- data.frame( USUBJID = 1, RSDTC = c(rep(\"2016-01-01\",3), rep(\"2016-06-01\",5), rep(\"2016-06-24\",2)), VISIT = c(rep(\"C1D1\",3), rep(\"C1D2\",3), rep(\"C2D1\",4)), stringsAsFactors=FALSE)  check_rs_rsdtc_across_visit(RS) #> [1] FALSE #> attr(,\"msg\") #> [1] \"2 records with same date at >1 visit. \" #> attr(,\"data\") #>   USUBJID      RSDTC VISIT #> 1       1 2016-06-01  C1D2 #> 2       1 2016-06-01  C2D1"},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_rs_rsdtc_visit.html","id":null,"dir":"Reference","previous_headings":"","what":"Check missing RSDTC and VISIT — check_rs_rsdtc_visit","title":"Check missing RSDTC and VISIT — check_rs_rsdtc_visit","text":"check looks missing RSDTC VISIT values RSORRES missing RSSTAT equal \"DONE\" RS dataset returns data frame. applies assessments investigator.","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_rs_rsdtc_visit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check missing RSDTC and VISIT — check_rs_rsdtc_visit","text":"","code":"check_rs_rsdtc_visit(RS)"},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_rs_rsdtc_visit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check missing RSDTC and VISIT — check_rs_rsdtc_visit","text":"RS Disease Response SDTM dataset variables USUBJID, RSDTC, RSORRES, VISIT, RSSTAT","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_rs_rsdtc_visit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check missing RSDTC and VISIT — check_rs_rsdtc_visit","text":"boolean value check failed passed 'msg' attribute test failed","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_rs_rsdtc_visit.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Check missing RSDTC and VISIT — check_rs_rsdtc_visit","text":"Peggy Wen, Stella Banjo (HackR 2021)","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_rs_rsdtc_visit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check missing RSDTC and VISIT — check_rs_rsdtc_visit","text":"","code":"RS <- data.frame( USUBJID = 1:10, RSDTC = 1:10, RSORRES = \"THING\", VISIT = \"C1D1\", RSSTAT = 1:10, RSEVAL = c(\"NA\",\"\",\"IRF\",\"investigator\",rep(\"INVESTIGATOR\",6)), stringsAsFactors=FALSE )  RS$RSDTC[1]=\"\" RS$RSDTC[2]=\"NA\" RS$RSDTC[3]=NA RS$VISIT[3]=\"\" RS$VISIT[4]=\"NA\" RS$VISIT[5]=NA check_rs_rsdtc_visit(RS) #> [1] FALSE #> attr(,\"msg\") #> [1] \"There are 4 records with missing RSDTC or VISIT. \" #> attr(,\"data\") #>   USUBJID RSDTC RSORRES VISIT RSSTAT       RSEVAL #> 1       1         THING  C1D1      1           NA #> 2       2    NA   THING  C1D1      2              #> 3       4     4   THING    NA      4 investigator #> 4       5     5   THING  <NA>      5 INVESTIGATOR  RS$RSORRES[1]=\"\" check_rs_rsdtc_visit(RS) #> [1] FALSE #> attr(,\"msg\") #> [1] \"There are 3 records with missing RSDTC or VISIT. \" #> attr(,\"data\") #>   USUBJID RSDTC RSORRES VISIT RSSTAT       RSEVAL #> 1       2    NA   THING  C1D1      2              #> 2       4     4   THING    NA      4 investigator #> 3       5     5   THING  <NA>      5 INVESTIGATOR  RS$RSORRES[4] = \"THING 1\" RS$RSORRES[5] = \"THING 2\"  check_rs_rsdtc_visit(RS) #> [1] FALSE #> attr(,\"msg\") #> [1] \"There are 3 records with missing RSDTC or VISIT. \" #> attr(,\"data\") #>   USUBJID RSDTC RSORRES VISIT RSSTAT       RSEVAL #> 1       2    NA   THING  C1D1      2              #> 2       4     4 THING 1    NA      4 investigator #> 3       5     5 THING 2  <NA>      5 INVESTIGATOR"},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_rs_rsdtc_visit_ordinal_error.html","id":null,"dir":"Reference","previous_headings":"","what":"Check that all RS dates for INV Overall Response are duplicated or\nearlier than last visit's (possible date entry error) — check_rs_rsdtc_visit_ordinal_error","title":"Check that all RS dates for INV Overall Response are duplicated or\nearlier than last visit's (possible date entry error) — check_rs_rsdtc_visit_ordinal_error","text":"check identifies RSDTC values RSEVAL == 'INVESTIGATOR' RSTESTCD == 'OVRLRESP' duplicated earlier last visit's. Unscheduled 'DONE' visits excluded.","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_rs_rsdtc_visit_ordinal_error.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check that all RS dates for INV Overall Response are duplicated or\nearlier than last visit's (possible date entry error) — check_rs_rsdtc_visit_ordinal_error","text":"","code":"check_rs_rsdtc_visit_ordinal_error(RS)"},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_rs_rsdtc_visit_ordinal_error.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check that all RS dates for INV Overall Response are duplicated or\nearlier than last visit's (possible date entry error) — check_rs_rsdtc_visit_ordinal_error","text":"RS Response SDTM dataset variables USUBJID, VISITNUM, VISIT, RSDTC, RSTESTCD, RSEVAL, RSSTAT","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_rs_rsdtc_visit_ordinal_error.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check that all RS dates for INV Overall Response are duplicated or\nearlier than last visit's (possible date entry error) — check_rs_rsdtc_visit_ordinal_error","text":"boolean value check failed passed 'msg' attribute test failed","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_rs_rsdtc_visit_ordinal_error.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Check that all RS dates for INV Overall Response are duplicated or\nearlier than last visit's (possible date entry error) — check_rs_rsdtc_visit_ordinal_error","text":"James Zhang","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_rs_rsdtc_visit_ordinal_error.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check that all RS dates for INV Overall Response are duplicated or\nearlier than last visit's (possible date entry error) — check_rs_rsdtc_visit_ordinal_error","text":"","code":"# no cases RS<- data.frame(USUBJID = 101:102,                 RSDTC=rep(c(\"2017-01-01T08:25\", \"2017-01-05T09:25\",                        \"2017-01-15T10:25\",\"2017-01-20T08:25\",\"2017-01-25T08:25\"), 2),                 VISITNUM=rep(1:5,2),                 VISIT=rep(c(\"Screening\", \"Cycle 1\", \"Cycle 2\",\"Cycle 3\",\"Follow-up\"),2),                 RSTESTCD=\"OVRLRESP\",                 RSEVAL=\"INVESTIGATOR\",                 RSSTAT=\"\",                 stringsAsFactors=FALSE) check_rs_rsdtc_visit_ordinal_error(RS) #> [1] TRUE  # adding cases with earler date RS$RSDTC[RS$USUBJID == 101 & RS$VISIT == \"Cycle 3\"] <- \"2017-01-02T08:25\" RS$RSDTC[RS$USUBJID == 102 & RS$VISIT == \"Cycle 1\"] <- \"2017-01-01T06:25\" check_rs_rsdtc_visit_ordinal_error(RS) #> [1] FALSE #> attr(,\"msg\") #> [1] \"RS has 2 records with Possible RSDTC data entry error. \" #> attr(,\"data\") #>   USUBJID VISITNUM   VISIT            RSDTC RSTESTCD       RSEVAL RSSTAT #> 1     101        4 Cycle 3 2017-01-02T08:25 OVRLRESP INVESTIGATOR        #> 2     102        2 Cycle 1 2017-01-01T06:25 OVRLRESP INVESTIGATOR        #>       last.vis.dtc  last.vis visit.order                       check.flag #> 1 2017-01-15T10:25   Cycle 2           4 Datetime earlier than last Visit #> 2 2017-01-01T08:25 Screening           2 Datetime earlier than last Visit"},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_sc_dm_eligcrit.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if Study Eye met Study Eligibility criteria per SC Subject Characteristics Domain — check_sc_dm_eligcrit","title":"Check if Study Eye met Study Eligibility criteria per SC Subject Characteristics Domain — check_sc_dm_eligcrit","text":"Check SC.SCCAT = \"STUDY EYE SELECTION\" SCTESTCD = \"ELIGEYE\", Check SC.SCORRES OS, OD, OU. Flag Missing value.","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_sc_dm_eligcrit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if Study Eye met Study Eligibility criteria per SC Subject Characteristics Domain — check_sc_dm_eligcrit","text":"","code":"check_sc_dm_eligcrit(DM, SC)"},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_sc_dm_eligcrit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if Study Eye met Study Eligibility criteria per SC Subject Characteristics Domain — check_sc_dm_eligcrit","text":"DM Subject Demographics Dataset variable USUBJID SC Subject Characteristics Dataset Ophtho Study variables USUBJID, SCTESTCD, SCTEST, SCCAT, SCORRES, SCDTC","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_sc_dm_eligcrit.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Check if Study Eye met Study Eligibility criteria per SC Subject Characteristics Domain — check_sc_dm_eligcrit","text":"Monarch Shah (HackR 2021 Team Eye)","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_sc_dm_eligcrit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if Study Eye met Study Eligibility criteria per SC Subject Characteristics Domain — check_sc_dm_eligcrit","text":"","code":"dm <- data.frame(USUBJID = c(1,2)) sc <- data.frame(USUBJID  = c(1,1,1,2,2,2),                  SCTEST   = c(\"Eye Meeting Eligibility Criteria\",                               \"Focus of Study-Specific Interest\",                               \" \",                               \"Eye Meeting Eligibility Criteria\",                               \"Focus of Study-Specific Interest\", \" \"),                  SCTESTCD = c(\"ELIGEYE\", \"FOCID\", \"\", \"ELIGEYE\", \"FOCID\", \"\"),                  SCCAT    = c(\"STUDY EYE SELECTION\",                               \"STUDY EYE SELECTION\",                               \"\",                               \"STUDY EYE SELECTION\",                               \"STUDY EYE SELECTION\",                               \"\"),                  SCORRES  = c(\"OS\", \"OS\", \"\", \"\", \"OU\", \"\"),                  SCDTC    = rep(\"2021-01-01\", 6),                  stringsAsFactors = FALSE)  check_sc_dm_eligcrit(SC=sc, DM=dm) #> [1] FALSE #> attr(,\"msg\") #> [1] \"1 record(s) missing eye(s) that met study criteria in SC. \" #> attr(,\"data\") #>   USUBJID SCTESTCD                           SCTEST               SCCAT SCORRES #> 1       2  ELIGEYE Eye Meeting Eligibility Criteria STUDY EYE SELECTION         #>        SCDTC #> 1 2021-01-01  dm <- data.frame(USUBJID = c(1,2,3,4)) sc$SCORRES[4] = \"OS\" check_sc_dm_eligcrit(SC=sc, DM=dm) #> [1] FALSE #> attr(,\"msg\") #> [1] \"2 record(s) missing eye(s) that met study criteria in SC. \" #> attr(,\"data\") #>   USUBJID SCTESTCD SCTEST SCCAT SCORRES SCDTC #> 1       3     <NA>   <NA>  <NA>    <NA>  <NA> #> 2       4     <NA>   <NA>  <NA>    <NA>  <NA>  sc$SCORRES <- NULL check_sc_dm_eligcrit(SC=sc, DM=dm) #> [1] FALSE #> attr(,\"msg\") #> [1] \"SC is missing the variable: SCORRES\""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_sc_dm_seyeselc.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if Subject Characteristics, Study Eye Selection data is missing — check_sc_dm_seyeselc","title":"Check if Subject Characteristics, Study Eye Selection data is missing — check_sc_dm_seyeselc","text":"Check SC.SCCAT = \"STUDY EYE SELECTION\" SCTESTCD = \"FOCID\", Check SC.SCORRES OS, OD, OU. Flag Missing value.","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_sc_dm_seyeselc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if Subject Characteristics, Study Eye Selection data is missing — check_sc_dm_seyeselc","text":"","code":"check_sc_dm_seyeselc(DM, SC)"},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_sc_dm_seyeselc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if Subject Characteristics, Study Eye Selection data is missing — check_sc_dm_seyeselc","text":"DM Subject Demographics Dataset variable USUBJID SC Subject Characteristics Dataset Ophtho Study variables USUBJID, SCTESTCD, SCTEST, SCCAT, SCORRES, SCDTC","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_sc_dm_seyeselc.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Check if Subject Characteristics, Study Eye Selection data is missing — check_sc_dm_seyeselc","text":"Monarch Shah (HackR 2021 Team Eye)","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_sc_dm_seyeselc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if Subject Characteristics, Study Eye Selection data is missing — check_sc_dm_seyeselc","text":"","code":"dm <- data.frame(USUBJID = c(1,2)) sc <- data.frame(USUBJID  = c(1,1,1,2,2,2),                  SCTEST   = c(\"Eye Meeting Eligibility Criteria\",                               \"Focus of Study-Specific Interest\",                               \" \",                               \"Eye Meeting Eligibility Criteria\",                               \"Focus of Study-Specific Interest\", \" \"),                  SCTESTCD = c(\"ELIGEYE\", \"FOCID\", \"\", \"ELIGEYE\", \"FOCID\", \"\"),                  SCCAT    = c(\"STUDY EYE SELECTION\",                               \"STUDY EYE SELECTION\",                               \"\",                               \"STUDY EYE SELECTION\",                               \"STUDY EYE SELECTION\", \"\"),                  SCORRES  = c(\"LEFT\", \"OS\", \"\", \"RIGHT\", \"OD\", \"\"),                  SCDTC    = rep(\"2021-01-01\", 6),                  stringsAsFactors = FALSE)  check_sc_dm_seyeselc(SC=sc, DM=dm) #> [1] TRUE  dm <- data.frame(USUBJID = c(1,2,3,4)) sc <- data.frame(USUBJID  = c(1,1,1,2,2,2),                  SCTEST   = c(\"Eye Meeting Eligibility Criteria\",                               \"Focus of Study-Specific Interest\",                               \" \",                               \"Eye Meeting Eligibility Criteria\",                               \"Focus of Study-Specific Interest\",                               \" \"),                  SCTESTCD = c(\"ELIGEYE\", \"FOCID\", \"\", \"ELIGEYE\", \"FOCID\", \"\"),                  SCCAT    = c(\"STUDY EYE SELECTION\",                               \"STUDY EYE SELECTION\",                               \"\",                               \"STUDY EYE SELECTION\",                               \"STUDY EYE SELECTION\", \"\"),                  SCORRES  = c(\"LEFT\", \"OS\", \"\", \"RIGHT\", \"\", \"\"),                  SCDTC    = rep(\"2021-01-01\", 6),                  stringsAsFactors = FALSE)  check_sc_dm_seyeselc(SC=sc, DM=dm) #> [1] FALSE #> attr(,\"msg\") #> [1] \"3 Record(s) with Study Eye Selection Missing. \" #> attr(,\"data\") #>   USUBJID SCTESTCD                           SCTEST               SCCAT SCORRES #> 1       2    FOCID Focus of Study-Specific Interest STUDY EYE SELECTION         #> 2       3     <NA>                             <NA>                <NA>    <NA> #> 3       4     <NA>                             <NA>                <NA>    <NA> #>        SCDTC #> 1 2021-01-01 #> 2       <NA> #> 3       <NA>"},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ss_ssdtc_alive_dm.html","id":null,"dir":"Reference","previous_headings":"","what":"Check non-missing last ALIVE status date in SS is before than death date in DM — check_ss_ssdtc_alive_dm","title":"Check non-missing last ALIVE status date in SS is before than death date in DM — check_ss_ssdtc_alive_dm","text":"check looks non-missing SS.SSDTC SS.SSORRES contains 'ALIVE' Subject Status Date/Time Assessments greater Start Date/Time Disposition Event(SS.SSDTC > DS.DSSTDTC)","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ss_ssdtc_alive_dm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check non-missing last ALIVE status date in SS is before than death date in DM — check_ss_ssdtc_alive_dm","text":"","code":"check_ss_ssdtc_alive_dm(SS, DM)"},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ss_ssdtc_alive_dm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check non-missing last ALIVE status date in SS is before than death date in DM — check_ss_ssdtc_alive_dm","text":"SS Subject Status SDTM dataset variables USUBJID, SSDTC, SSORRES, SSTESTCD, VISIT DM Demographics SDTM dataset variables USUBJID, DTHDTC","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ss_ssdtc_alive_dm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check non-missing last ALIVE status date in SS is before than death date in DM — check_ss_ssdtc_alive_dm","text":"boolean value check failed passed 'msg' attribute test failed","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ss_ssdtc_alive_dm.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Check non-missing last ALIVE status date in SS is before than death date in DM — check_ss_ssdtc_alive_dm","text":"Vira Vrakina","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ss_ssdtc_alive_dm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check non-missing last ALIVE status date in SS is before than death date in DM — check_ss_ssdtc_alive_dm","text":"","code":"SS <- data.frame(  USUBJID = 1:5,  SSDTC = \"2020-01-02\",  SSTESTCD = \"SURVSTAT\",  SSORRES  = c(\"DEAD\",\"DEAD\",\"ALIVE\",\"DEAD\",\"ALIVE\"),  VISIT = \"WEEK 4\" )   DM <- data.frame(  USUBJID = 1:5,  DTHDTC = \"2020-01-03\" )  check_ss_ssdtc_alive_dm(SS, DM) #> [1] TRUE  SS <- data.frame(  USUBJID = 1:5,  SSDTC = \"2020-01-04\",  SSTESTCD = \"SURVSTAT\",  SSORRES  = c(\"DEAD\",\"DEAD\",\"ALIVE\",\"DEAD\",\"ALIVE\"),  VISIT = \"WEEK 4\" )  DM <- data.frame(  USUBJID = 1:5,  DTHDTC = c(\"2020-01-04\", \"2020-01-05\", \"2020-01-03\", \"2020-01-04\", \"2020-01-05\") )  check_ss_ssdtc_alive_dm(SS, DM) #> [1] FALSE #> attr(,\"msg\") #> [1] \"1 patient(s) with ALIVE status date in SS domain later than death date in DM domain. \" #> attr(,\"data\") #>   USUBJID      SSDTC SSORRES SSTESTCD  VISIT     DTHDTC #> 1       3 2020-01-04   ALIVE SURVSTAT WEEK 4 2020-01-03"},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ss_ssdtc_dead_ds.html","id":null,"dir":"Reference","previous_headings":"","what":"Check non-missing DEAD status date in SS and non-missing according DS record with death date\nwhere status date is greater or equal to death date — check_ss_ssdtc_dead_ds","title":"Check non-missing DEAD status date in SS and non-missing according DS record with death date\nwhere status date is greater or equal to death date — check_ss_ssdtc_dead_ds","text":"check looks missing death date DS dataset DEAD status date SS dataset Subject Status Date/Time Assessments less Start Date/Time Disposition Event(SS.SSDTC < DS.DSSTDTC)","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ss_ssdtc_dead_ds.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check non-missing DEAD status date in SS and non-missing according DS record with death date\nwhere status date is greater or equal to death date — check_ss_ssdtc_dead_ds","text":"","code":"check_ss_ssdtc_dead_ds(SS, DS)"},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ss_ssdtc_dead_ds.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check non-missing DEAD status date in SS and non-missing according DS record with death date\nwhere status date is greater or equal to death date — check_ss_ssdtc_dead_ds","text":"SS Subject Status SDTM dataset variables USUBJID, SSDTC, SSSTRESC, VISIT DS Disposition SDTM dataset variables USUBJID, DSSTDTC, DSDECOD, DSCAT","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ss_ssdtc_dead_ds.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check non-missing DEAD status date in SS and non-missing according DS record with death date\nwhere status date is greater or equal to death date — check_ss_ssdtc_dead_ds","text":"boolean value check failed passed 'msg' attribute test failed","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ss_ssdtc_dead_ds.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Check non-missing DEAD status date in SS and non-missing according DS record with death date\nwhere status date is greater or equal to death date — check_ss_ssdtc_dead_ds","text":"Vira Vrakina","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ss_ssdtc_dead_ds.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check non-missing DEAD status date in SS and non-missing according DS record with death date\nwhere status date is greater or equal to death date — check_ss_ssdtc_dead_ds","text":"","code":"SS <- data.frame(  USUBJID = 1:5,  SSDTC = \"2020-01-02\",  SSSTRESC  = c(\"DEAD\",\"DEAD\",\"ALIVE\",\"DEAD\",\"ALIVE\"),  VISIT = \"FOLLOW-UP\" )   DS <- data.frame(  USUBJID = 1:5,  DSSTDTC  = c(\"2020-01-02\",\"2020-01-02\", \"2020-01-01\", \"2020-01-03\", \"2020-01-01\"),  DSDECOD = c(rep('DEATH', 5)),  DSCAT   = c(\"OTHER EVENT\", rep(\"DISPOSITION EVENT\", 4)) )  check_ss_ssdtc_dead_ds(SS, DS) #> [1] FALSE #> attr(,\"msg\") #> [1] \"2 patient(s) with death information in SS domain but no death information in DS domain or date with DEAD status in SS dataset is less than death date in DS dataset. \" #> attr(,\"data\") #>   USUBJID      SSDTC SSSTRESC     VISIT    DSSTDTC DSDECOD             DSCAT #> 1       1 2020-01-02     DEAD FOLLOW-UP       <NA>    <NA>              <NA> #> 2       4 2020-01-02     DEAD FOLLOW-UP 2020-01-03   DEATH DISPOSITION EVENT  SS <- data.frame(  USUBJID = 1:5,  SSDTC = \"2020-01-02\",  SSSTRESC  = c( rep(\"DEAD\", 5)),  VISIT = \"FOLLOW-UP\" )   DS <- data.frame(  USUBJID = 1:5,  DSSTDTC  = c(\"2020-01-02\",\"2020-01-02\", \"2020-01-01\", \"2020-01-03\", \"2020-01-01\"),  DSDECOD = c(rep('DEATH', 5)),  DSCAT   = c(rep(\"DISPOSITION EVENT\", 5)) )  check_ss_ssdtc_dead_ds(SS, DS) #> [1] FALSE #> attr(,\"msg\") #> [1] \"1 patient(s) with death information in SS domain but no death information in DS domain or date with DEAD status in SS dataset is less than death date in DS dataset. \" #> attr(,\"data\") #>   USUBJID      SSDTC SSSTRESC     VISIT    DSSTDTC DSDECOD             DSCAT #> 1       4 2020-01-02     DEAD FOLLOW-UP 2020-01-03   DEATH DISPOSITION EVENT  SS <- data.frame(  USUBJID = 1:5,  SSDTC = \"2020-01-02\",  SSSTRESC  = c(rep(\"DEAD\", 5)),  VISIT = \"FOLLOW-UP\" )   DS <- data.frame(  USUBJID = 1:5,  DSSTDTC  = 2,  DSDECOD = c(rep('DEATH', 5)),  DSCAT   = c(rep(\"DISPOSITION EVENT\", 5)) )  check_ss_ssdtc_dead_ds(SS, DS) #> [1] TRUE"},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ss_ssdtc_dead_dthdtc.html","id":null,"dir":"Reference","previous_headings":"","what":"Check non-missing DEAD status date in SS and an according DM record with death date\nwhere status date is greater or equal to death date — check_ss_ssdtc_dead_dthdtc","title":"Check non-missing DEAD status date in SS and an according DM record with death date\nwhere status date is greater or equal to death date — check_ss_ssdtc_dead_dthdtc","text":"check looks non-missing SS.SSDTC SS.SSSTRESC='DEAD' Subject Status Date/Time Assessments less Start Date/Time Disposition Event(SS.SSDTC < DS.DSSTDTC)","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ss_ssdtc_dead_dthdtc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check non-missing DEAD status date in SS and an according DM record with death date\nwhere status date is greater or equal to death date — check_ss_ssdtc_dead_dthdtc","text":"","code":"check_ss_ssdtc_dead_dthdtc(SS, DM)"},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ss_ssdtc_dead_dthdtc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check non-missing DEAD status date in SS and an according DM record with death date\nwhere status date is greater or equal to death date — check_ss_ssdtc_dead_dthdtc","text":"SS Subject Status SDTM dataset variables USUBJID, SSDTC, SSSTRESC, VISIT DM Demographics SDTM dataset variables USUBJID, DTHDTC","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ss_ssdtc_dead_dthdtc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check non-missing DEAD status date in SS and an according DM record with death date\nwhere status date is greater or equal to death date — check_ss_ssdtc_dead_dthdtc","text":"boolean value check failed passed 'msg' attribute test failed","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ss_ssdtc_dead_dthdtc.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Check non-missing DEAD status date in SS and an according DM record with death date\nwhere status date is greater or equal to death date — check_ss_ssdtc_dead_dthdtc","text":"Vira Vrakina","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ss_ssdtc_dead_dthdtc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check non-missing DEAD status date in SS and an according DM record with death date\nwhere status date is greater or equal to death date — check_ss_ssdtc_dead_dthdtc","text":"","code":"SS <- data.frame(  USUBJID = 1:5,  SSDTC = \"2020-01-02\",  SSSTRESC  = c(\"DEAD\",\"DEAD\",\"ALIVE\",\"DEAD\",\"ALIVE\"),  VISIT = \"DAY 10\" )  DM <- data.frame(  USUBJID = 1:5,  DTHDTC = \"2020-01-02\" )  check_ss_ssdtc_dead_dthdtc(SS, DM) #> [1] TRUE  SS <- data.frame(  USUBJID = 1:5,  SSDTC = \"2020-01-02\",  SSSTRESC  = c(\"DEAD\",\"DEAD\",\"ALIVE\",\"DEAD\",\"ALIVE\"),  VISIT = \"FOLLOW-UP\" )  DM <- data.frame(  USUBJID = 1:5,  DTHDTC = c(\"2020-01-01\",\"2020-01-02\",\"2020-01-03\",\"2020-01-04\",\"2020-01-02\") )  check_ss_ssdtc_dead_dthdtc(SS, DM) #> [1] FALSE #> attr(,\"msg\") #> [1] \"1 patient(s) with DEAD status where in SS domain where SS date is less than death date in DM domain. \" #> attr(,\"data\") #>   USUBJID      SSDTC SSSTRESC     VISIT     DTHDTC #> 1       4 2020-01-02     DEAD FOLLOW-UP 2020-01-04"},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ss_ssstat_ssorres.html","id":null,"dir":"Reference","previous_headings":"","what":"Check for non-missing SSORRES if SSSTAT is NOT DONE — check_ss_ssstat_ssorres","title":"Check for non-missing SSORRES if SSSTAT is NOT DONE — check_ss_ssstat_ssorres","text":"check studies LTFU mapped SS domain, check 'DONE' (Unable Contact), response (SSORRES)","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ss_ssstat_ssorres.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check for non-missing SSORRES if SSSTAT is NOT DONE — check_ss_ssstat_ssorres","text":"","code":"check_ss_ssstat_ssorres(SS, preproc = identity, ...)"},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ss_ssstat_ssorres.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check for non-missing SSORRES if SSSTAT is NOT DONE — check_ss_ssstat_ssorres","text":"SS Long-Term Survival Follow-SDTM dataset variables USUBJID, VISIT, SSSTAT, SSDTC, SSORRES, SSSPID (optional) preproc optional company specific preprocessing script ... arguments passed methods","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ss_ssstat_ssorres.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check for non-missing SSORRES if SSSTAT is NOT DONE — check_ss_ssstat_ssorres","text":"boolean value check failed passed 'msg' attribute test failed","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ss_ssstat_ssorres.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Check for non-missing SSORRES if SSSTAT is NOT DONE — check_ss_ssstat_ssorres","text":"Sara Bodach","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ss_ssstat_ssorres.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check for non-missing SSORRES if SSSTAT is NOT DONE — check_ss_ssstat_ssorres","text":"","code":"SS <- data.frame( STUDYID = 1, USUBJID = c(rep(1,6),rep(2,6)), SSSTRESC = c(\"ALIVE\", \"DEAD\", \"ALIVE\", \"\", \"\", \"U\"), SSORRES = c(\"ALIVE\", \"DEAD\", \"ALIVE\", \"\", \"\", \"U\"), VISIT = rep(c(\"SURVIVAL FOLLOW UP 3 MONTHS\"),6), SSSTAT = rep(c(\"\",\"NOT DONE\"),6), SSDTC = \"2016-01-01\", SSSPID = \"\", stringsAsFactors = FALSE )  check_ss_ssstat_ssorres(SS) #> [1] FALSE #> attr(,\"msg\") #> [1] \"SS (LTFU) has 4 record(s) for 2 unique patient(s) with non-missing SSORRES when SSSTAT=NOT DONE (no contact).  \" #> attr(,\"data\") #>   USUBJID                       VISIT      SSDTC SSORRES   SSSTAT #> 1       1 SURVIVAL FOLLOW UP 3 MONTHS 2016-01-01    DEAD NOT DONE #> 2       1 SURVIVAL FOLLOW UP 3 MONTHS 2016-01-01       U NOT DONE #> 3       2 SURVIVAL FOLLOW UP 3 MONTHS 2016-01-01    DEAD NOT DONE #> 4       2 SURVIVAL FOLLOW UP 3 MONTHS 2016-01-01       U NOT DONE  SS$SSORRES[2]=NA check_ss_ssstat_ssorres(SS) #> [1] FALSE #> attr(,\"msg\") #> [1] \"SS (LTFU) has 3 record(s) for 2 unique patient(s) with non-missing SSORRES when SSSTAT=NOT DONE (no contact).  \" #> attr(,\"data\") #>   USUBJID                       VISIT      SSDTC SSORRES   SSSTAT #> 1       1 SURVIVAL FOLLOW UP 3 MONTHS 2016-01-01       U NOT DONE #> 2       2 SURVIVAL FOLLOW UP 3 MONTHS 2016-01-01    DEAD NOT DONE #> 3       2 SURVIVAL FOLLOW UP 3 MONTHS 2016-01-01       U NOT DONE  SS$SSSPID=\"FORMNAME-R:5/L:5XXXX\" check_ss_ssstat_ssorres(SS,preproc=roche_derive_rave_row) #> [1] FALSE #> attr(,\"msg\") #> [1] \"SS (LTFU) has 3 record(s) for 2 unique patient(s) with non-missing SSORRES when SSSTAT=NOT DONE (no contact).  \" #> attr(,\"data\") #>   USUBJID                       VISIT      SSDTC SSORRES   SSSTAT         RAVE #> 1       1 SURVIVAL FOLLOW UP 3 MONTHS 2016-01-01       U NOT DONE FORMNAME-R:5 #> 2       2 SURVIVAL FOLLOW UP 3 MONTHS 2016-01-01    DEAD NOT DONE FORMNAME-R:5 #> 3       2 SURVIVAL FOLLOW UP 3 MONTHS 2016-01-01       U NOT DONE FORMNAME-R:5  SS$SSORRES[6]=NA SS$SSORRES[8]=\"\" SS$SSORRES[12]=NA check_ss_ssstat_ssorres(SS) #> [1] TRUE  SS$SSORRES=NULL check_ss_ssstat_ssorres(SS) #> [1] FALSE #> attr(,\"msg\") #> [1] \"SS is missing the variable: SSORRES\""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_tr_dup.html","id":null,"dir":"Reference","previous_headings":"","what":"Check for duplicate TR records — check_tr_dup","title":"Check for duplicate TR records — check_tr_dup","text":"check looks duplicate TR records returns data frame. applies assessments investigator.","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_tr_dup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check for duplicate TR records — check_tr_dup","text":"","code":"check_tr_dup(TR)"},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_tr_dup.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check for duplicate TR records — check_tr_dup","text":"TR TR dataframe variables USUBJID, TRLINKID, TRTESTCD, TRCAT, TRSTRESC, TRSTRESU, VISITDY, TRDTC","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_tr_dup.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Check for duplicate TR records — check_tr_dup","text":"Joel Laxamana","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_tr_dup.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check for duplicate TR records — check_tr_dup","text":"","code":"TR <- data.frame(  USUBJID  = c(1,1,2,2),  TRCAT    = c(1,1,2,2),  TRTESTCD = c(1,1,2,2),  TRLINKID = c(1,1,2,2),  TRSPID   = c(1,1,2,2),  TRDTC    = c(1,1,2,2),  TRSTRESC = c(1,1,2,2) )  check_tr_dup(TR) #> [1] FALSE #> attr(,\"msg\") #> [1] \"There are 2 duplicated TR records. \" #> attr(,\"data\") #>   USUBJID TRCAT TRTESTCD TRLINKID TRSPID TRDTC TRSTRESC #> 1       1     1        1        1      1     1        1 #> 2       2     2        2        2      2     2        2"},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_tr_trdtc_across_visit.html","id":null,"dir":"Reference","previous_headings":"","what":"Check TR Longest Diameter Records where the same date occurs accross multiple visits — check_tr_trdtc_across_visit","title":"Check TR Longest Diameter Records where the same date occurs accross multiple visits — check_tr_trdtc_across_visit","text":"check identifies records date TRDTC occurs across multiple visits TRTESTCD \"LDIAM\". applies assessments investigator.","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_tr_trdtc_across_visit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check TR Longest Diameter Records where the same date occurs accross multiple visits — check_tr_trdtc_across_visit","text":"","code":"check_tr_trdtc_across_visit(TR)"},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_tr_trdtc_across_visit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check TR Longest Diameter Records where the same date occurs accross multiple visits — check_tr_trdtc_across_visit","text":"TR Tumor Result SDTM dataset variables USUBJID, TRDTC, VISIT, TRTESTCD","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_tr_trdtc_across_visit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check TR Longest Diameter Records where the same date occurs accross multiple visits — check_tr_trdtc_across_visit","text":"boolean value check failed passed 'msg' attribute test failed","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_tr_trdtc_across_visit.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Check TR Longest Diameter Records where the same date occurs accross multiple visits — check_tr_trdtc_across_visit","text":"Harris","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_tr_trdtc_across_visit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check TR Longest Diameter Records where the same date occurs accross multiple visits — check_tr_trdtc_across_visit","text":"","code":"TR <- data.frame( USUBJID = 1, TRDTC = c(rep(\"2016-01-01\",3), rep(\"2016-06-01\",5), rep(\"2016-06-24\",2)), VISIT = c(rep(\"C1D1\",3), rep(\"C1D2\",3), rep(\"C2D1\",4)), TRTESTCD = c(rep(\"LDIAM\",7),rep(\"SAXIS\",3)), stringsAsFactors=FALSE)  check_tr_trdtc_across_visit(TR) #> [1] FALSE #> attr(,\"msg\") #> [1] \"There are 2 TR Longest Diameter records where the same date occurs accross multiple visits. \" #> attr(,\"data\") #>   USUBJID      TRDTC VISIT TRTESTCD #> 1       1 2016-06-01  C1D2    LDIAM #> 2       1 2016-06-01  C2D1    LDIAM"},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_tr_trdtc_visit_ordinal_error.html","id":null,"dir":"Reference","previous_headings":"","what":"Check that all TR dates by INV are duplicated or earlier than\nlast visit's (possible date entry error) — check_tr_trdtc_visit_ordinal_error","title":"Check that all TR dates by INV are duplicated or earlier than\nlast visit's (possible date entry error) — check_tr_trdtc_visit_ordinal_error","text":"check identifies TRDTC values TREVAL == 'INVESTIGATOR' duplicated earlier last visit's. Unscheduled 'DONE' visits excluded.","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_tr_trdtc_visit_ordinal_error.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check that all TR dates by INV are duplicated or earlier than\nlast visit's (possible date entry error) — check_tr_trdtc_visit_ordinal_error","text":"","code":"check_tr_trdtc_visit_ordinal_error(TR)"},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_tr_trdtc_visit_ordinal_error.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check that all TR dates by INV are duplicated or earlier than\nlast visit's (possible date entry error) — check_tr_trdtc_visit_ordinal_error","text":"TR Tumor Response Measurement SDTM dataset variables USUBJID, VISITNUM, VISIT, TRDTC, TREVAL, TRSTAT","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_tr_trdtc_visit_ordinal_error.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check that all TR dates by INV are duplicated or earlier than\nlast visit's (possible date entry error) — check_tr_trdtc_visit_ordinal_error","text":"boolean value check failed passed 'msg' attribute test failed","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_tr_trdtc_visit_ordinal_error.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Check that all TR dates by INV are duplicated or earlier than\nlast visit's (possible date entry error) — check_tr_trdtc_visit_ordinal_error","text":"James Zhang","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_tr_trdtc_visit_ordinal_error.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check that all TR dates by INV are duplicated or earlier than\nlast visit's (possible date entry error) — check_tr_trdtc_visit_ordinal_error","text":"","code":"# no case TR<- data.frame(USUBJID = 101:102,                 TRSEQ=rep(1:5,2),                 TRDTC=rep(c(\"2017-01-01T08:25\", \"2017-01-05T09:25\",                    \"2017-01-15T10:25\",\"2017-01-20T08:25\",\"2017-01-25T08:25\"), 2),                 VISITNUM=rep(1:5,2),                 VISIT=rep(c(\"Screening\", \"Cycle 1\", \"Cycle 2\",\"Cycle 3\",\"Follow-up\"),2),                 TREVAL=\"INVESTIGATOR\",                 TRSTAT=\"\",                 stringsAsFactors=FALSE) check_tr_trdtc_visit_ordinal_error(TR) #> [1] TRUE  # Cases with earler datetime TR$TRDTC[TR$USUBJID == 101 & TR$VISIT == \"Cycle 3\"] <- \"2017-01-02T08:25\" TR$TRDTC[TR$USUBJID == 102 & TR$VISIT == \"Cycle 1\"] <- \"2017-01-01T06:25\" check_tr_trdtc_visit_ordinal_error(TR) #> [1] FALSE #> attr(,\"msg\") #> [1] \"TR has 2 records with Possible TRDTC data entry error. \" #> attr(,\"data\") #>   USUBJID VISITNUM   VISIT            TRDTC       TREVAL TRSTAT #> 1     101        4 Cycle 3 2017-01-02T08:25 INVESTIGATOR        #> 2     102        2 Cycle 1 2017-01-01T06:25 INVESTIGATOR        #>       last.vis.dtc  last.vis visit.order                       check.flag #> 1 2017-01-15T10:25   Cycle 2           4 Datetime earlier than last Visit #> 2 2017-01-01T08:25 Screening           2 Datetime earlier than last Visit"},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_tr_trstresn_ldiam.html","id":null,"dir":"Reference","previous_headings":"","what":"Check for TR records with missing TRSTRESN for LDIAM — check_tr_trstresn_ldiam","title":"Check for TR records with missing TRSTRESN for LDIAM — check_tr_trstresn_ldiam","text":"checks looks TR records missing values numeric result/finding LDIAM tumor assessment test. applies assessments investigator.","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_tr_trstresn_ldiam.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check for TR records with missing TRSTRESN for LDIAM — check_tr_trstresn_ldiam","text":"","code":"check_tr_trstresn_ldiam(TR, preproc = identity, ...)"},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_tr_trstresn_ldiam.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check for TR records with missing TRSTRESN for LDIAM — check_tr_trstresn_ldiam","text":"TR Tumor Results SDTM dataset variables USUBJID, TRTESTCD, TRLINKID/TRLNKID, TRDTC, VISIT, TRORRES, TRSTRESN, TREVAL (optional), TRSTAT (optional), TRSPID (optional) preproc optional company specific preprocessing script ... arguments passed methods","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_tr_trstresn_ldiam.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check for TR records with missing TRSTRESN for LDIAM — check_tr_trstresn_ldiam","text":"Boolean value whether check passed failed, 'msg' attribute check failed","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_tr_trstresn_ldiam.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Check for TR records with missing TRSTRESN for LDIAM — check_tr_trstresn_ldiam","text":"Harris","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_tr_trstresn_ldiam.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check for TR records with missing TRSTRESN for LDIAM — check_tr_trstresn_ldiam","text":"","code":"TR <- data.frame(USUBJID = 1:5,                  TRTESTCD = c(\"OTHER\", rep(\"LDIAM\", 4)),                  TRLINKID = 1:5,                  TRDTC = 1:5,                  VISIT = LETTERS[1:5],                  TRORRES = LETTERS[1:5],                  TRSTRESN = 1:5,                  TRSTAT = \"\",                  TREVAL = \"INVESTIGATOR\",                  TRSPID = \"FORMNAME-R:19/L:19XXXX\",                  stringsAsFactors = FALSE)  check_tr_trstresn_ldiam(TR) #> [1] TRUE  TR1 <- TR TR1$TRSTAT <- NULL TR1$TREVAL <- NULL TR1$TRSPID <- NULL  check_tr_trstresn_ldiam(TR1) #> [1] TRUE  TR2 <- TR TR2$TRSTRESN <- c(\"\", \"NA\", NA, 1, 1)  check_tr_trstresn_ldiam(TR2) #> [1] FALSE #> attr(,\"msg\") #> [1] \"TR has 2 record(s) with missing TRSTRESN values for LDIAM assessment. 0 record(s) indicate 'NOT DONE'. 0 record(s) indicate 'NOT EVALUABLE'. 2 record(s) indicate done and evaluable but otherwise missing.\" #> attr(,\"data\") #>   USUBJID TRTESTCD TRDTC VISIT TRORRES TRSTRESN TRLINKID TRSTAT #> 2       2    LDIAM     2     B       B       NA        2        #> 3       3    LDIAM     3     C       C     <NA>        3        check_tr_trstresn_ldiam(TR2,preproc=roche_derive_rave_row) #> [1] FALSE #> attr(,\"msg\") #> [1] \"TR has 2 record(s) with missing TRSTRESN values for LDIAM assessment. 0 record(s) indicate 'NOT DONE'. 0 record(s) indicate 'NOT EVALUABLE'. 2 record(s) indicate done and evaluable but otherwise missing.\" #> attr(,\"data\") #>   USUBJID TRTESTCD TRDTC VISIT TRORRES TRSTRESN TRLINKID TRSTAT          RAVE #> 2       2    LDIAM     2     B       B       NA        2        FORMNAME-R:19 #> 3       3    LDIAM     3     C       C     <NA>        3        FORMNAME-R:19"},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ts_aedict.html","id":null,"dir":"Reference","previous_headings":"","what":"Check for missing MedDRA version in TS — check_ts_aedict","title":"Check for missing MedDRA version in TS — check_ts_aedict","text":"check looks missing MedDRA version; present, also checking current version","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ts_aedict.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check for missing MedDRA version in TS — check_ts_aedict","text":"","code":"check_ts_aedict(TS)"},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ts_aedict.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check for missing MedDRA version in TS — check_ts_aedict","text":"TS Trial Summary SDTM dataset variables TSPARMCD TSVAL","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ts_aedict.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check for missing MedDRA version in TS — check_ts_aedict","text":"boolean value check failed passed 'msg' attribute test failed","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ts_aedict.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Check for missing MedDRA version in TS — check_ts_aedict","text":"Vira Vrakina, Antony Howard (HackR 2021 Team Pentraxin1)","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ts_aedict.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check for missing MedDRA version in TS — check_ts_aedict","text":"","code":"TS1 <- data.frame(  STUDYID = 1,  TSPARMCD = \"AEDICT\",  TSVAL = \"MedDRA 22.0\",  TSVAL2 = \"\" )  TS2 <- data.frame(  STUDYID = 2,  TSPARMCD = \"AEDICT\",  TSVAL = \"\",  TSVAL1 = \"meddra v22.0\" )  TS3 <- data.frame(  STUDYID = 3,  TSPARMCD = \"AEDICT\",  TSVAL = \"\" )  TS4 <-data.frame(  STUDYID = 4,  TSPARMCD = \"CMDICT\",  TSVAL = \"\" )  TS5 <- data.frame(     STUDYID = 1,     TSPARMCD = \"AEDICT\",     TSVAL = \"meddra 24.0\",     TSVAL2 = \"\" )  TS6 <- data.frame(     STUDYID = 1,     TSPARMCD = \"AEDICT\",     TSVAL = \"    meddra    23.0   \",     TSVAL2 = \"\" )  check_ts_aedict(TS1) #> [1] FALSE #> attr(,\"msg\") #> [1] \"MedDRA version in TS.TSVAL where TS.TSPARMCD=AEDICT is not the latest version as of 2023-05-03\" #> attr(,\"data\") #>   TSPARMCD       TSVAL Current_MedDRA_version #> 1   AEDICT MedDRA 22.0                   26.0 check_ts_aedict(TS2) #> [1] FALSE #> attr(,\"msg\") #> [1] \"No value in TS.TSVAL where TS.TSPARMCD=AEDICT.\" #> attr(,\"data\") #>   TSPARMCD TSVAL Current_MedDRA_version #> 1   AEDICT                         26.0 check_ts_aedict(TS3) #> [1] FALSE #> attr(,\"msg\") #> [1] \"No value in TS.TSVAL where TS.TSPARMCD=AEDICT.\" #> attr(,\"data\") #>   TSPARMCD TSVAL Current_MedDRA_version #> 1   AEDICT                         26.0 check_ts_aedict(TS4) #> [1] FALSE #> attr(,\"msg\") #> [1] \"No record where TS.TSPARMCD=AEDICT.\" check_ts_aedict(TS5) #> [1] FALSE #> attr(,\"msg\") #> [1] \"MedDRA version in TS.TSVAL where TS.TSPARMCD=AEDICT is not the latest version as of 2023-05-03\" #> attr(,\"data\") #>   TSPARMCD       TSVAL Current_MedDRA_version #> 1   AEDICT meddra 24.0                   26.0 check_ts_aedict(TS6) #> [1] FALSE #> attr(,\"msg\") #> [1] \"MedDRA version in TS.TSVAL where TS.TSPARMCD=AEDICT is not the latest version as of 2023-05-03\" #> attr(,\"data\") #>   TSPARMCD                 TSVAL Current_MedDRA_version #> 1   AEDICT     meddra    23.0                      26.0 check_ts_aedict(rbind(TS1,TS1)) #> [1] FALSE #> attr(,\"msg\") #> [1] \"Multiple records where TS.TSPARMCD=AEDICT.\" #> attr(,\"data\") #>   TSPARMCD       TSVAL #> 1   AEDICT MedDRA 22.0 #> 2   AEDICT MedDRA 22.0"},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ts_cmdict.html","id":null,"dir":"Reference","previous_headings":"","what":"Check for missing WHODrug version in TS — check_ts_cmdict","title":"Check for missing WHODrug version in TS — check_ts_cmdict","text":"check looks missing WHODrug version; present, also checking current version","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ts_cmdict.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check for missing WHODrug version in TS — check_ts_cmdict","text":"","code":"check_ts_cmdict(TS)"},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ts_cmdict.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check for missing WHODrug version in TS — check_ts_cmdict","text":"TS Trial Summary SDTM dataset variables TSPARMCD TSVAL","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ts_cmdict.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check for missing WHODrug version in TS — check_ts_cmdict","text":"boolean value check failed passed 'msg' attribute test failed","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ts_cmdict.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Check for missing WHODrug version in TS — check_ts_cmdict","text":"Antony Howard (HackR 2021 Team Pentraxin1)","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ts_cmdict.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check for missing WHODrug version in TS — check_ts_cmdict","text":"","code":"TS1 <- data.frame(  STUDYID = 1,  TSPARMCD = \"CMDICT\",  TSVAL = \"WHODRUG GLOBAL B3 MARCH 1, 2021\",  TSVAL2 = \"\" )  TS2 <- data.frame(  STUDYID = 2,  TSPARMCD = \"CMDICT\",  TSVAL = \"\",  TSVAL1 = \"WHODRUG GLOBAL B3 MARCH 1, 2021\" )  TS3 <- data.frame(  STUDYID = 3,  TSPARMCD = \"CMDICT\",  TSVAL = \"\" )  TS4 <-data.frame(  STUDYID = 4,  TSPARMCD = \"AEDICT\",  TSVAL = \"\" )  TS5 <- data.frame(     STUDYID = 5,     TSPARMCD = \"CMDICT\",     TSVAL = \"meddra 24.0\",     TSVAL2 = \"\" )  TS6 <- data.frame(  STUDYID = 6,  TSPARMCD = \"CMDICT\",  TSVAL = \"WHODRUG vGLOBAL B3 MARCH 1, 2021\",  TSVAL2 = \"\" )  check_ts_cmdict(TS1) #> [1] FALSE #> attr(,\"msg\") #> [1] \"WHODrug version in TS.TSVAL where TS.TSPARMCD=CMDICT is not latest version as of 2023-05-03 or not an exact string match.\" #> attr(,\"data\") #>   TSPARMCD                           TSVAL             Current_WHODRUG_ver #> 1   CMDICT WHODRUG GLOBAL B3 MARCH 1, 2021 WHODRUG GLOBAL B3 MARCH 1, 2023 check_ts_cmdict(TS2) #> [1] FALSE #> attr(,\"msg\") #> [1] \"No value in TS.TSVAL where TS.TSPARMCD=CMDICT. \" #> attr(,\"data\") #>   TSPARMCD TSVAL             Current_WHODRUG_ver #> 1   CMDICT       WHODRUG GLOBAL B3 MARCH 1, 2023 check_ts_cmdict(TS3) #> [1] FALSE #> attr(,\"msg\") #> [1] \"No value in TS.TSVAL where TS.TSPARMCD=CMDICT. \" #> attr(,\"data\") #>   TSPARMCD TSVAL             Current_WHODRUG_ver #> 1   CMDICT       WHODRUG GLOBAL B3 MARCH 1, 2023 check_ts_cmdict(TS4) #> [1] FALSE #> attr(,\"msg\") #> [1] \"No record where TS.TSPARMCD=CMDICT. \" check_ts_cmdict(TS5) #> [1] FALSE #> attr(,\"msg\") #> [1] \"WHODrug version in TS.TSVAL where TS.TSPARMCD=CMDICT is not latest version as of 2023-05-03 or not an exact string match.\" #> attr(,\"data\") #>   TSPARMCD       TSVAL             Current_WHODRUG_ver #> 1   CMDICT meddra 24.0 WHODRUG GLOBAL B3 MARCH 1, 2023 check_ts_cmdict(TS6) #> [1] FALSE #> attr(,\"msg\") #> [1] \"WHODrug version in TS.TSVAL where TS.TSPARMCD=CMDICT is not latest version as of 2023-05-03 or not an exact string match.\" #> attr(,\"data\") #>   TSPARMCD                            TSVAL             Current_WHODRUG_ver #> 1   CMDICT WHODRUG vGLOBAL B3 MARCH 1, 2021 WHODRUG GLOBAL B3 MARCH 1, 2023 check_ts_cmdict(rbind(TS1,TS1)) #> [1] FALSE #> attr(,\"msg\") #> [1] \"Multiple records where TS.TSPARMCD=CMDICT. \" #> attr(,\"data\") #>   TSPARMCD                           TSVAL #> 1   CMDICT WHODRUG GLOBAL B3 MARCH 1, 2021 #> 2   CMDICT WHODRUG GLOBAL B3 MARCH 1, 2021"},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ts_sstdtc_ds_consent.html","id":null,"dir":"Reference","previous_headings":"","what":"Check for missing SSTDTC (Study Start Date) in TS — check_ts_sstdtc_ds_consent","title":"Check for missing SSTDTC (Study Start Date) in TS — check_ts_sstdtc_ds_consent","text":"check looks missing SSTDTC (Study Start Date) TS; present, check date matches earliest informed consent among subject enrolled study. FDA Technical Rejection Criteria Study Data - effective September 15, 2021 requires Study Start Date (https://www.fda.gov/media/100743/download). missing, data queries needed - updating assignment TS domain.","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ts_sstdtc_ds_consent.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check for missing SSTDTC (Study Start Date) in TS — check_ts_sstdtc_ds_consent","text":"","code":"check_ts_sstdtc_ds_consent(DS, TS)"},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ts_sstdtc_ds_consent.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check for missing SSTDTC (Study Start Date) in TS — check_ts_sstdtc_ds_consent","text":"DS Disposition SDTM dataset variables DSCAT, DSSCAT, DSDECOD, DSSTDTC TS Trial Summary SDTM dataset variables TSPARMCD, TSPARM, TSVAL","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ts_sstdtc_ds_consent.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check for missing SSTDTC (Study Start Date) in TS — check_ts_sstdtc_ds_consent","text":"boolean value check failed passed 'msg' attribute test failed","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ts_sstdtc_ds_consent.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Check for missing SSTDTC (Study Start Date) in TS — check_ts_sstdtc_ds_consent","text":"Sara Bodach","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_ts_sstdtc_ds_consent.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check for missing SSTDTC (Study Start Date) in TS — check_ts_sstdtc_ds_consent","text":"","code":"TS1 <- data.frame(  STUDYID = 1,  TSPARMCD = \"SSTDTC\",  TSPARM = \"Study Start Date\",  TSVAL = \"2017-01-01\",  TSVAL1 = \"\",  TSVAL2 = \"\" )  TS2 <- data.frame(  STUDYID = 2,  TSPARMCD = \"AEDICT\",  TSPARM = \"Study Start Date\",  TSVAL = \"MedDRA v23.0\",  TSVAL1 = \"\" )  TS3 <- data.frame(  STUDYID = 3,  TSPARMCD = \"SSTDTC\",  TSPARM = \"Study Start Date\",  TSVAL = \"\" )  TS4 <- data.frame(  STUDYID = 1,  TSPARMCD = \"SSTDTC\",  TSPARM = \"Study Start Date\",  TSVAL = \"2020-01-02\",  TSVAL1 = \"\",  TSVAL2 = \"\" )  TS5 = rbind(TS1, TS4)  TS6 <- data.frame(  STUDYID = 1,  TSPARMCD = \"SSTDTC\",  TSPARM = \"Study Start Date\",  TSVAL = \"2020-01\",  TSVAL1 = \"\",  TSVAL2 = \"\" )  DS1 <- data.frame(  USUBJID = c(1,1,2,3,4),  DSCAT   = rep(\"PROTOCOL MILESTONE\", 5),  DSSCAT   = rep(\"PROTOCOL MILESTONE\", 5),  DSDECOD = c(\"INFORMED CONSENT OBTAINED\", \"OTHER\", \"PHYSICIAN DECISION\",              \"OTHER\", \"INFORMED CONSENT OBTAINED\"),  DSSTDTC = c(\"2021-01-01\", \"2021-01-02\", \"2021-01-02\", \"2021-01-02\", \"2020-01-02\"),  stringsAsFactors = FALSE )  check_ts_sstdtc_ds_consent(DS=DS1, TS=TS1) #> [1] FALSE #> attr(,\"msg\") #> [1] \"TS.TSPARMCD = 'SSTDTC' (Study Start Date) has TS.TSVAL that does not match earliest informed consent date based on DS. TS with Study Start Date required for FDA submissions. \" #> attr(,\"data\") #>   TSPARMCD           TSPARM      TSVAL DS_FIRST_ICDATE #> 1   SSTDTC Study Start Date 2017-01-01      2020-01-02 check_ts_sstdtc_ds_consent(DS=DS1, TS=TS2) #> [1] FALSE #> attr(,\"msg\") #> [1] \"TS.TSPARMCD = 'SSTDTC' (Study Start Date), which is required for FDA submissions, not found. Date in TSVAL should correspond with earliest informed consent date of enrolled patient. \" check_ts_sstdtc_ds_consent(DS=DS1, TS=TS3) #> [1] FALSE #> attr(,\"msg\") #> [1] \"TS.TSPARMCD = 'SSTDTC' (Study Start Date) has missing TS.TSVAL (yyyy-mm-dd) character date. TS with Study Start Date required for FDA submissions. \" #> attr(,\"data\") #>   TSPARMCD           TSPARM TSVAL DS_FIRST_ICDATE #> 1   SSTDTC Study Start Date            2020-01-02 check_ts_sstdtc_ds_consent(DS=DS1, TS=TS4) #> [1] TRUE check_ts_sstdtc_ds_consent(DS=DS1, TS=TS5) #> [1] FALSE #> attr(,\"msg\") #> [1] \"Multiple records with TS.TSPARMCD = 'SSTDTC' (Study Start Date) found when only one expected. TS with Study Start Date required for FDA submissions. \" #> attr(,\"data\") #>   TSPARMCD           TSPARM      TSVAL DS_FIRST_ICDATE #> 1   SSTDTC Study Start Date 2017-01-01      2020-01-02 #> 2   SSTDTC Study Start Date 2020-01-02      2020-01-02 check_ts_sstdtc_ds_consent(DS=DS1, TS=TS6) #> [1] FALSE #> attr(,\"msg\") #> [1] \"TS.TSPARMCD = 'SSTDTC' (Study Start Date) is missing complete TS.TSVAL (yyyy-mm-dd) character date. TS with Study Start Date required for FDA submissions. \" #> attr(,\"data\") #>   TSPARMCD           TSPARM   TSVAL DS_FIRST_ICDATE #> 1   SSTDTC Study Start Date 2020-01      2020-01-02"},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_tu_rs_new_lesions.html","id":null,"dir":"Reference","previous_headings":"","what":"Check for consistency between new lesions and overall PD response — check_tu_rs_new_lesions","title":"Check for consistency between new lesions and overall PD response — check_tu_rs_new_lesions","text":"checks patients new lesions TU (TUSTRESC='NEW') overall response PD RS. applies assessments investigator.","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_tu_rs_new_lesions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check for consistency between new lesions and overall PD response — check_tu_rs_new_lesions","text":"","code":"check_tu_rs_new_lesions(RS, TU)"},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_tu_rs_new_lesions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check for consistency between new lesions and overall PD response — check_tu_rs_new_lesions","text":"RS Response SDTM dataset variables USUBJID, RSSTRESC, RSTESTCD TU Tumor Identification SDTM dataset variables USUBJID, TUSTRESC, TUDTC","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_tu_rs_new_lesions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check for consistency between new lesions and overall PD response — check_tu_rs_new_lesions","text":"TRUE check passed FALSE check failed + 'msg' 'data' attributes","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_tu_rs_new_lesions.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Check for consistency between new lesions and overall PD response — check_tu_rs_new_lesions","text":"Harris","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_tu_rs_new_lesions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check for consistency between new lesions and overall PD response — check_tu_rs_new_lesions","text":"","code":"TU <- data.frame(  USUBJID = 1:3,  TUSTRESC = c(\"INV001\",\"NEW\",\"NEW\"),  TUDTC = \"2017-01-01\" )  RS <- data.frame(  USUBJID = 1:2,  RSTESTCD = \"OVRLRESP\",  RSSTRESC = c(\"SD\",\"NE\") )  check_tu_rs_new_lesions(RS,TU) #> [1] FALSE #> attr(,\"msg\") #> [1] \"There are 2 patients with new lesions but no overall response of PD. \" #> attr(,\"data\") #>   USUBJID      TUDTC #> 1       2 2017-01-01 #> 2       3 2017-01-01"},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_tu_tudtc.html","id":null,"dir":"Reference","previous_headings":"","what":"Check for missing TUDTC values — check_tu_tudtc","title":"Check for missing TUDTC values — check_tu_tudtc","text":"check looks missing TUDTC values returns data frame. applies assessments investigator.","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_tu_tudtc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check for missing TUDTC values — check_tu_tudtc","text":"","code":"check_tu_tudtc(TU, preproc = identity, ...)"},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_tu_tudtc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check for missing TUDTC values — check_tu_tudtc","text":"TU Tumor Identification SDTM dataset variables USUBJID, TUDTC, VISIT, TUORRES, TUSPID (optional), TUTESTCD (optional) preproc optional company specific preprocessing script ... arguments passed methods","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_tu_tudtc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check for missing TUDTC values — check_tu_tudtc","text":"boolean value check failed passed 'msg' attribute test failed","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_tu_tudtc.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Check for missing TUDTC values — check_tu_tudtc","text":"Beeya Na","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_tu_tudtc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check for missing TUDTC values — check_tu_tudtc","text":"","code":"TU <- data.frame( USUBJID = \"1001\", TUDTC = \"2020-05-05\", VISIT = \"C1D1\", TUORRES = 1:10, TUSPID = \"FORMNAME-R:19/L:19XXXX\", TUEVAL = \"INVESTIGATOR\", TUTESTCD = \"TUMIDENT\", stringsAsFactors = FALSE )  TU$TUDTC[1]=\"\" TU$TUDTC[2]=\"NA\" TU$TUDTC[3]=NA  check_tu_tudtc(TU,preproc=roche_derive_rave_row) #> [1] FALSE #> attr(,\"msg\") #> [1] \"TU has 1 patient(s) with 3 record(s) with missing TUDTC. \" #> attr(,\"data\") #>   USUBJID VISIT TUDTC TUORRES       TUEVAL TUTESTCD          RAVE #> 1    1001  C1D1             1 INVESTIGATOR TUMIDENT FORMNAME-R:19 #> 2    1001  C1D1    NA       2 INVESTIGATOR TUMIDENT FORMNAME-R:19 #> 3    1001  C1D1  <NA>       3 INVESTIGATOR TUMIDENT FORMNAME-R:19  TU$TUEVAL[1]=\"\" TU$TUTESTCD=NULL check_tu_tudtc(TU,preproc=roche_derive_rave_row) #> [1] FALSE #> attr(,\"msg\") #> [1] \"TU has 1 patient(s) with 3 record(s) with missing TUDTC. \" #> attr(,\"data\") #>   USUBJID VISIT TUDTC TUORRES       TUEVAL          RAVE #> 1    1001  C1D1             1              FORMNAME-R:19 #> 2    1001  C1D1    NA       2 INVESTIGATOR FORMNAME-R:19 #> 3    1001  C1D1  <NA>       3 INVESTIGATOR FORMNAME-R:19  TU$TUEVAL[2]=\"INDEPENDENT ASSESSOR\" TU$TUEVAL[3]=\"INDEPENDENT ASSESSOR\" TU$TUDTC[4]=\"\" check_tu_tudtc(TU) #> [1] FALSE #> attr(,\"msg\") #> [1] \"TU has 1 patient(s) with 2 record(s) with missing TUDTC. \" #> attr(,\"data\") #>   USUBJID VISIT TUDTC TUORRES       TUEVAL #> 1    1001  C1D1             1              #> 2    1001  C1D1             4 INVESTIGATOR  TU$TUSPID=NULL check_tu_tudtc(TU) #> [1] FALSE #> attr(,\"msg\") #> [1] \"TU has 1 patient(s) with 2 record(s) with missing TUDTC. \" #> attr(,\"data\") #>   USUBJID VISIT TUDTC TUORRES       TUEVAL #> 1    1001  C1D1             1              #> 2    1001  C1D1             4 INVESTIGATOR  TU$VISIT=NULL check_tu_tudtc(TU) #> [1] FALSE #> attr(,\"msg\") #> [1] \"TU is missing the variable: VISIT\""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_tu_tudtc_across_visit.html","id":null,"dir":"Reference","previous_headings":"","what":"Check TU Records where the same date occurs across multiple visits — check_tu_tudtc_across_visit","title":"Check TU Records where the same date occurs across multiple visits — check_tu_tudtc_across_visit","text":"check identifies records date TUDTC occurs across multiple visits. applies assessments investigator.","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_tu_tudtc_across_visit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check TU Records where the same date occurs across multiple visits — check_tu_tudtc_across_visit","text":"","code":"check_tu_tudtc_across_visit(TU)"},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_tu_tudtc_across_visit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check TU Records where the same date occurs across multiple visits — check_tu_tudtc_across_visit","text":"TU Tumor Identification SDTM dataset variables USUBJID, TUDTC, VISIT","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_tu_tudtc_across_visit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check TU Records where the same date occurs across multiple visits — check_tu_tudtc_across_visit","text":"boolean value check failed passed 'msg' attribute test failed.","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_tu_tudtc_across_visit.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Check TU Records where the same date occurs across multiple visits — check_tu_tudtc_across_visit","text":"Harris","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_tu_tudtc_across_visit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check TU Records where the same date occurs across multiple visits — check_tu_tudtc_across_visit","text":"","code":"TU <- data.frame(USUBJID = 1,                  TUDTC = c(rep(\"2016-01-01\",3), rep(\"2016-06-01\",5), rep(\"2016-06-24\",2)),                  VISIT = c(rep(\"C1D1\",3), rep(\"C1D2\",3), rep(\"C2D1\",4)),                  stringsAsFactors=FALSE)  check_tu_tudtc_across_visit(TU) #> [1] FALSE #> attr(,\"msg\") #> [1] \"There are 2 TU records where the same date occurs accross multiple visits. \" #> attr(,\"data\") #>   USUBJID      TUDTC VISIT #> 1       1 2016-06-01  C1D2 #> 2       1 2016-06-01  C2D1"},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_tu_tudtc_visit_ordinal_error.html","id":null,"dir":"Reference","previous_headings":"","what":"Check that all TU  dates are duplicated or earlier than last\nvisit's (possible datetime data entry error) — check_tu_tudtc_visit_ordinal_error","title":"Check that all TU  dates are duplicated or earlier than last\nvisit's (possible datetime data entry error) — check_tu_tudtc_visit_ordinal_error","text":"check identifies TUDTC values duplicated earlier last visit's. Unscheduled visits excluded.","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_tu_tudtc_visit_ordinal_error.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check that all TU  dates are duplicated or earlier than last\nvisit's (possible datetime data entry error) — check_tu_tudtc_visit_ordinal_error","text":"","code":"check_tu_tudtc_visit_ordinal_error(TU)"},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_tu_tudtc_visit_ordinal_error.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check that all TU  dates are duplicated or earlier than last\nvisit's (possible datetime data entry error) — check_tu_tudtc_visit_ordinal_error","text":"TU Tumor Identification SDTM dataset variables USUBJID,TUORRES ,TULOC, VISITNUM, VISIT, TUDTC, TUEVAL","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_tu_tudtc_visit_ordinal_error.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check that all TU  dates are duplicated or earlier than last\nvisit's (possible datetime data entry error) — check_tu_tudtc_visit_ordinal_error","text":"boolean value check failed passed 'msg' attribute test failed","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_tu_tudtc_visit_ordinal_error.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Check that all TU  dates are duplicated or earlier than last\nvisit's (possible datetime data entry error) — check_tu_tudtc_visit_ordinal_error","text":"Jingyuan Chen","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_tu_tudtc_visit_ordinal_error.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check that all TU  dates are duplicated or earlier than last\nvisit's (possible datetime data entry error) — check_tu_tudtc_visit_ordinal_error","text":"","code":"# no case TU <- data.frame(USUBJID = 101:102,                 TUORRES = rep(c(\"NEW\", \"TARGET\"), 5),                 TULOC=rep(c(\"BONE\",\"LIVER\"),5),                 TUDTC = rep(c(\"2017-01-01T08:25\", \"2017-01-05T09:25\",                  \"2017-01-15T10:25\",\"2017-01-20T08:25\",\"2017-01-25T08:25\"), 2),                 VISITNUM = rep(1:5,2),                 VISIT = rep(c( \"Visit 1\", \"Visit 2\", \"Visit 3\", \"Visit 4\",\"VIsit 5\"), 2),                 TUEVAL=\"INVESTIGATOR\",                 stringsAsFactors = FALSE) check_tu_tudtc_visit_ordinal_error(TU) #> [1] TRUE  # adding cases with earler date TU$TUDTC[TU$USUBJID == 101 & TU$VISIT == \"Visit 4\"] <- \"2017-01-10T08:25\" TU$TUDTC[TU$USUBJID == 102 & TU$VISIT == \"Visit 2\"] <- \"2017-01-01T06:25\" check_tu_tudtc_visit_ordinal_error(TU) #> [1] FALSE #> attr(,\"msg\") #> [1] \"TU has 2 records with Possible TUDTC data entry error. \" #> attr(,\"data\") #>   USUBJID TUORRES TULOC VISITNUM   VISIT            TUDTC       TUEVAL #> 1     101     NEW  BONE        4 Visit 4 2017-01-10T08:25 INVESTIGATOR #> 2     102  TARGET LIVER        2 Visit 2 2017-01-01T06:25 INVESTIGATOR #>       last.vis.dtc last.vis visit.order                       check.flag #> 1 2017-01-15T10:25  Visit 3           4 Datetime earlier than last Visit #> 2 2017-01-01T08:25  Visit 1           2 Datetime earlier than last Visit  # adding cases with duplicated date TU$TUDTC[TU$USUBJID == 101 & TU$VISIT == \"Visit 5\"] <- \"2017-01-10T08:25\" TU$TUDTC[TU$USUBJID == 102 & TU$VISIT == \"Visit 3\"] <- \"2017-01-01T06:25\"  check_tu_tudtc_visit_ordinal_error(TU) #> [1] FALSE #> attr(,\"msg\") #> [1] \"TU has 3 records with Possible TUDTC data entry error. \" #> attr(,\"data\") #>   USUBJID TUORRES TULOC VISITNUM   VISIT            TUDTC       TUEVAL #> 1     101     NEW  BONE        4 Visit 4 2017-01-10T08:25 INVESTIGATOR #> 2     102  TARGET LIVER        2 Visit 2 2017-01-01T06:25 INVESTIGATOR #> 3     102  TARGET LIVER        3 Visit 3 2017-01-01T06:25 INVESTIGATOR #>       last.vis.dtc last.vis visit.order                       check.flag #> 1 2017-01-15T10:25  Visit 3           4 Datetime earlier than last Visit #> 2 2017-01-01T08:25  Visit 1           2 Datetime earlier than last Visit #> 3 2017-01-01T06:25  Visit 2           3                       Duplicated"},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_tu_tuloc_missing.html","id":null,"dir":"Reference","previous_headings":"","what":"Check for missing TULOC values — check_tu_tuloc_missing","title":"Check for missing TULOC values — check_tu_tuloc_missing","text":"check looks target lesions missing TULOC values returns data frame. applies assessments investigator.","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_tu_tuloc_missing.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check for missing TULOC values — check_tu_tuloc_missing","text":"","code":"check_tu_tuloc_missing(TU, preproc = identity, ...)"},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_tu_tuloc_missing.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check for missing TULOC values — check_tu_tuloc_missing","text":"TU Tumor Identification SDTM dataset variables USUBJID, TUDTC, VISIT, TUORRES, TULOC, TUSPID (optional) preproc optional company specific preprocessing script ... arguments passed methods","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_tu_tuloc_missing.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check for missing TULOC values — check_tu_tuloc_missing","text":"boolean value check failed passed 'msg' attribute test failed","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_tu_tuloc_missing.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Check for missing TULOC values — check_tu_tuloc_missing","text":"Harris","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_tu_tuloc_missing.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check for missing TULOC values — check_tu_tuloc_missing","text":"","code":"TU <- data.frame( USUBJID = 1:10, TUDTC = 1:10, VISIT = \"C1D1\", TUORRES = \"TARGET\", TULOC = \"LIVER\", TUSPID = \"FORMNAME-R:19/L:19XXXX\", stringsAsFactors=FALSE )  check_tu_tuloc_missing(TU) #> [1] TRUE  TU$TULOC[1] = \"NA\" TU$TULOC[2] = \"\" TU$TULOC[3] = NA  check_tu_tuloc_missing(TU,preproc=roche_derive_rave_row) #> [1] FALSE #> attr(,\"msg\") #> [1] \"There are 3 target lesions with missing TULOC. \" #> attr(,\"data\") #>   USUBJID TUDTC VISIT TUORRES TULOC          RAVE #> 1       1     1  C1D1  TARGET    NA FORMNAME-R:19 #> 2       2     2  C1D1  TARGET       FORMNAME-R:19 #> 3       3     3  C1D1  TARGET  <NA> FORMNAME-R:19  TU$TUSPID <- NULL check_tu_tuloc_missing(TU) #> [1] FALSE #> attr(,\"msg\") #> [1] \"There are 3 target lesions with missing TULOC. \" #> attr(,\"data\") #>   USUBJID TUDTC VISIT TUORRES TULOC #> 1       1     1  C1D1  TARGET    NA #> 2       2     2  C1D1  TARGET       #> 3       3     3  C1D1  TARGET  <NA>"},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_vs_height.html","id":null,"dir":"Reference","previous_headings":"","what":"Check for missing height values — check_vs_height","title":"Check for missing height values — check_vs_height","text":"check looks records height missing well patients height records ","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_vs_height.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check for missing height values — check_vs_height","text":"","code":"check_vs_height(VS, DM)"},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_vs_height.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check for missing height values — check_vs_height","text":"VS Vital Signs SDTM dataset variables USUBJID,VSTEST,VSTESTCD,VSSTRESN,VISIT DM Demographics SDTM dataset variable USUBJID","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_vs_height.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check for missing height values — check_vs_height","text":"boolean value check failed passed 'msg' attribute test failed","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_vs_height.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Check for missing height values — check_vs_height","text":"Sara Bodach","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_vs_height.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check for missing height values — check_vs_height","text":"","code":"DM <- data.frame(  STUDYID = 1,  USUBJID = 1:11 )  VS <- data.frame(  STUDYID = 1,  USUBJID = 1:10,  VSTEST = \"HEIGHT\",  VSTESTCD = \"HEIGHT\",  VSSTRESN = 1:10,  VISIT = 1:10 )  VS$VSSTRESN[1] = NA VS$VSSTRESN[2] = \"NA\" VS$VSSTRESN[3] = \"\" VS$VSSTRESN[4] = \".\"  check_vs_height(VS,DM) #> [1] FALSE #> attr(,\"msg\") #> [1] \"There are 5 patients with no recorded height at any visit. \" #> attr(,\"data\") #>   USUBJID #> 1       1 #> 2       2 #> 3       3 #> 4       4 #> 5      11"},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_vs_sbp_lt_dbp.html","id":null,"dir":"Reference","previous_headings":"","what":"Check that DBP is not higher than SBP in VS — check_vs_sbp_lt_dbp","title":"Check that DBP is not higher than SBP in VS — check_vs_sbp_lt_dbp","text":"check looks non-missing diastolic BP higher non-missing systolic BP","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_vs_sbp_lt_dbp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check that DBP is not higher than SBP in VS — check_vs_sbp_lt_dbp","text":"","code":"check_vs_sbp_lt_dbp(VS)"},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_vs_sbp_lt_dbp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check that DBP is not higher than SBP in VS — check_vs_sbp_lt_dbp","text":"VS Vital Signs SDTM dataset variables USUBJID,VISIT,VSDTC,VSTESTCD,VSSTRESN,VSSPID","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_vs_sbp_lt_dbp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check that DBP is not higher than SBP in VS — check_vs_sbp_lt_dbp","text":"boolean value check failed passed 'msg' attribute test failed","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_vs_sbp_lt_dbp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check that DBP is not higher than SBP in VS — check_vs_sbp_lt_dbp","text":"","code":"vs <- data.frame(  STUDYID = 1,  USUBJID = 1,  VSSPID = c(\"1\",\"2\",\"1\",\"2\"),  VISIT = 1,  VSDTC = c(\"2010-01-01\",\"2010-01-01\",\"2010-01-01\",\"2010-01-01\"),  VSTESTCD = c(\"SYSBP\",\"SYSBP\",             \"DIABP\",\"DIABP\")             ,  VSSTRESN = c(80,120,100,80)  )   vs0 <- subset(vs, select = c(USUBJID, VSSPID, VSSTRESN))   check_vs_sbp_lt_dbp(VS=vs) #> [1] FALSE #> attr(,\"msg\") #> [1] \"VS has 1 records with Systolic BP < Diastolic BP. \" #> attr(,\"data\") #>   USUBJID VISIT      VSDTC SYSBP DIABP #> 1       1     1 2010-01-01    80   100  check_vs_sbp_lt_dbp(VS=vs0) #> [1] FALSE #> attr(,\"msg\") #> [1] \"VS is missing the variables: VISIT, VSDTC, VSTESTCD\""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_vs_vsdtc_after_dd.html","id":null,"dir":"Reference","previous_headings":"","what":"Check for VS dates occurring after death date — check_vs_vsdtc_after_dd","title":"Check for VS dates occurring after death date — check_vs_vsdtc_after_dd","text":"check looks VS dates occur death date","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_vs_vsdtc_after_dd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check for VS dates occurring after death date — check_vs_vsdtc_after_dd","text":"","code":"check_vs_vsdtc_after_dd(AE, DS, VS)"},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_vs_vsdtc_after_dd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check for VS dates occurring after death date — check_vs_vsdtc_after_dd","text":"AE Adverse Event SDTM dataset variables USUBJID, AEDTHDTC, AESTDTC, AEDECOD, AETERM DS Disposition SDTM dataset variables USUBJID, DSSTDTC, DSDECOD, DSTERM VS Vital Signs SDTM dataset variables USUBJID, VSDTC, VSTESTCD, VSORRES","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_vs_vsdtc_after_dd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check for VS dates occurring after death date — check_vs_vsdtc_after_dd","text":"Boolean value whether check passed failed, 'msg' attribute check failed","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_vs_vsdtc_after_dd.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Check for VS dates occurring after death date — check_vs_vsdtc_after_dd","text":"Nina Ting Qi","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/check_vs_vsdtc_after_dd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check for VS dates occurring after death date — check_vs_vsdtc_after_dd","text":"","code":"AE <- data.frame(STUDYID = 1:5, USUBJID = LETTERS[1:5],                  AEDTHDTC = c(rep(\"\", 4), \"2016-01-01\"),                  AESTDTC = rep(\"2016-01-01\", 5),                  AEDECOD = LETTERS[1:5], AETERM = LETTERS[1:5],                  stringsAsFactors = FALSE)  DS <- data.frame(STUDYID = 1:5, USUBJID = LETTERS[1:5],                  DSSTDTC = rep(\"2016-01-02\", 5),                  DSDECOD = c(LETTERS[1:4], \"death\"),                  DSTERM = letters[1:5],                  stringsAsFactors = FALSE)  VS <- data.frame(STUDYID = 1:5, USUBJID = LETTERS[1:5],                  VSDTC = rep(\"2015-12-31\", 5),                  VSTESTCD = letters[1:5],                  VSORRES = 1:5,                  stringsAsFactors = FALSE)  check_vs_vsdtc_after_dd(AE, DS, VS) #> [1] TRUE  VS$VSDTC[1] <- \"2016-01-03\" VS$USUBJID[1] <- VS$USUBJID[5]  check_vs_vsdtc_after_dd(AE, DS, VS) #> [1] FALSE #> attr(,\"msg\") #> [1] \"Patient(s) with VS occurring after death date. \" #> attr(,\"data\") #>   USUBJID      VSDTC VSTESTCD   AEDTHDTC    DSSTDTC EARLIEST_DTHDTC #> 1       E 2016-01-03        a 2016-01-01 2016-01-02      2016-01-01"},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/convert_var_to_ascii.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove non-ASCII characters from reported term in order\nfor Pandoc to create PDF file — convert_var_to_ascii","title":"Remove non-ASCII characters from reported term in order\nfor Pandoc to create PDF file — convert_var_to_ascii","text":"Remove non-ASCII characters reported term order Pandoc create PDF file","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/convert_var_to_ascii.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove non-ASCII characters from reported term in order\nfor Pandoc to create PDF file — convert_var_to_ascii","text":"","code":"convert_var_to_ascii(df, var)"},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/convert_var_to_ascii.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove non-ASCII characters from reported term in order\nfor Pandoc to create PDF file — convert_var_to_ascii","text":"df dataframe var variable non-ASCII characters","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/convert_var_to_ascii.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove non-ASCII characters from reported term in order\nfor Pandoc to create PDF file — convert_var_to_ascii","text":"dataframe","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/convert_var_to_ascii.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove non-ASCII characters from reported term in order\nfor Pandoc to create PDF file — convert_var_to_ascii","text":"","code":"df <- data.frame( var = c(\"test\", \"teäst\"), stringsAsFactors = FALSE )  convert_var_to_ascii(df, 'var') #>    var #> 1 test #> 2 test  df <- data.frame( usubjid = 1:2, var = c(\"test\", \"teästõ\"), stringsAsFactors = FALSE )  convert_var_to_ascii(df, 'var') #>   usubjid  var #> 1       1 test #> 2       2 test"},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/create_R_script.html","id":null,"dir":"Reference","previous_headings":"","what":"Create .R file with sdtmchecks function calls — create_R_script","title":"Create .R file with sdtmchecks function calls — create_R_script","text":"Function uses sdtmchecksmeta input creates .R file function calls","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/create_R_script.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create .R file with sdtmchecks function calls — create_R_script","text":"","code":"create_R_script(metads = sdtmchecksmeta, file = \"sdtmchecks_run_all.R\")"},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/create_R_script.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create .R file with sdtmchecks function calls — create_R_script","text":"metads sdtmchecksmeta file file filename /path save ","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/create_R_script.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create .R file with sdtmchecks function calls — create_R_script","text":"R script user specified sdtmchecks based sdtmchecksmeta file","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/create_R_script.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Create .R file with sdtmchecks function calls — create_R_script","text":"Monarch Shah","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/create_R_script.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create .R file with sdtmchecks function calls — create_R_script","text":"","code":"if (FALSE) {  create_R_script(file = \"run_the_checks.R\")  # Only include selected checks mymetads = sdtmchecksmeta %>%  filter(category == \"ALL\" & priority == \"High\")  create_R_script(metads = mymetads, file = \"run_the_checks.R\")  #Roche specific function calls mymetads = sdtmchecksmeta %>%  mutate(fxn_in=fxn_in_roche)  create_R_script(metads = mymetads, file = \"run_the_checks.R\")  }"},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/dtc_dupl_early.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if start dates are duplicated or earlier than prior visit date — dtc_dupl_early","title":"Check if start dates are duplicated or earlier than prior visit date — dtc_dupl_early","text":"core function checking start dates duplicated earlier last visit's (possible datetime data entry error), can used separate checks domain","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/dtc_dupl_early.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if start dates are duplicated or earlier than prior visit date — dtc_dupl_early","text":"","code":"dtc_dupl_early(dts, vars, groupby, dtc, ...)"},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/dtc_dupl_early.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if start dates are duplicated or earlier than prior visit date — dtc_dupl_early","text":"dts dataset, e.g. EX vars variables form c(\"USUBJID\", \"EXTRT\", \"VISITNUM\", \"VISIT\", \"EXSTDTC\") groupby variables used grouping visit.order derivation dtc date variable ... variables used ordering visit.order derivation","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/dtc_dupl_early.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if start dates are duplicated or earlier than prior visit date — dtc_dupl_early","text":"dataframe records duplicated earlier last visit date","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/dtc_dupl_early.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Check if start dates are duplicated or earlier than prior visit date — dtc_dupl_early","text":"James Zhang","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/fail.html","id":null,"dir":"Reference","previous_headings":"","what":"Fail object — fail","title":"Fail object — fail","text":"Message part Data responsible check fail","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/fail.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fail object — fail","text":"","code":"fail(msg, data = NULL)"},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/fail.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fail object — fail","text":"msg character strings fail message data data frame printed fail message","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/fail.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fail object — fail","text":"Boolean msg data attributes","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/grapes-has_all-grapes.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if data frame has all specified variables — %has_all%","title":"Check if data frame has all specified variables — %has_all%","text":"Check data frame specified variables","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/grapes-has_all-grapes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if data frame has all specified variables — %has_all%","text":"","code":"df %has_all% varnames"},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/grapes-has_all-grapes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if data frame has all specified variables — %has_all%","text":"df data frame varnames vector variable names","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/grapes-has_all-grapes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if data frame has all specified variables — %has_all%","text":"boolean","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/grapes-has_any-grapes.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if data frame has at least one of the specified variables — %has_any%","title":"Check if data frame has at least one of the specified variables — %has_any%","text":"Check data frame least one specified variables","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/grapes-has_any-grapes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if data frame has at least one of the specified variables — %has_any%","text":"","code":"df %has_any% varnames"},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/grapes-has_any-grapes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if data frame has at least one of the specified variables — %has_any%","text":"df data frame varnames vector variable names","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/grapes-has_any-grapes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if data frame has at least one of the specified variables — %has_any%","text":"boolean","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/grapes-lacks_all-grapes.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if data frame is missing any of the specified variables — %lacks_all%","title":"Check if data frame is missing any of the specified variables — %lacks_all%","text":"Check data frame missing specified variables","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/grapes-lacks_all-grapes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if data frame is missing any of the specified variables — %lacks_all%","text":"","code":"df %lacks_all% varnames"},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/grapes-lacks_all-grapes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if data frame is missing any of the specified variables — %lacks_all%","text":"df data frame varnames vector variable names","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/grapes-lacks_all-grapes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if data frame is missing any of the specified variables — %lacks_all%","text":"boolean","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/grapes-lacks_any-grapes.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if data frame has at least one variable from a set of specified variables — %lacks_any%","title":"Check if data frame has at least one variable from a set of specified variables — %lacks_any%","text":"Check data frame least one variable set specified variables","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/grapes-lacks_any-grapes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if data frame has at least one variable from a set of specified variables — %lacks_any%","text":"","code":"df %lacks_any% varnames"},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/grapes-lacks_any-grapes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if data frame has at least one variable from a set of specified variables — %lacks_any%","text":"df data frame varnames vector variable names","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/grapes-lacks_any-grapes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if data frame has at least one variable from a set of specified variables — %lacks_any%","text":"boolean","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/impute_day01.html","id":null,"dir":"Reference","previous_headings":"","what":"Add day of ","title":"Add day of ","text":"Add day \"01\" dates format \"yyyy-mm\"","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/impute_day01.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add day of ","text":"","code":"impute_day01(dates)"},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/impute_day01.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add day of ","text":"string","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/is_sas_na.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if the elements could be of any SAS missing data variant — is_sas_na","title":"Check if the elements could be of any SAS missing data variant — is_sas_na","text":"Missing Data sas7bdat imported datesets imported different ways currently check 'NA', NA, '.', ''.","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/is_sas_na.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if the elements could be of any SAS missing data variant — is_sas_na","text":"","code":"is_sas_na(x)"},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/is_sas_na.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if the elements could be of any SAS missing data variant — is_sas_na","text":"x vector data","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/is_sas_na.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if the elements could be of any SAS missing data variant — is_sas_na","text":"logical vector","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/is_sas_na.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if the elements could be of any SAS missing data variant — is_sas_na","text":"","code":"is_sas_na(c(1,2,NA)) #>     1     2  <NA>  #> FALSE FALSE  TRUE   is_sas_na(c(\"a\", NA, \"NA\", \"\")) #>     a  <NA>    NA        #> FALSE  TRUE  TRUE  TRUE"},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/lacks_msg.html","id":null,"dir":"Reference","previous_headings":"","what":"Check data frame for mandatory variables and specify which are missing in\nmessage — lacks_msg","title":"Check data frame for mandatory variables and specify which are missing in\nmessage — lacks_msg","text":"Check data frame mandatory variables specify missing message","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/lacks_msg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check data frame for mandatory variables and specify which are missing in\nmessage — lacks_msg","text":"","code":"lacks_msg(df, varnames)"},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/lacks_msg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check data frame for mandatory variables and specify which are missing in\nmessage — lacks_msg","text":"df data frame varnames vector variable names","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/lacks_msg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check data frame for mandatory variables and specify which are missing in\nmessage — lacks_msg","text":"character string saying variables missing","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/missing_month.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to check if month is missing while year and day are non-missing\n(i.e. would be in the format of ","title":"Function to check if month is missing while year and day are non-missing\n(i.e. would be in the format of ","text":"Function check month missing year day non-missing (.e. format \"yyyy---dd\")","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/missing_month.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to check if month is missing while year and day are non-missing\n(i.e. would be in the format of ","text":"","code":"missing_month(date)"},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/missing_month.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to check if month is missing while year and day are non-missing\n(i.e. would be in the format of ","text":"date date vector (character) format 2020-01-20","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/missing_month.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to check if month is missing while year and day are non-missing\n(i.e. would be in the format of ","text":"vector","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/nickname.html","id":null,"dir":"Reference","previous_headings":"","what":"Nickname for package version — nickname","title":"Nickname for package version — nickname","text":"nickname associated package version.  Previously lived description file.","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/nickname.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Nickname for package version — nickname","text":"","code":"nickname"},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/nickname.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Nickname for package version — nickname","text":"object class character length 1.","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/pass.html","id":null,"dir":"Reference","previous_headings":"","what":"Pass object — pass","title":"Pass object — pass","text":"Pass object","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/pass.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pass object — pass","text":"","code":"pass()"},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/pass.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pass object — pass","text":"boolean TRUE","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/report_to_xlsx.html","id":null,"dir":"Reference","previous_headings":"","what":"Save report as an xlsx file — report_to_xlsx","title":"Save report as an xlsx file — report_to_xlsx","text":"Save report xlsx file","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/report_to_xlsx.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Save report as an xlsx file — report_to_xlsx","text":"","code":"report_to_xlsx(res, outfile)"},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/report_to_xlsx.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Save report as an xlsx file — report_to_xlsx","text":"res results list created run_all_checks outfile file path/name write ","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/report_to_xlsx.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Save report as an xlsx file — report_to_xlsx","text":"xlsx file","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/report_to_xlsx.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Save report as an xlsx file — report_to_xlsx","text":"","code":"if (FALSE) {  ae = haven::read_sas(\"path/to/ae.sas7bdat\") cm = haven::read_sas(\"path/to/cm.sas7bdat\") dm = haven::read_sas(\"path/to/dm.sas7bdat\")  all_rec=run_all_checks(verbose = TRUE)  report_to_xlsx(res=all_rec,outfile=\"check_results.xlsx\")   }"},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/roche_covid_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Check MedDRA version in TS and return dataframe with covid terms according to this version — roche_covid_df","title":"Check MedDRA version in TS and return dataframe with covid terms according to this version — roche_covid_df","text":"function reads dataset covid terms according MedDRA version found TS function assumes folder called \"data\" contains .Rdata files file names indexed medDRA version, e.g. covid230.Rdata, covid231.Rdata, covid240.Rdata,etc.  also assumes pan MedDRA version data/covid.Rdata file use specific version cant found.","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/roche_covid_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check MedDRA version in TS and return dataframe with covid terms according to this version — roche_covid_df","text":"","code":"roche_covid_df(TS = NULL)"},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/roche_covid_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check MedDRA version in TS and return dataframe with covid terms according to this version — roche_covid_df","text":"TS Trial Summary SDTM dataset (optional) variables TSPARMCD, TSVAL","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/roche_covid_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check MedDRA version in TS and return dataframe with covid terms according to this version — roche_covid_df","text":"dataframe","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/roche_covid_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check MedDRA version in TS and return dataframe with covid terms according to this version — roche_covid_df","text":"","code":"if (FALSE) { #First COVID dataset is from v23.0, so use the latest ts1 <- data.frame(TSPARMCD = \"AEDICT\", TSVAL = c(\"MedDRA 22.0\")) roche_covid_df(TS=ts1)  #COVID datset chosen regardless of the 'v' precending version number ts2 <- data.frame(TSPARMCD = \"AEDICT\", TSVAL = c(\"MedDRA v23.0\")) roche_covid_df(TS=ts2)  ts2a <- data.frame(TSPARMCD = \"AEDICT\", TSVAL = c(\"MedDRA 23.0\")) roche_covid_df(TS=ts2a)  #Missing version default to use the latest available ts3 <- data.frame(TSPARMCD = \"AEDICT\", TSVAL = \"\") roche_covid_df(TS=ts3)  #Future version default to use the latest available ts4 <- data.frame(TSPARMCD = \"AEDICT\", TSVAL = c(\"MedDRA v40.1\")) roche_covid_df(TS=ts4) }"},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/roche_derive_rave_row.html","id":null,"dir":"Reference","previous_headings":"","what":"Utility function to obtain Rave row — roche_derive_rave_row","title":"Utility function to obtain Rave row — roche_derive_rave_row","text":"function derives Rave row number XXSPID","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/roche_derive_rave_row.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Utility function to obtain Rave row — roche_derive_rave_row","text":"","code":"roche_derive_rave_row(   dts,   domains = c(\"ae\", \"cm\", \"ds\", \"lb\", \"pr\", \"ss\", \"tr\", \"tu\") )"},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/roche_derive_rave_row.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Utility function to obtain Rave row — roche_derive_rave_row","text":"dts dataset e.g. AE domains domains wish identify SPID variable ","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/roche_derive_rave_row.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Utility function to obtain Rave row — roche_derive_rave_row","text":"dataset rave row number","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/roche_derive_rave_row.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Utility function to obtain Rave row — roche_derive_rave_row","text":"Stella Banjo (HackR 2021)","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/roche_derive_rave_row.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Utility function to obtain Rave row — roche_derive_rave_row","text":"","code":"AE <- data.frame(   STUDY = c(rep(\"1\", 6)),   DOMAIN = c(rep(\"AE\", 6)),   USUBJID = c(rep(\"PT1\", 6)),   AESEQ = c(1, 2, 3, 4, 5, 6),   AETERM = rep(\"AE Raw Term\",6),   AEDECOD = rep(\"AE Preferred Term\",6),   AESPID = c(\"FORMNAME-R:13/L:13XXXX\",              \"FORMNAME-R:16/L:16XXXX\",              \"FORMNAME-R:2/L:2XXXX\",              \"FORMNAME-R:19/L:19XXXX\",              \"FORMNAME-R:5/L:5XXXX\",              \"FORMNAME-R:20/L:20XXXX\"),   AESTDTC = c(rep(\"2020-01-01\", 6)) )  roche_derive_rave_row(AE) #>   STUDY DOMAIN USUBJID AESEQ      AETERM           AEDECOD #> 1     1     AE     PT1     1 AE Raw Term AE Preferred Term #> 2     1     AE     PT1     2 AE Raw Term AE Preferred Term #> 3     1     AE     PT1     3 AE Raw Term AE Preferred Term #> 4     1     AE     PT1     4 AE Raw Term AE Preferred Term #> 5     1     AE     PT1     5 AE Raw Term AE Preferred Term #> 6     1     AE     PT1     6 AE Raw Term AE Preferred Term #>                   AESPID    AESTDTC          RAVE #> 1 FORMNAME-R:13/L:13XXXX 2020-01-01 FORMNAME-R:13 #> 2 FORMNAME-R:16/L:16XXXX 2020-01-01 FORMNAME-R:16 #> 3   FORMNAME-R:2/L:2XXXX 2020-01-01  FORMNAME-R:2 #> 4 FORMNAME-R:19/L:19XXXX 2020-01-01 FORMNAME-R:19 #> 5   FORMNAME-R:5/L:5XXXX 2020-01-01  FORMNAME-R:5 #> 6 FORMNAME-R:20/L:20XXXX 2020-01-01 FORMNAME-R:20"},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/run_all_checks.html","id":null,"dir":"Reference","previous_headings":"","what":"Run all checks in sdtmchecks package using parallel processing — run_all_checks","title":"Run all checks in sdtmchecks package using parallel processing — run_all_checks","text":"function runs checks sdtmchecks package.  expects sdtm domains saved dataframe objects global environment.  dataframes lowercase names, e.g. dm.","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/run_all_checks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run all checks in sdtmchecks package using parallel processing — run_all_checks","text":"","code":"run_all_checks(   metads = sdtmchecksmeta,   priority = c(\"High\", \"Medium\", \"Low\"),   type = c(\"ALL\", \"ONC\", \"COVID\", \"PRO\", \"OPHTH\"),   verbose = TRUE,   ncores = 1 )"},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/run_all_checks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run all checks in sdtmchecks package using parallel processing — run_all_checks","text":"metads Metadata use execute checks.  default sdtmchecksmeta dataframe available packages.  object easily customized, e.g subset, etc. priority Type data checks priority, .e. c(\"High\", \"Medium\", \"Low\"). NULL runs priority. type Type data checks, .e. c(\"\", \"ONC\", \"COV\", \"PRO\", \"OPHTH\"). NULL runs type. verbose Whether display messages running ncores Number cores parallel processing, default 1 (sequential)","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/run_all_checks.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run all checks in sdtmchecks package using parallel processing — run_all_checks","text":"list results individual checks","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/run_all_checks.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Run all checks in sdtmchecks package using parallel processing — run_all_checks","text":"look documentation data checks package, please use command ??sdtmchecks","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/run_all_checks.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run all checks in sdtmchecks package using parallel processing — run_all_checks","text":"","code":"if (FALSE) {  # Assuming sdtm datasets are in your global environment all_rec<-run_all_checks(metads=sdtmchecksmeta,                          priority=c(\"High\",\"Medium\",\"Low\"),                          type=c(\"ALL\", \"ONC\", \"COVID\", \"PRO\")) all_rec<-run_all_checks(metads=sdtmchecksmeta,                          priority=NULL,                          type=c(\"ONC\", \"COVID\", \"PRO\")) }"},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/run_check.html","id":null,"dir":"Reference","previous_headings":"","what":"Run a single check in sdtmchecks package — run_check","title":"Run a single check in sdtmchecks package — run_check","text":"function runs single check sdtmchecks package. expects check name, function performs check info pdf Excel files. also expects T/F value determines whether display messages running. Excluding verbose, parameters function usually passed filtering metads contain row corresponding check interest, assigning parameter contents eponymous column metads (see example ). function mostly run inside mcmapply run_all_checks_parallel function, loops checks rows metads.","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/run_check.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run a single check in sdtmchecks package — run_check","text":"","code":"run_check(   check,   fxn_in,   xls_title,   pdf_title,   pdf_subtitle,   pdf_return,   verbose )"},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/run_check.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run a single check in sdtmchecks package — run_check","text":"check Check name. fxn_in Function performing check. xls_title Excel title. pdf_title PDF title. pdf_subtitle PDF subtitle. pdf_return Text display PDF check run. verbose Whether display messages running","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/run_check.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run a single check in sdtmchecks package — run_check","text":"list results check.","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/run_check.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Run a single check in sdtmchecks package — run_check","text":"look documentation data checks package, please use command ??sdtmchecks","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/run_check.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run a single check in sdtmchecks package — run_check","text":"","code":"if (FALSE) {  # Assuming sdtm datasets are in your global environment  metads <- sdtmchecksmeta[1,] # Filter sdtmchecksmeta so that only one check is present  rec <- run_check(   check = metads$check,   fxn_in = metads$fxn_in,   xls_title = metads$xls_title,   pdf_title = metads$pdf_title,   pdf_subtitle = metads$pdf_subtitle,   pdf_return = metads$pdf_return,   verbose = T ) }"},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/sdtmchecks.html","id":null,"dir":"Reference","previous_headings":"","what":"sdtmchecks: A package containing checks for common SDTM issues — sdtmchecks","title":"sdtmchecks: A package containing checks for common SDTM issues — sdtmchecks","text":"Package containing checks common SDTM issues. package contains functions identify common data issues SDTM data. checks intended generalizable, actionable, meaningful analysis.","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/sdtmchecksmeta.html","id":null,"dir":"Reference","previous_headings":"","what":"Metadata for sdtmchecks — sdtmchecksmeta","title":"Metadata for sdtmchecks — sdtmchecksmeta","text":"dataset containing SDTM checks package. data can used input functions.","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/sdtmchecksmeta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Metadata for sdtmchecks — sdtmchecksmeta","text":"","code":"data(sdtmchecksmeta)"},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/sdtmchecksmeta.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Metadata for sdtmchecks — sdtmchecksmeta","text":"data frame row R check package: check R check name, without .R file extension category Therapeutic area grouping priority High, Medium, Low domains SDTM domains used function xls_title Excel title tab pdf_title PDF title check pdf_subtitle PDF subtitle check, * start subtitle line pdf_return PDF return message SDTM domain available fxn_in explicit string input domain name(s) R check function fxn_in_roche explicit string input domain name(s) R check function, Roche specific mapping related mapping?  .e. site issue. exist_string explicit string input check existence SDTM domain(s) running check","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/sdtmchecksmeta.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Metadata for sdtmchecks — sdtmchecksmeta","text":"","code":"data(sdtmchecksmeta) head(sdtmchecksmeta[,1:5]) #> # A tibble: 6 × 5 #>   check                              category priority domains xls_title         #>   <chr>                              <chr>    <chr>    <chr>   <chr>             #> 1 check_ae_aeacn_ds_disctx_covid     COVID    Low      ae, ds  COVID AE trt dis… #> 2 check_ae_aeacnoth                  ALL      Low      ae      AE AEACNOTH mult… #> 3 check_ae_aeacnoth_ds_disctx        ALL      Low      ae, ds  AE AEACNOTx Disc… #> 4 check_ae_aeacnoth_ds_stddisc_covid COVID    Low      ae, ds  COVID AE study d… #> 5 check_ae_aedecod                   ALL      High     ae      AE Missing PT     #> 6 check_ae_aedthdtc_aesdth           ALL      High     ae      AE Death Date vs…  if (FALSE) {  sdtmchecksmeta }"},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/truncate_var_strings.html","id":null,"dir":"Reference","previous_headings":"","what":"Utility function to truncate data in var_name — truncate_var_strings","title":"Utility function to truncate data in var_name — truncate_var_strings","text":"function truncate strings variables according length specified","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/truncate_var_strings.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Utility function to truncate data in var_name — truncate_var_strings","text":"","code":"truncate_var_strings(dt, var_name, trunc_length)"},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/truncate_var_strings.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Utility function to truncate data in var_name — truncate_var_strings","text":"dt dataset e.g. AE var_name variable name e.g. AETERM trunc_length e.g. length string truncated e.g. 50","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/truncate_var_strings.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Utility function to truncate data in var_name — truncate_var_strings","text":"dataset truncated variable","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/truncate_var_strings.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Utility function to truncate data in var_name — truncate_var_strings","text":"Stella Banjo(HackR 2021)","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/reference/truncate_var_strings.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Utility function to truncate data in var_name — truncate_var_strings","text":"","code":"# Testing: no truncation  AE <- data.frame(  USUBJID = 1:5,  DOMAIN = \"AE\",  AESEQ = 1:5,  AESTDTC = 1:5,  AETERM = 1:5,  AEDECOD = 1:5,  stringsAsFactors = FALSE )  truncate_var_strings(AE, var_name = \"AETERM\", trunc_length = 50) #>   USUBJID DOMAIN AESEQ AESTDTC AETERM AEDECOD #> 1       1     AE     1       1      1       1 #> 2       2     AE     2       2      2       2 #> 3       3     AE     3       3      3       3 #> 4       4     AE     4       4      4       4 #> 5       5     AE     5       5      5       5  # Testing: Truncation  AE$AETERM[4] <- \"THIS IS A SUPER LONG AE TERM, SO LONG IN FACT THAT ITS OVER 50 CHARACTERS.\" AE$AETERM[5] <- \"THIS AE TERM IS WAY TOO LONG FOR A NICELY FORMATTED REPORT\"  truncate_var_strings(AE, var_name = \"AETERM\", trunc_length = 50) #>   USUBJID DOMAIN AESEQ AESTDTC                                           AETERM #> 1       1     AE     1       1                                                1 #> 2       2     AE     2       2                                                2 #> 3       3     AE     3       3                                                3 #> 4       4     AE     4       4 THIS IS A SUPER LONG AE TERM, SO LONG IN FACT... #> 5       5     AE     5       5     THIS AE TERM IS WAY TOO LONG FOR A NICELY... #>   AEDECOD #> 1       1 #> 2       2 #> 3       3 #> 4       4 #> 5       5"},{"path":[]},{"path":"https://pharmaverse.github.io/sdtmchecks/news/index.html","id":"new-data-check-functions-0-1-5","dir":"Changelog","previous_headings":"","what":"New data check functions","title":"sdtmchecks 0.1.5 “Hunter Pi”","text":"check_ds_multdeath_dsstdtc() - flags DS multiple non-missing death dates DSSTDTC match (#62)","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/news/index.html","id":"refinements-of-existing-data-check-functions-0-1-5","dir":"Changelog","previous_headings":"","what":"Refinements of existing data check functions","title":"sdtmchecks 0.1.5 “Hunter Pi”","text":"check_dm_usubjid_dup() check_qs_dup()","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/news/index.html","id":"metadata-updates-0-1-5","dir":"Changelog","previous_headings":"","what":"Metadata updates","title":"sdtmchecks 0.1.5 “Hunter Pi”","text":"Metadata corresponding new data check added sdtmchecksmeta.RData (#63)","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/news/index.html","id":"misc-updates-0-1-5","dir":"Changelog","previous_headings":"","what":"Misc updates","title":"sdtmchecks 0.1.5 “Hunter Pi”","text":"Clarification added “Writing New Check” Vignette contributor write access repo (#65)","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/sdtmchecks/news/index.html","id":"refinements-of-existing-data-check-functions-0-1-4","dir":"Changelog","previous_headings":"","what":"Refinements of existing data check functions","title":"sdtmchecks 0.1.4 “Very Cool Nickname”","text":"check_lb_lbstresu() - add text strings (NEGATIVE, POSITIVE, DONE) allowed LBORRES reduce false positives (#27) check_tr_trstresn_ldiam() - include return message summarizes total TR records missing, DONE, EVALUABLE help interpreting output (#27) check_ae_aeacnoth_ds_disctx() - corrected typo return message (#56)","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/news/index.html","id":"new-functions-0-1-4","dir":"Changelog","previous_headings":"","what":"New functions","title":"sdtmchecks 0.1.4 “Very Cool Nickname”","text":"create_R_script() can use sdtmchecksmeta.RData input programmatically generate R script function calls (#22) report_to_xlsx() generate output results selected data check functions .xlsx file including tab check potential discrepancies flagged summary page conditional formatting provide overview results (#11)","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/news/index.html","id":"new-documentation-0-1-4","dir":"Changelog","previous_headings":"","what":"New documentation","title":"sdtmchecks 0.1.4 “Very Cool Nickname”","text":"“Writing New Check” published Vignette (#5)","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/news/index.html","id":"misc-updates-0-1-4","dir":"Changelog","previous_headings":"","what":"Misc updates","title":"sdtmchecks 0.1.4 “Very Cool Nickname”","text":"Add CI/CD workflow (#2, #8) Add package nickname nickname.RData reference data.R, globals.R (#12) Remove repeated occurrence convert_var_to_ascii() utils.R (#31)","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/sdtmchecks/news/index.html","id":"misc-updates-0-1-2","dir":"Changelog","previous_headings":"","what":"Misc updates","title":"sdtmchecks 0.1.2 “The one without the nickname”","text":"Removed package nickname Description","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/sdtmchecks/news/index.html","id":"initial-package-deployment-0-1-1","dir":"Changelog","previous_headings":"","what":"Initial package deployment","title":"sdtmchecks 0.1.1 “Open Up”","text":"Initial deployment open-source sdtmchecks Pharmaverse package, based code migrated internal Roche sdtmchecks package, includes variety data checks utility functions Updated roxygen2 headers generalized examples Pre-processing function call (preproc=identity,...) allow company-specific pre-processing Proprietary dataset call-ins removed Metadata corresponding data check functions sdtmchecksmeta.RData added data subdirectory; Roche-specific acronyms removed descriptive text Utility functions added within separate roche_utils.R file Roche-specific processing serve reference implementation company-specific pre-processing globals.R added explicit list pass utils::globalVariables() pass() fail() is_sas_na() truncate_var_strings() dtc_dupl_early() impute_day01() convert_var_to_ascii() %lacks_all%(), %lacks_any%(), lacks_msg(), %has_all%(), %has_any%() (lacks_has.R) README, LICENSE, DESCRIPTION, _pkgdown.yml, vignette files tailored github.com/pharmaverse (#1) Package logo added man/figures Package site created via pkgdown","code":""},{"path":"https://pharmaverse.github.io/sdtmchecks/news/index.html","id":"new-data-check-functions-post-migration-0-1-1","dir":"Changelog","previous_headings":"","what":"New data check functions (post-migration)","title":"sdtmchecks 0.1.1 “Open Up”","text":"check_ae_aeacnoth_ds_disctx() flags AE record indicates person discontinued study corresponding DS record indicating study discontinuation (DS.DSSCAT = \"STUDY COMPLETION/EARLY DISCONTINUATION\" DS.DSDECOD != \"COMPLETED\") (#3)","code":""}]
